{"version":3,"sources":["webpack://clear_horizon/./@nextgis/packages/cancelable-promise/src/CancelError.ts","webpack://clear_horizon/./@nextgis/packages/cancelable-promise/src/PromiseControl.ts","webpack://clear_horizon/./@nextgis/packages/cancelable-promise/src/TimeoutError.ts","webpack://clear_horizon/./@nextgis/packages/cancelable-promise/src/CancelablePromise.ts","webpack://clear_horizon/./@nextgis/packages/cancelable-promise/src/index.ts"],"names":["CancelError","Object","setPrototypeOf","prototype","Error","PromiseControl","options","Map","this","_promises","size","promise","has","delete","_onStop","get","name","key","exist","onStart","isLoaded","set","finally","remove","forEach","x","cancel","clear","func","add","bind","target","descriptor","originalMethod","value","args","result","apply","WaitForMe","onStop","TimeoutError","handleCallback","resolve","reject","callback","r","e","ID","Symbol","toStringTag","CancelablePromise","executor","timeout","_cancelPromise","Promise","resolve_","reject_","_setCanceledCallback","er","promises","attach","_isPending","error","handler","_cancelHandlers","push","setTimeout","_promise","race","opt","values","all","then","catch","p","_isCanceled","_children","onfulfilled","onrejected","_parentPromise","undefined","onfinally","parent","_getTopParent","length","_destroy","hasParent"],"mappings":"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","file":"main-9dbcb6f1d47a661.js","sourcesContent":["export class CancelError extends Error {\n  name = 'CancelError';\n\n  constructor() {\n    super();\n    Object.setPrototypeOf(this, CancelError.prototype);\n  }\n}\n","import CancelablePromise from '.';\n\nexport interface PromiseControlOptions {\n  onStart?: () => void;\n  onStop?: () => void;\n}\n\ntype Key = CancelablePromise | string | number | symbol;\n\nexport class PromiseControl {\n  private _promises: Map<Key, CancelablePromise> = new Map();\n\n  get isLoaded(): boolean {\n    return this._promises.size > 0;\n  }\n\n  constructor(private options: PromiseControlOptions = {}) {}\n\n  remove(promise: Key): void {\n    if (this._promises.has(promise)) {\n      this._promises.delete(promise);\n      this._onStop();\n    }\n  }\n\n  get(promise: Key): CancelablePromise | undefined {\n    return this._promises.get(promise);\n  }\n\n  add<T extends CancelablePromise = CancelablePromise>(\n    promise: T,\n    name?: string | number | symbol,\n  ): CancelablePromise<T> {\n    const key = name ? name : promise;\n    const exist = this._promises.get(key);\n    if (this.options.onStart && !this.isLoaded) {\n      this.options.onStart();\n    }\n    if (exist) {\n      return exist;\n    }\n    this._promises.set(key, promise);\n    promise.finally(() => {\n      this.remove(key);\n    });\n    return promise;\n  }\n\n  abort(): void {\n    if (this.isLoaded) {\n      this._promises.forEach((x) => {\n        if (x.cancel) {\n          x.cancel();\n        }\n      });\n      this._promises.clear();\n      this._onStop();\n    }\n  }\n\n  waitFunc<T>(func: () => any, name = ''): CancelablePromise<T> {\n    name = name || func.name;\n    const exist = this.get(name);\n    if (exist) {\n      return exist;\n    }\n    return this.add(func(), name);\n  }\n\n  WaitForMe(name: string | symbol = ''): MethodDecorator {\n    const get = this.get.bind(this);\n    const add = this.add.bind(this);\n    return function (\n      target: unknown,\n      key: string | symbol,\n      descriptor: PropertyDescriptor,\n    ): PropertyDescriptor {\n      const originalMethod = descriptor.value;\n      name = name || key;\n      descriptor.value = function (...args: any[]) {\n        const exist = get(name);\n        if (exist) {\n          return exist;\n        }\n        const result = add(originalMethod.apply(this, args), name);\n        return result;\n      };\n\n      return descriptor;\n    };\n  }\n\n  /** @deprecated use {@link PromiseControl.WaitForMe } instead */\n  GetOrCreateDecorator(name: string | symbol = ''): MethodDecorator {\n    return this.WaitForMe(name);\n  }\n\n  private _onStop(): void {\n    if (this.options.onStop && !this.isLoaded) {\n      this.options.onStop();\n    }\n  }\n}\n","export class TimeoutError extends Error {\n  name = 'TimeoutError';\n\n  constructor() {\n    super();\n    Object.setPrototypeOf(this, TimeoutError.prototype);\n  }\n}\n","import { CancelError } from './CancelError';\nimport { PromiseControl, PromiseControlOptions } from './PromiseControl';\nimport { TimeoutError } from './TimeoutError';\n\ntype Reject = (reason?: any) => void;\ntype Resolve = (value?: any) => void;\nexport type OnCancelFunction = (cancelHandler: () => void) => void;\n\nconst handleCallback = <T = never>(\n  resolve: Resolve,\n  reject: Reject,\n  callback: Resolve,\n  r: T,\n) => {\n  try {\n    resolve(callback(r));\n  } catch (e) {\n    reject(e);\n  }\n};\n\nlet ID = 0;\n\n/**\n * Promise that can be canceled\n *\n * @example\n * Catch `CancelError`\n * ```javascript\n * import CancelablePromise from \"@nextgis/cancelable-promise\";\n *\n * const promise = new CancelablePromise((resolve, reject) => {\n *  setTimeout(() => resolve(), 100);\n * }).catch((er) => {\n *  if (er.name === \"CancelError\") {\n *    // handle cancel error\n *  }\n *  throw er;\n * });\n *\n * promise.cancel();\n * ```\n * @example\n * Handle `onCancel` callback\n * ```javascript\n * import CancelablePromise from \"@nextgis/cancelable-promise\";\n *\n * const promise = new CancelablePromise((resolve, reject, onCancel) => {\n *   const xhr = new XMLHttpRequest();\n *   xhr.open(\"GET\", url, true);\n *   xhr.onload = () => {\n *     resolve(xhr.responseText);\n *   };\n *   xhr.onerror = (er) => {\n *     reject(er);\n *   };\n *\n *   onCancel(() => {\n *     xhr.abort();\n *   });\n *\n *   xhr.send();\n * });\n *\n * promise.cancel();\n * ```\n * @public\n */\nexport class CancelablePromise<T = any> implements Promise<T> {\n  static CancelError = CancelError;\n  static TimeoutError = TimeoutError;\n  static PromiseControl = PromiseControl;\n\n  readonly [Symbol.toStringTag]: string;\n  readonly id = ID++;\n  private _isCanceled = false;\n  private _isPending = true;\n  private _promise?: Promise<T>;\n  private _cancelPromise?: Promise<T>;\n  private _cancelHandlers: (() => void)[] = [];\n  private _setCanceledCallback?: (er?: any) => void;\n  private _parentPromise?: CancelablePromise;\n  private _children: CancelablePromise[] = [];\n\n  constructor(\n    executor: (\n      resolve: (value?: T | PromiseLike<T>) => void,\n      reject: (reason?: any) => void,\n      onCancel: OnCancelFunction,\n    ) => void,\n    timeout?: number,\n  ) {\n    this._cancelPromise = new Promise<any>((resolve_, reject_) => {\n      this._setCanceledCallback = (er) => resolve_(er || new CancelError());\n    });\n    const promises = [\n      this._cancelPromise,\n      new Promise<T>((resolve, reject) => {\n        const onResolve = (value?: T | PromiseLike<T>) => {\n          if (value instanceof CancelablePromise) {\n            this.attach(value);\n          } else {\n            this._isPending = false;\n          }\n          // TODO: fix types, `undefined` not allowed since 19.12.2020\n          resolve(value as T | PromiseLike<T>);\n        };\n\n        const onReject = (error: any) => {\n          this._isPending = false;\n          reject(error);\n        };\n\n        const onCancel: OnCancelFunction = (handler) => {\n          if (!this._isPending) {\n            throw new Error(\n              'The `onCancel` handler was attached after the promise settled.',\n            );\n          }\n\n          this._cancelHandlers.push(handler);\n        };\n\n        return executor(onResolve, onReject, onCancel);\n      }),\n    ];\n    if (timeout) {\n      promises.push(\n        new Promise((resolve, reject) => {\n          setTimeout(() => {\n            if (this._isPending) {\n              try {\n                this.cancel();\n              } finally {\n                reject(new TimeoutError());\n              }\n            }\n          }, timeout);\n        }),\n      );\n    }\n    this._promise = Promise.race(promises);\n  }\n\n  static createControl(opt?: PromiseControlOptions): PromiseControl {\n    return new PromiseControl(opt);\n  }\n\n  static resolve<T>(value: T | PromiseLike<T>): CancelablePromise<T> {\n    return new CancelablePromise((resolve) => resolve(value));\n  }\n\n  static reject<T>(value: T | PromiseLike<T>): CancelablePromise<T> {\n    return new CancelablePromise((resolve, reject) => reject(value));\n  }\n\n  static all<T>(values: (T | PromiseLike<T>)[]): CancelablePromise<T[]> {\n    return new CancelablePromise((resolve, reject) => {\n      Promise.all(values).then(resolve).catch(reject);\n    });\n  }\n\n  attach(p: CancelablePromise): void {\n    if (this._isCanceled) {\n      p.cancel();\n    } else {\n      this._children.push(p);\n    }\n  }\n\n  then<TResult1 = T, TResult2 = never>(\n    onfulfilled?:\n      | ((value: T) => TResult1 | PromiseLike<TResult1>)\n      | undefined\n      | null,\n    onrejected?:\n      | ((reason: any) => TResult2 | PromiseLike<TResult2>)\n      | undefined\n      | null,\n  ): CancelablePromise<TResult1 | TResult2> {\n    const p = new CancelablePromise((resolve, reject) => {\n      if (this._promise) {\n        const reject_ = (r: any) => {\n          if (onrejected) {\n            handleCallback(resolve, reject, onrejected, r);\n          } else {\n            reject(r);\n          }\n        };\n        this._promise.then((r) => {\n          if (this._isCanceled) {\n            reject_(r);\n          } else {\n            if (onfulfilled) {\n              handleCallback(resolve, reject, onfulfilled, r);\n            } else {\n              resolve(r);\n            }\n          }\n        }, reject_);\n      }\n    });\n    p._parentPromise = this;\n    this._children.push(p);\n    return p as CancelablePromise<TResult1 | TResult2>;\n  }\n\n  catch<TResult = never>(\n    onrejected?:\n      | ((reason: Error) => TResult | PromiseLike<TResult>)\n      | undefined\n      | null,\n  ): CancelablePromise<T | TResult> {\n    if (this._isCanceled && onrejected) {\n      onrejected(new CancelError());\n    }\n    return this.then(undefined, onrejected);\n  }\n\n  finally(onfinally?: (() => void) | undefined | null): Promise<T> {\n    if (this._promise) {\n      return this._promise.finally(onfinally);\n    }\n    if (this._isCanceled) {\n      return Promise.reject(new CancelError());\n    }\n    return Promise.reject<T>(onfinally);\n  }\n\n  cancel(): this {\n    if (this._isCanceled) {\n      return this;\n    }\n    this._isCanceled = true;\n    const parent = this._getTopParent();\n    if (parent) {\n      parent.cancel();\n    }\n\n    if (this._children) {\n      this._children.forEach((x) => x.cancel());\n    }\n\n    if (this._isPending) {\n      if (this._cancelHandlers.length) {\n        try {\n          for (const handler of this._cancelHandlers) {\n            handler();\n          }\n        } catch (error) {\n          // this._setCanceledCallback(error);\n        }\n      }\n      if (this._setCanceledCallback) {\n        this._setCanceledCallback();\n      }\n    }\n    this._destroy();\n\n    return this;\n  }\n\n  private _getTopParent() {\n    let parent = this._parentPromise;\n    let hasParent = !!parent;\n    while (hasParent) {\n      if (parent && parent._parentPromise) {\n        parent = parent._parentPromise;\n        hasParent = !!parent;\n      } else {\n        hasParent = false;\n      }\n    }\n    return parent;\n  }\n\n  private _destroy() {\n    this._setCanceledCallback = undefined;\n    this._cancelPromise = undefined;\n    this._promise = undefined;\n  }\n}\n\nObject.setPrototypeOf(CancelablePromise.prototype, Promise.prototype);\n","/**\n * A promise you can stop\n *\n * @packageDocumentation\n */\nimport { CancelablePromise } from './CancelablePromise';\n\nexport default CancelablePromise;\n"],"sourceRoot":""}