{"version":3,"sources":["webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/utils/createPopupContent.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/utils/getLayerFilterOptions.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/utils/resourceIdFromLayerOptions.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/utils/fetchNgwLayerItem.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/utils/fetchNgwLayerFeature.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/utils/featureLayerUtils.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/utils/fetchNgwLayerItems.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/utils/fetchNgwLayerFeatureCollection.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/utils/fetchNgwLayerFeatures.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/utils/fetchNgwExtent.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/adapters/createGeoJsonAdapter.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/utils/getLayerAdapterOptions.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/adapters/createRasterAdapter.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/NgwWebmapItem.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/utils/utils.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/adapters/createOnFirstShowNgwAdapter.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/BookmarkItem.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/NgwWebmapLayerAdapter.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/adapters/createNgwWebmapAdapter.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/NgwResource.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/adapters/createBasemapLayerAdapter.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/adapters/createAsyncAdapter.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/NgwKit.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/IdentifyItem.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/utils/identifyUtils.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/utils/getCompanyLogo.ts","webpack://clear_horizon/./@nextgis/packages/ngw-map/src/utils/appendNgwResources.ts","webpack://clear_horizon/./@nextgis/packages/ngw-map/src/utils/prepareWebMapOptions.ts","webpack://clear_horizon/./@nextgis/packages/ngw-map/src/NgwMap.ts"],"names":["createPopupContent","feature","item","element","document","createElement","feature_layer","fields","forEach","x","grid_visibility","value","properties","keyname","propElem","appendChild","innerHTML","display_name","p","filterOptionsKeys","getLayerFilterOptions","options","filterOptions","opt","undefined","resourceIdFromLayerOptions","connector","resource","resourceId","id","getResource","resourceItem","fetchNgwLayerItem","params","FEATURE_REQUEST_PARAMS","updateItemRequestParam","get","fid","featureId","then","resp","toGeojson","geom","CancelablePromise","createGeoJsonFeature","extensions","onlyGeomItem","fetchNgwLayerFeature","srs","geom_format","geometry","type","join","Array","isArray","defined","idFilterWorkAround","filterById","featureIds","split","map","Number","Error","promises","createFeatureFieldFilterQueries","_queries","_parentAllParams","filters","logic","filters_","filter","createParam","pf","field","operation","f","push","checkIfPropertyFilter","fetchNgwLayerItemsRequest","paramList","find","propertiesFilterList","length","itemsParts","items","reduce","a","b","concat","offset","limit","splice","intersects","orderBy","order_by","fetchNgwLayerItems","data","y","propertiesFilter","fetchNgwLayerFeatureCollection","features","fetchNgwLayerFeatures","getNgwWebmapExtent","webmap","bottom","left","top","right","extent","fetchNgwLayerExtent","maxLat","maxLon","minLat","minLon","fetchNgwResourceExtent","cls","indexOf","parent","res","createGeoJsonAdapter","webMap","addLayerOptionsPriority","layerOptions","GeoJsonAdapter","Adapter","mapAdapter","layerAdapters","GEOJSON","_fullDataLoad","adapterOptions","popupOptions","fromProperties","geoJsonAdapterCb","abort","_lastFilterArgs","_dataPromise","removed","cancel","NgwGeoJsonAdapter","EventEmitter","opt_","needUpdate","waitFullLoad","vector_layer","vectorLayerGeomToPaintTypeAlias","geometry_type","Object","keys","layer","this","strategy","updatePromise","updateLayer","_addBboxEventListener","hasData","getLayers","_removeMoveEventListener","_removeBboxEventListener","__disableMapMoveListener","__enableMapMoveListener","__onMapMove","__onMapMoveStart","_count","total_count","filterArgs","onLoad","_getMapBbox","setLayerData","emitter","emit","name","e","setData","clearLayer","_addMoveEventListener","on","debounce","removeListener","bounds","getBounds","s","w","n","polygon","lng","lat","degrees2meters","getLayerAdapterOptions","baseUrl","url","adapter","getLayerAdapters","isImageAllowed","IMAGE","nd","tileNoData","headers","updateWmsParams","updateImageParams","format","version","layers","simplification","console","log","createRasterAdapter","resourceCls","clsAdapterAlias","wmsserver_service","tmsclient_layer","adapterClass","_options","layerAdapterOptions","setViewDelay","String","addOptions","NgwWebmapItem","noInit","tree","setParent","item_type","_rootDescendantsCount","_sumUp","children","root","getRoot","initProperties","_init","i","getItemOptions","setNewLayer","l","_layer","set","opacity","setLayerOpacity","getChildren","addChild","Promise","resolve","layer_adapter","toUpperCase","GetAdapterFromLayerType","getAdapter","addLayer","newLayer","reject","transparency","layer_transparency","visibility","crossOrigin","order","subOrder","drawOrderEnabled","draw_order_position","subLevel","padStart","maxZoom","layer_max_scale_denom","_mapScaleToZoomLevel","minZoom","layer_min_scale_denom","objectAssign","ratio","minScale","maxScale","reverse","scale","centerLat","getZoomFromScale","pixelsInMeterWidth","getMapWidthForLanInMeters","setScaleRatio","initItem","totalValue","child","ngwWebmapItem","Item","idPrefix","OnFirstShowAdapter","_removed","removeLayer","showLayer","createAsyncAdapter","resource_id","baselayer","assign","hideLayer","getProperty","treeSome","layer_enabled","onSet","BookmarkItem","labelField","_extent","lonLat","NgwWebmapLayerAdapter","r","_getWebMapLayerItem","getDependLayers","response","_webmapLayersIds","property","getDescendants","bookmark_resource","bookmarkResId","getBookmarksResourceId","getResourceOrFail","label_field","bookmarks","bookmark","visibleLayers","ids","_getWebMapIds","sort","parentId","visible","isBlocked","getWebMapConfig","root_item","auth","getAuthorizationHeaders","draw_order_enabled","webmapClassName","basemap_webmap","basemaps","_setBasemaps","defaultBasemap","addBaseLayer","extent_left","extent_bottom","extent_right","extent_top","_updateItemsParams","baseWebmap","enabledAlreadySet","createOnFirstShowNgwAdapter","enabled","fixUrlStr","layer_style_id","webMapItem","promise","all","createWebMapAdapter","NWLayerAdapter","NgwResource","createBasemapLayerAdapter","basemap_layer","qms","qms_","JSON","parse","QmsKit","TileAdapter","TILE","BasemapTileAdapter","classAdapters","supportCls","createAdapterFromFirstStyle","childrenStyles","firstStyle","adapterType","itemFromResOpt","parentItem","parentOptions","getClassAdapter","classAdapter","resourceAdapter","prototype","applyMixins","replace","bbox","width","height","size","timestamp","Date","now","_pixelsInMeter","POINT","LINESTRING","POLYGON","MULTIPOINT","MULTILINESTRING","MULTIPOLYGON","POINTZ","LINESTRINGZ","POLYGONZ","MULTIPOINTZ","MULTILINESTRINGZ","MULTIPOLYGONZ","addNgwLayer","extendNgwWebmapLayerAdapter","div","style","cssText","body","px","offsetWidth","removeChild","Math","PI","cos","LN2","NgwKit","NgwConnector","resourceIds","fit","pixelRadius","_getLayerAdapter","createAdapter","_createAdapter","IdentifyItem","label","layerId","_item","_resource","_geojson","identify","geojson","getIdentifyItems","multiple","resources","paramsList","isNaN","sortingArr","fry","identifyItem","layerFeatures","fetchIdentifyGeoJson","withGeom","fetchIdentifyItem","requestOptions","sendIdentifyRequest","ev","deprecatedMapClick","lngLat","coordinates","getCirclePolygonCoordinates","radius","post","createIdentifyItem","getCompanyLogo","component","settings","company_logo","anchor","position","padding","className","cssClass","img","Image","maxHeight","maxWidth","src","responseType","urlCreator","window","URL","webkitURL","imageUrl","createObjectURL","link","trim","href","target","search","alt","appendNgwResources","defOptions","overwriteOptions","OPTIONS","whitlabel","controls","controlsOptions","ZOOM","ATTRIBUTION","customAttribution","NgwMap","kits","starterKits","deepmerge","center","maxBounds","create","prepareWebMapOptions","select","_createWebMap","container","getContainer","classList","add","_whiteLabel","controlDef","onMapLoad","deprecatedWarn","getLayerId","_ngwLayers","getActiveBaseLayer","resId","isObject","error","zoom","setCenter","setZoom","fitBounds","_addPromise","mem","getIdentificationIds","some","dependLayers","dependFit","layerDef","ngwLayer","getExtent","fitLayer","event","getLayer","$$selectFromNgwRaster","listenerCount","_selectFromNgwRaster","$$selectFromNgwVector","_selectFromNgwVector","cancelPromises","args","_promises","group","groupName","removeFromGroup","index","catch","_initMapState","qmsId","addQmsBaseLayer","osm","addOsmBaseLayer","layerFitAllowed","_isFitFromResource","webmapId","_emitStatusEvent","enableSelection","qmsLayerName","qmsLayerOptions","featureCount","_prepareToIdentify","sourceType","values","identFunc","selectable","isLayerVisible","call","getIdsPromise","getIds","getCenter","getZoom","metresPerPixel","abs","pow","selectPromise","companyLogoOptions","logo","WebMap","getIcon"],"mappings":"2rBAGO,SAASA,EACdC,EACAC,GAGE,IAAMC,EAAUC,SAASC,cAAc,OACvC,GAAIH,GAAQA,EAAKI,cACfJ,EAAKI,cAAcC,OAAOC,SAAQ,SAACC,GACjC,GAAIA,EAAEC,gBAAiB,CACrB,IAAMC,EAAQV,EAAQW,YAAcX,EAAQW,WAAWH,EAAEI,SACzD,GAAIF,EAAO,CACT,IAAMG,EAAWV,SAASC,cAAc,OACxCF,EAAQY,YAAYD,GACpBA,EAASE,UAAT,gBAA8BP,EAAEQ,aAAhC,oBAAwDN,EAAxD,2BAID,GAAIV,EAAQW,WACjB,IAAK,IAAMM,KAAKjB,EAAQW,WAAY,CAClC,IAAME,EAAWV,SAASC,cAAc,OACxCF,EAAQY,YAAYD,GACpBA,EAASE,UAAT,gBAA8BE,EAA9B,oBAA2CjB,EAAQW,WAAWM,GAA9D,iBAGJ,OAAOf,ECzBX,IAAMgB,EAA6C,CACjD,SACA,aACA,QACA,UACA,YAGK,SAASC,EACdC,GAEA,IAAMC,EAAqC,GAO3C,OANAH,EAAkBX,SAAQ,SAACC,GACzB,IAAMc,EAAMF,EAAQZ,QACRe,IAARD,IACFD,EAAcb,GAAKc,MAGhBD,E,4TCZF,SAAeG,EAAtB,oC,iDAAO,WACLJ,EACAK,GAFK,iGAICC,EAAYN,EAAoCM,SAChDzB,EAAOyB,EAGTd,EAAWQ,EAAoCR,QAE/Ce,EAAcP,EAAsCO,YAEpDD,EAZC,oBAaqB,iBAAbA,EAbR,gBAcDd,EAAUc,EAdT,0BAe4B,iBAAbA,EAff,iBAgBDC,EAAaD,EAhBZ,4BAkBDzB,EAAKyB,eACaH,IAAlBtB,EAAKyB,YACL,YAAazB,GApBZ,iBAsBD0B,EAAcD,EAA0BA,SAASE,GAtBhD,yCAyBkBJ,EACjBE,EACAD,GA3BD,QAyBDE,EAzBC,kBA+BAA,IAAcf,EA/Bd,kCAgCwBa,EAAUI,YAAYjB,GAhC9C,SAgCGkB,EAhCH,UAkCDH,EAAaG,EAAaJ,SAASE,IAlClC,iCAqCED,GArCF,6C,kwBCQA,SAASI,EAIdX,GAEA,IAAMY,EAAyD,EAAH,GACvDC,GAGL,OADAC,EAAuBF,EAAQZ,GACxBA,EAAQK,UACZU,IAAI,6BAA8B,KAD9B,GAEHP,GAAIR,EAAQO,WACZS,IAAKhB,EAAQiB,WACVL,IAEJM,MAAK,SAACC,GACL,cACKA,GADL,IAEEC,UAAW,WACT,OAAID,EAAKE,KACAC,YAA0BC,EAA2BJ,IAErDR,EAAkB,EAAD,KACnBX,GADmB,IAEtBqB,MAAM,EACNnC,OAAQ,KACRsC,WAAY,QACXN,MAAK,SAACO,GACP,IAAMJ,EAAOI,EAAaJ,KAC1B,OAAOE,EAAoB,OAAYJ,GAAZ,IAAkBE,mBCrCpD,SAASK,EAId1B,GAMA,OAAOW,EAAwBX,GAASkB,MAAK,SAACrC,GAC5C,OAAO0C,EAA2B1C,M,29DCS/B,IAAMgC,EAA+C,CAC1Dc,IAAK,KACLC,YAAa,WAGR,SAASL,EAGd1C,GACA,IAAMgD,EAAWhD,EAAKwC,KAOtB,MAN+B,CAC7Bb,GAAI3B,EAAK2B,GACTsB,KAAM,UACNvC,WAAYV,EAAKK,OACjB2C,YAkEG,SAASf,EACdF,EACAZ,GAEA,IAAQwB,EAAkCxB,EAAlCwB,WAAYH,EAAsBrB,EAAtBqB,KAAMnC,EAAgBc,EAAhBd,OAAQyC,EAAQ3B,EAAR2B,IAClCf,EAAOY,WAAaA,EAAaA,EAAWO,KAAK,KAAO,QACzC5B,IAAXjB,IACF0B,EAAO1B,OAAS8C,MAAMC,QAAQ/C,GAAUA,EAAO6C,KAAK,KAAO,SAEhD5B,IAATkB,IACFT,EAAOS,KAAOA,EAAO,MAAQ,KACxBA,WACIT,EAAOe,WACPf,EAAOgB,eAGdM,QAAQP,KACVf,EAAOe,IAAMA,GAIV,SAASQ,EAGdnC,GAKA,IAAMV,EAAQU,EAAQoC,WAAW,GAC3BC,EACa,iBAAV/C,EACH,CAACA,GACDA,EAAMgD,MAAM,KAAKC,KAAI,SAACnD,GAAD,OAAeoD,OAAOpD,MACjD,GAA8B,OAA1BY,EAAQoC,WAAW,IAAyC,OAA1BpC,EAAQoC,WAAW,GACvD,MAAM,IAAIK,MACR,+DAGJ,IAAMC,EAAyCL,EAAWE,KAAI,SAACtB,GAC7D,OAAON,EAAwB,CAC7BN,UAAWL,EAAQK,UACnBE,WAAYP,EAAQO,WACpBU,iBAGJ,OAAOK,QAAsBoB,GAKxB,SAASC,EAIdzC,GAGwC,IAFxC0C,EAEwC,uDAFa,GACrDC,EACwC,uDADJ,GAE5BC,EAAmC5C,EAAnC4C,QAASzC,EAA0BH,EAA1BG,UAAWE,EAAeL,EAAfK,WAEtBwC,EAA8B,iBAAfD,EAAQ,GAAkBA,EAAQ,GAAK,MAEtDE,EAAWF,EAAQG,QAAO,SAAC7D,GAAD,OAAO4C,MAAMC,QAAQ7C,MAE/C8D,EAAc,SAACC,GACnB,QAAkCA,EAAlC,GAAOC,EAAP,KAAcC,EAAd,KAAyB/D,EAAzB,KACA,MAAO,CAAC,OAAD,OAAQ8D,EAAR,aAAkBC,GAAa/D,IAGxC,GAAc,QAAVyD,EACFC,EAAS7D,SAAQ,SAACmE,GACH,OAATA,EAAE,IACJV,EAASW,KACPpB,EAAmB,CAAEC,WAAYkB,EAAGjD,YAAWE,iBAG/CiD,QAAsBF,GACxBV,EAASW,KACPE,EAAyB,OACpBvD,GADoB,IAEvBwD,UAAW,GAAF,SAAMb,GAAN,CAAwBK,EAAYI,SAIjDX,EAAgC,OAEzBzC,GAFwB,IAG3B4C,QAASQ,IAEXV,EAL6B,EAMzBC,YAIL,GAAc,QAAVE,EAAiB,CAC1B,IAAMX,EAAaY,EAASW,MAAK,SAACvE,GAAD,MAAgB,OAATA,EAAE,MAC1C,GAAIgD,EACFQ,EAASW,KAAKpB,EAAmB,CAAEC,aAAY/B,YAAWE,oBACrD,CACL,IAAMuC,EAA2B,GAC3Bc,EAA2C,GACjDZ,EAAS7D,SAAQ,SAACmE,IACZE,QAAsBF,GACxBR,EAAQS,KAAKL,EAAYI,IAEzBM,EAAqBL,KAAKD,MAI1BM,EAAqBC,OACvBD,EAAqBzE,SAAQ,SAACC,GAC5BuD,EAAgC,OAEzBzC,GAFwB,IAG3B4C,QAAS1D,IAEXwD,EAL6B,YAMzBC,GAAqBC,OAI7BF,EAASW,KACPE,EAAyB,OACpBvD,GADoB,IAEvBwD,UAAW,GAAF,SAAMb,GAAqBC,QAO9C,OAAOxB,QAAsBsB,GAAU1B,MAAK,SAAC4C,GAC3C,IAAMC,EAAQD,EAAWE,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,OAAOD,KAAI,IACjDE,OAAwBjE,IAAfD,EAAIkE,OAAuBlE,EAAIkE,OAAS,EACjDC,OAAsBlE,IAAdD,EAAImE,MAAsBnE,EAAImE,MAAQN,EAAMF,OAC1D,OAAI3D,EAAIkE,QAAUlE,EAAImE,MACbN,EAAMO,OAAOF,EAAQC,GAEvBN,KAIJ,SAASN,EAIdzD,GAGA,IAAMY,EAA6D,KAC9DC,GAGHR,EAOEL,EAPFK,UACAgE,EAMErE,EANFqE,MACAD,EAKEpE,EALFoE,OACAG,EAIEvE,EAJFuE,WACAC,EAGExE,EAHFwE,QACAjE,EAEEP,EAFFO,WACAmD,EACE1D,EADF0D,UAsBF,OApBIW,IACFzD,EAAOyD,MAAQA,GAEbD,IACFxD,EAAOwD,OAASA,GAGlBtD,EAAuBF,EAAQZ,GAE3BwE,IACF5D,EAAO6D,SAAWD,EAAQzC,KAAK,MAE7BwC,IACF3D,EAAO2D,WAAaA,GAGlBb,IACF9C,EAAO8C,UAAYA,GAGdrD,EAAUU,IAAI,mCAAoC,KAAlD,GACLP,GAAID,GACDK,I,urBC3RA,SAAS8D,EAGd1E,GACA,IAAM8C,EAAU9C,EAAQ8C,QACxB,OAAIA,EACKH,EAAgC,OAClC3C,GADiC,IAEpC8C,aAGKW,EAAgCzD,GAASkB,MAAK,SAACyD,GACpD,OAAI7B,EAEK6B,EAAK1B,QAAO,SAAC2B,GAClB,IAAM1F,EAAS0F,EAAE1F,OACbA,IACF2F,QAAiB3F,EAAQ4D,MAIxB6B,KCtBN,SAASG,EAId9E,GAMA,OCXK,SAGLA,GACA,OAAO0E,EAAmB1E,GAASkB,MAAK,SAAC9B,GACvC,IAAM2F,EAAiC,GAKvC,OAJA3F,EAAED,SAAQ,SAACyF,GACTG,EAASxB,KAAKhC,EAAqBqD,OAG9BG,KDCFC,CAA4BhF,GAASkB,MAAK,SAAC6D,GAKhD,MAJmD,CACjDjD,KAAM,oBACNiD,e,4TEhBC,SAASE,EACdC,GAEA,IAAMC,EAASD,EAAM,cACfE,EAAOF,EAAM,YACbG,EAAMH,EAAM,WACZI,EAAQJ,EAAM,aACpB,GAAIC,GAAUC,GAAQC,GAAOC,EAAO,CAClC,IAAMC,EAA4B,CAACH,EAAMD,EAAQG,EAAOD,GAOxD,OANIE,EAAO,GAAK,KACdA,EAAO,GAAK,IAEVA,EAAO,IAAM,KACfA,EAAO,IAAM,IAERA,GAIJ,SAASC,EACdhF,EACAH,GAEA,OAAOA,EAAUU,IAAI,eAAgB,KAAM,CAAEP,OAAMU,MAAK,SAACC,GACvD,GAAIA,EAAM,CACR,MAA2CA,EAAKoE,OAAxCE,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAAQC,EAAxB,EAAwBA,OAExB,MADuC,CADvC,EAAgCC,OACgBD,EAAQD,EAAQD,OAM/D,SAAeI,EAAtB,oC,iDAAO,WACLhH,EACAwB,GAFK,0FAIDxB,EAAKqG,OAJJ,yCAKID,EAAmBpG,EAAKqG,SAL5B,YAOG5E,EAAWzB,EAAKyB,UACTwF,MAA0C,IAAnCxF,EAASwF,IAAIC,QAAQ,SARtC,yCASM1F,EAAUI,YAAYH,EAAS0F,OAAOxF,IAAIU,MAAK,SAAC+E,GACrD,GAAIA,EACF,OAAOT,EAAoBS,EAAI3F,SAASE,GAAIH,OAX/C,gCAeMmF,EAAoBlF,EAASE,GAAIH,IAfvC,6C,q0HCdA,SAAe6F,GAAtB,mC,oDAAO,WACLhG,GADK,uHAGGiG,EAA4BjG,EAA5BiG,OAAQ9F,EAAoBH,EAApBG,UAAWxB,EAASqB,EAATrB,KACrBuH,OAC4BjG,IAAhCD,EAAIkG,yBACAlG,EAAIkG,wBAEJpG,EAAUE,EAAImG,aACdC,EACHpG,EAAIqG,SACJJ,EAAOK,WAAWC,cAAcC,QAG7BC,GAAgB,EAdjB,SAiBoBvG,EAA2BJ,EAASK,GAjBxD,cAiBCE,EAjBD,OAoBHP,EAAQ4G,gBACR5G,EAAQ4G,eAAeC,cACvB7G,EAAQ4G,eAAeC,aAAaC,iBAEpC9G,EAAQ4G,eAAeC,aAAalI,mBAAqB,YAAiB,IAAdC,EAAc,EAAdA,QAC1D,OAAOA,GAAWD,EAAmBC,EAASC,KAI5CkI,EA7BD,6CA6BoB,WACvBjE,EACA5C,GAFuB,uFAIvB8G,IACAC,EAAkB,CAAEnE,UAAS9C,QAASE,GACtCgH,EAAepC,EAA+B,OAC5CvE,aACAuC,UACAzC,aACGH,GAJwC,IAM3CmE,WAAsBlE,KAAfD,aAAA,EAAAA,EAAKmE,OAAsBnE,EAAImE,MAAQ,OAZzB,SAcV6C,EAdU,mFA7BpB,wDA6CDC,GAAU,EACRH,EAAQ,WACRE,IACFA,EAAaE,SACbF,OAAe/G,IAIbkH,EArDD,oMAsDO,IAAIC,gBAtDX,uPA6DH,WAAeC,GAAf,+FACMC,GAAcD,EAAK5C,KACjB8C,OACkBtH,IAAtBoH,EAAKE,cAA6BF,EAAKE,kBACtBtH,IAAfH,EAAQQ,KACV+G,EAAK/G,GAAKR,EAAQQ,IAEhB3B,GAAQA,EAAK6I,eACfH,EAAKzF,KACH6F,GAAgC9I,EAAK6I,aAAaE,gBAElD5H,EAAQ4G,iBAKRW,EADEnB,EACK,SACFpG,EAAQ4G,gBACRW,GAGE,SACFA,GACAvH,EAAQ4G,iBAIbW,EAAK5C,MAA0C,IAAlCkD,OAAOC,KAAKP,EAAK5C,MAAMd,SACtC0D,EAAK5C,UAAOxE,EACZqH,GAAa,GAETO,EA/BR,6CA+B+BR,GAC7BS,KAAKhI,QAAQiI,SAAWV,EAAKU,eAAY9H,EAEzC8G,EAAkB,CAChBnE,QAASyE,EAAK1C,iBACd7E,QAASD,EAAsBwH,IAG7BC,IACFU,EAAgBF,KAAKG,gBAEnBV,IAAgBS,EA1CtB,kCA2CUA,EA3CV,cA6CgC,SAA1BF,KAAKhI,QAAQiI,UACfD,KAAKI,wBA9CT,kBAgDSL,GAhDT,iDA7DG,qEAgHH,WACE,IAAMM,EAAUL,KAAKM,WAAaN,KAAKM,YAAYzE,OACnD,MAA8B,SAA1BmE,KAAKhI,QAAQiI,UAAuBI,EAC/BxC,EAAuBhH,EAAMwB,GAEpC,oCACE,oDADF,IArHD,0BA2HH,WACE8G,GAAU,EACVa,KAAKO,2BACLP,KAAKQ,2BACLR,KAAKS,8BAA2BtI,EAChC6H,KAAKU,6BAA0BvI,EAC/B6H,KAAKW,iBAAcxI,EACnB6H,KAAKY,sBAAmBzI,EACxB6G,MAnIC,sBAsIH,WAAW,WACT,YAAoB7G,IAAhB6H,KAAKa,OACAb,KAAKa,OAEPxI,EACJU,IAAI,8BAA+B,KAAM,CACxCP,GAAID,IAELW,MAAK,SAACC,GACDA,IACF,EAAK0H,OAAS1H,EAAK2H,kBAhJxB,wDAqJH,WAAkBC,GAAlB,yFACEA,EAAaA,GAAc9B,GAAmB,GAChB,SAA1Be,KAAKhI,QAAQiI,SAFnB,gCAGU9B,EAAO6C,OAAO,UAHxB,OAIID,EAAW/I,QAAU+I,EAAW/I,SAAW,GAC3C+I,EAAW/I,QAAQuE,WAAayD,KAAKiB,cALzC,WAOM9B,EAPN,2EAWuBJ,EACjBgC,EAAWjG,QACXiG,EAAW/I,SAbjB,eAWU2E,EAXV,iBAeUwB,EAAO+C,aAAalB,KAAMrD,GAfpC,QAgBIqD,KAAKmB,QAAQC,KAAK,WAhBtB,qDAkBoB,gBAAZ,KAAGC,KAlBX,oCAsBE,uCACE,iDAvBJ,0DArJG,2GAgLH,WAAuBvG,EAA2B5C,GAAlD,yFACE8G,KACIgB,KAAK/E,SAAU0D,EAFrB,gBAGIqB,KAAK/E,QAAO,SAACqG,GACX,OAAIA,EAAE1K,UAAW0K,EAAE1K,QAAQW,aAClBsF,QAAiByE,EAAE1K,QAAQW,WAAYuD,MALtD,2BASakF,KAAKuB,QATlB,wBAUQvB,KAAKwB,YACPxB,KAAKwB,aAXX,SAauBzC,EAAiBjE,EAAS5C,GAbjD,OAaUyE,EAbV,OAcIqD,KAAKuB,QAAQ5E,GAdjB,iDAhLG,0EAkMH,WACEsC,OAAkB9G,EAClB6H,KAAKnD,iBAAiB,IAClBmD,KAAK/E,QACP+E,KAAK/E,QAAO,WACV,OAAO,OAvMV,mCA4MH,WAAwB,WACtB+E,KAAKU,wBAA0B,SAACY,GAC1BA,IAAM,IACR,EAAKf,2BACL,EAAKJ,cACL,EAAKsB,0BAGTzB,KAAKS,yBAA2B,SAACa,GAC3BA,IAAM,GACR,EAAKf,4BAGTpC,EAAOgD,QAAQO,GAAG,aAAc1B,KAAKU,yBACrCvC,EAAOgD,QAAQO,GAAG,aAAc1B,KAAKS,0BACrCT,KAAKU,wBAAwBV,QA3N5B,sCA8NH,WACMA,KAAKU,yBACPvC,EAAOgD,QAAQO,GAAG,aAAc1B,KAAKU,yBAEnCV,KAAKS,0BACPtC,EAAOgD,QAAQO,GAAG,aAAc1B,KAAKS,4BAnOtC,mCAuOH,WAAwB,WACtBT,KAAKW,aAAcgB,SAAS,kBAAM,EAAKxB,iBACvCH,KAAKY,iBAAmB5B,EACxBb,EAAOgD,QAAQO,GAAG,YAAa1B,KAAKY,kBACpCzC,EAAOgD,QAAQO,GAAG,UAAW1B,KAAKW,eA3OjC,sCA8OH,WACMX,KAAKW,aACPxC,EAAOgD,QAAQS,eAAe,UAAW5B,KAAKW,aAE5CX,KAAKY,kBACPzC,EAAOgD,QAAQS,eAAe,YAAa5B,KAAKY,oBAnPjD,yBAuPH,WACE,IAAMiB,EAAS1D,EAAO2D,YACtB,GAAID,EAAQ,CACV,QAAqBA,EAArB,GAAOE,EAAP,KAAUC,EAAV,KAAaC,EAAb,KAAgBX,EAAhB,KACMY,EAAU,CACd,CAACH,EAAGC,GACJ,CAACC,EAAGD,GACJ,CAACC,EAAGX,GACJ,CAACS,EAAGT,GACJ,CAACS,EAAGC,IACJzH,KAAI,YAAgB,aAAd4H,EAAc,KAATC,EAAS,KACpB,KAAeC,QAAeF,EAAKC,GAAnC,GACA,OADA,KACW,IADX,QAGF,yBAAmBF,EAAQnI,KAAK,MAAhC,WArQD,GAqD2BuE,GArD3B,kBA0QEe,GA1QF,6C,qlBCdA,SAASiD,GACdtK,EACAmG,EACAoE,GAEA,IACIC,EADAC,EAAUzK,EAAQyK,SAAW,QAE3BhE,EAAgBN,EAAOuE,mBACvBC,GAAiBlE,GAAgBA,EAAcmE,MAE/CrK,EAAaP,EAAQM,SACrBuK,EAAiB7K,EAAQ8K,WAAa9K,EAAQ8K,WAAa,IAEjE,GAA0B,iBAAfvK,EAAyB,CAClC,GAAgB,UAAZkK,EAAqB,CACvB,GAAIE,EAEF,MAAO,CACLH,IAFFA,EAAMD,EAAU,8BAGdhK,aACAwK,QAAS/K,EAAQ+K,QACjBnK,OAAQ,CAAEN,SAAUC,EAAYsK,GAAIA,GACpCG,gBAAiB,SAACpK,GAAD,OACfqK,G,kWAAkB,EAAEJ,GAAIA,GAAOjK,GAAUL,KAG7CkK,EAAU,OAGd,GAAgB,QAAZA,EAAmB,CACrBD,EAAM,GAAH,OAAMD,EAAN,yBAA8BhK,EAA9B,QACH,IAAMqG,EAAiB5G,EAAQ4G,eAC/B,MAAO,CACL4D,MACAU,OAAQ,YACRC,QAAS,QACTC,OAAQxE,GAAkBA,EAAewE,OACzCL,QAAS/K,EAAQ+K,SAGrB,GAAgB,QAAZN,EASF,MAAO,CACLD,IATFA,EACED,iEAGAhK,EACA,oBACCP,EAAQqL,gBAAkB,IAM/B,GAAgB,YAAZZ,EAGF,MAAO,CAAED,IAFTA,EAAMD,EAAU,iBAAH,OAAoBhK,EAApB,qBAECkK,WAEhB,GAAgB,aAAZA,EAEF,MAAO,CAAED,IADTA,EAAMD,EAAU,2BAAH,OAA8BhK,EAA9B,cAGf,GAAgB,SAAZkK,EAOF,MAAO,CAAED,IANTA,EACED,EACA,yDACAhK,EACA,OACAsK,EACYJ,eAEX,SAAmBtK,IAAfI,EACT,MAAM,IAAIkC,MACR,yCAA2C,GAAOlC,IAGpD+K,QAAQC,IAAI,8B,w4FC1ET,SAAeC,GAAtB,mC,oDAAO,yHACLnF,EADK,EACLA,aACAF,EAFK,EAELA,OACA9F,EAHK,EAGLA,UACAxB,EAJK,EAILA,KAEM4M,EAAc5M,EAAKyB,SAASwF,IAC5B4F,EAAkE,CACtEC,kBAAmB,MACnBC,gBAAiB,cAMHzL,KAJZsK,EACFpE,EAAaoE,SACZgB,GAAeC,EAAgBD,IAChC,WAEApF,EAAaoE,QAAUA,GAET,UAAZA,MACIhE,EAAgBN,EAAOuE,qBACUjE,EAAcmE,QAEnDH,EAAU,WAIRoB,EAAe1F,EAAOK,WAAWC,cACrCgE,IA3BG,kCA8BsBrK,EACvBiG,EACAhG,GAhCC,eA8BGE,EA9BH,2DAuCD,WAAmBgC,EAAUuJ,GAAe,kBAC1C,cAAMvJ,EAAKuJ,IADMvJ,MAAyB,gBAHtB1D,GAGsB,sBAF/B0B,GAIX,IAAML,EAAMoK,GACVjE,EACAF,EACA9F,EAAUL,QAAQuK,SAAW,IAE/B,GAAIrK,EAAK,OACD6L,EAA2C,SAC5C7L,GADyC,IAE5C8L,aAAY,UAAE3F,EAAaO,sBAAf,aAAE,EAA6BoF,aAC3CpL,OAAQ,CAAEN,SAAUC,GAEpB6K,OAAQa,OAAO1L,GACfA,WAAYA,IAGZ8F,EAAaO,iBACb1E,QAAQmE,EAAaO,eAAeoF,gBAEpCD,EAAoBC,aAClB3F,EAAaO,eAAeoF,cAEhC,EAAKhM,QAAL,SAAoB,EAAKA,SAAY+L,GAvBG,SAvC3C,mCA+ED,SAASG,GACP,8DAA2BlE,KAAKhI,SAAYkM,MAhF7C,iEAmFD,sGACQ1L,EAAKwH,KAAKnJ,MAAQmJ,KAAKnJ,KAAKyB,SAAS0F,OAAOxF,KAC9C0B,QAAQ1B,GAFd,yCAGW,CAACA,IAHZ,gDAnFC,kDAkC0BqL,IAlC1B,cA8FG,IAAIpJ,MAAMgI,EAAU,iCA9FvB,6C,4rFCGA,IAAM0B,GAAb,a,mOAAA,U,QAAA,E,IAAA,G,EAAA,E,kZA8DE,WACShG,EACPtH,EACAmB,EACAK,EACA2F,EACAoG,GACA,MASA,G,4FATA,UACA,uBAAWD,EAAcnM,SAAYA,KAP9BmG,SAMP,iGAXiB,IAAImB,gBAWrB,iCATgC,GAW5BjH,IACF,EAAKA,UAAYA,GAEf2F,GACF,EAAKqG,KAAKC,UAAUtG,GAEtB,EAAKnH,KAAOA,EACgB,SAAxB,EAAKA,KAAK0N,UACZ,EAAKC,sBAAwB,EAAKC,OAAO,EAAK5N,KAAK6N,cAC9C,CACL,IAAMC,EAAO,EAAKN,KAAKO,UACnBD,IACF,EAAKH,sBAAwBG,EAAKH,uBAdtC,OAiBA,EAAKK,iBACAT,GACH,EAAKU,MAAMjO,GAnBb,EArEJ,O,EAAA,E,EAAA,uBA+GE,SAASA,GAA4C,IA+B7C4L,EA/B6C,OAC7CsC,EAAIlO,EACJmB,EAAwCgI,KAAKgF,eAAenO,GAC5DoO,EAAc,SAACC,GACnBH,EAAEI,OAASD,EACX,EAAKnF,MAAQmF,EACG,EAAK3N,WAAWwB,IAAI,eAElC,EAAKxB,WAAW6N,IAAI,cAAc,QAGZjN,IAApBH,EAAQqN,SACV,EAAKlH,OAAOmH,gBAAgBJ,EAAGlN,EAAQqN,UAI3C,MAAuB,UAAnBxO,EAAK0N,WAA4C,SAAnB1N,EAAK0N,WACjC1N,EAAK6N,UAAY7N,EAAK6N,SAAS7I,QACjCmE,KAAKuF,YAAY1O,GAAMM,SAAQ,SAACC,GAC9B,IAAMsN,EAAW,IAAIP,EACnB,EAAKhG,OACL/G,EACA,EAAKY,QACL,EAAKK,UACL,GAEF,EAAKgM,KAAKmB,SAASd,MAGhBe,QAAQC,YAGQ,UAAnB7O,EAAK0N,UACP9B,EAAU5L,EAAK4L,SAAW5L,EAAK8O,cAAcC,cACpCzB,EAAc0B,wBAAwBhP,EAAK0N,aAGpD9B,GAAUqD,EADR3B,EAAc0B,wBAAwBhP,EAAK0N,YACxB1N,EAAMmB,EAASgI,KAAK7B,OAAQ6B,KAAK3H,YAGpDoK,EACKzC,KAAK7B,OAAO4H,SAAStD,EAASzK,GAASkB,MAAK,SAAC8M,GAClDf,EAAYe,MAIdnP,EAAKsO,OACAM,QAAQC,QAAQT,EAAYpO,EAAKsO,SAEnCM,QAAQQ,OAAO,qBAhK1B,0BAmKE,cAnKF,iBAuKE,WACMjG,KAAKnJ,KAAK0N,YAxKlB,4BA6KE,SAAyB1N,GACvB,IAAMqP,EAAkC,UAAnBrP,EAAK0N,WAAyB1N,EAAKsP,mBAClDd,EACoB,iBAAjBa,GAA6B,IAAMA,GAAgB,SAAM/N,EAC5DH,EAAwC,CAC5CoO,YAAY,EACZrD,QAAS/C,KAAKhI,QAAQ+K,QACtBsD,YAAarG,KAAKhI,QAAQqO,YAC1BrC,aAAchE,KAAKhI,QAAQgM,aAC3BpL,OAAQ,CAAEN,SAAU0H,KAAKnJ,KAAK0B,aAEhC,GAAIyH,KAAKhI,QAAQsO,MAAO,CACtB,IAAMC,EACJvG,KAAKhI,QAAQwO,kBAAoB,wBAAyB3P,EACtDmJ,KAAKwE,sBAAwB3N,EAAK4P,oBAClCzG,KAAKxH,GAILkO,EAAWzC,OAAOsC,GAAUI,SAAS,EAAG,KAC9C3O,EAAQsO,MAAQ9L,QAA6B,EAArBwF,KAAKhI,QAAQsO,OAAa,IAAMI,GAE1D,GAAuB,UAAnB7P,EAAK0N,UAAuB,CAC9B,IAAMqC,EAAU/P,EAAKgQ,sBACjB7G,KAAK8G,qBAAqBjQ,EAAKgQ,uBAC/B7G,KAAK7B,OAAOnG,QAAQ4O,QAClBG,EAAUlQ,EAAKmQ,sBACjBhH,KAAK8G,qBAAqBjQ,EAAKmQ,uBAC/BhH,KAAK7B,OAAOnG,QAAQ+O,SACxBE,QAAajP,EAAS,CACpBgL,gBAAiBnM,EAAKmM,gBACtBR,IAAK3L,EAAK2L,IACVO,QAAS/C,KAAKhI,QAAQ+K,QACtBmE,MAAOlH,KAAKhI,QAAQkP,MACpBN,UACAG,UACAI,SAAUtQ,EAAKmQ,sBACfI,SAAUvQ,EAAKgQ,wBAMnB,YAHgB1O,IAAZkN,IACFrN,EAAQqN,QAAUA,GAEbrN,IAxNX,yBA2NE,SAAsBnB,GACpB,O,EAAWA,EAAK6N,S,yVAAU2C,U,QA5N9B,kCA+NE,SAA6BC,GAC3B,OC9IG,SAAuBA,GAAgC,IAKtDC,EALsD,uDAAX,EASjD,OADaC,GADVC,KAAuBC,GAA0BH,GAAcD,GDuIzDK,CAAcL,KAhOzB,mBAmOE,SAAczQ,GAA6B,WACzCmJ,KAAK4H,SAAS/Q,GAAMqC,MAAK,WACvB,EAAKiI,QAAQC,KAAK,aArOxB,oBAyOE,SAAesD,GAAwD,MAAhBmD,EAAgB,uDAAH,EAAG,KACjDnD,GADiD,IACrE,2BAA8B,KAAnBoD,EAAmB,QACJ,UAApBA,EAAMvD,WACRsD,GAAc,EACdC,EAAMrB,oBAAsBqB,EAAMrB,qBAAuBoB,GAC5B,UAApBC,EAAMvD,YACfsD,EAAa7H,KAAKyE,OAAOqD,EAAMpD,SAAUmD,KANwB,8BASrE,OAAOA,K,EAlPX,sB,EAAA,yBA4FE,WACE1J,EACAtH,EACAmB,EACAK,EACA2F,GALF,6FAOQ+J,EAAgB,IAAI5D,EACxBhG,EACAtH,EACAmB,EACAK,EACA2F,GACA,GAbJ,SAeQ+J,EAAcjD,MAAMjO,GAf5B,gCAgBSkR,GAhBT,0CA5FF,E,gLAAA,uD,gCAAA,GAAmCC,O,m3CEE5B,yHACL7J,EADK,EACLA,OACA9F,EAFK,EAELA,UACAxB,EAHK,EAGLA,KAHK,IAIL+H,sBAJK,MAIY,GAJZ,MAKLqJ,gBALK,MAKM,gBALN,EAOCC,EAPD,qDAQuB,IARvB,gBASyB,IATzB,oBAUQ,GAVR,mCAYH,WACE,OAAOlI,KAAKD,QAbX,yBAgBH,WACEC,KAAKmI,UAAW,EAChBnI,KAAKD,MAAM5I,SAAQ,SAACC,GAAD,OAAO+G,EAAOiK,YAAYhR,QAlB5C,uBAqBH,WAAY,WACV4I,KAAKhI,QAAQoO,YAAa,EACtBpG,KAAKD,MAAMlE,OACbmE,KAAKD,MAAM5I,SAAQ,SAACC,GAClB+G,EAAOkK,UAAUjR,MAGnBkR,GACE,CACEhQ,SAAUzB,EAAK0R,YACf3J,eAAgB,CACdyC,KAAMxK,EAAKe,aACXyN,QAASxO,EAAKwO,UAGlBlH,EACA9F,GACAa,MAAK,SAACqF,GACN,GAAIA,EAAS,CACX,IAAMkE,EAAU,IAAIlE,EAAQJ,EAAOK,WAAWjE,IAA9B,SACXqE,GADW,IAEd4J,WAAW,KAEb/F,EAAQsD,SAAS,IAAI7M,MAAK,SAACsP,GACzB/F,EAAQzK,QAAQwQ,WAAY,EAC5B3I,OAAO4I,OAAOhG,EAAQzK,QAAS4G,GAC/B6D,EAAQjK,GAAKyP,EAAW,IAAMpR,EAAK0R,YACnC9F,EAAQ1C,MAAQyI,EACZ,EAAKL,UACPhK,EAAOiK,YAAY3F,GAEjB,EAAKzK,QAAQoO,YACfjI,EAAOkK,UAAU5F,GAEnB,EAAK1C,MAAMxE,KAAKkH,YAvDvB,uBA8DH,WACEzC,KAAKhI,QAAQoO,YAAa,EACtBpG,KAAKD,OACPC,KAAKD,MAAM5I,SAAQ,SAACC,GAAD,OAAO+G,EAAOuK,UAAUtR,UAjE5C,uBAqEE8Q,GArEF,4C,yTFFM/D,G,0BAQP,I,GAROA,G,UAUmB,CAC5B5M,WAAY,CACV,CACEuC,KAAM,UACNuH,KAAM,aACNsH,YAHF,SAGc9R,GACV,GAAIA,EAAM,CACR,GAC0B,UAAxBA,EAAKA,KAAK0N,WACc,SAAxB1N,EAAKA,KAAK0N,UAEV,OAAOqE,SACL/R,EAAKA,MACL,SAACkO,GAAD,MAAQ,kBAAmBA,GAAIA,EAAE8D,iBACjC,SAAC9D,GAAD,OAAQA,EAAgBL,YAErB,GAA4B,UAAxB7N,EAAKA,KAAK0N,UACnB,OAAO1N,EAAKA,KAAKgS,cAMrB,OAAO,GAETC,MAvBF,SAwBIxR,EACAU,EACAnB,GAEIA,GAAgC,UAAxBA,EAAKA,KAAK0N,YAChB1N,EAAKkJ,QACHzI,EACFT,EAAKsH,OAAOkK,UAAUxR,EAAKkJ,OAE3BlJ,EAAKsH,OAAOuK,UAAU7R,EAAKkJ,QAG/BlJ,EAAKA,KAAL,cAA6BS,Q,QGhDlC,IAAMyR,GAAb,WAOE,WAAoB/Q,I,4FAA8B,cAA9BA,UAA8B,qGAChDgI,KAAKzH,WAAaP,EAAQO,WAC1B,IAAM1B,EAAOmB,EAAQnB,KACrBmJ,KAAKnJ,KAAOA,EACRmB,EAAQgR,YAAcnS,EAAKK,OAC7B8I,KAAKqB,KAAOxK,EAAKK,OAAOc,EAAQgR,YAEhChJ,KAAKqB,KAAO4C,OAAOpN,EAAK2B,I,QAd9B,O,EAAA,G,EAAA,qBAkBE,WAA+C,WAC7C,OAAIwH,KAAKiJ,QACA3P,YAA0B0G,KAAKiJ,SAEjCjJ,KAAKhI,QAAQK,UACjBU,IAAI,oCAAqC,KAAM,CAC9CP,GAAIwH,KAAKzH,WACTS,IAAKgH,KAAKnJ,KAAK2B,KAEhBU,MAAK,SAACC,GACL,MAA2CA,EAAKoE,OAAxCI,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAAQH,EAAxB,EAAwBA,OAClByL,EAAS,CAACtL,EAAQD,EADxB,EAAgCD,OACQD,GAExC,OADA,EAAKwL,QAAUC,EACRA,OA/Bf,qBAmCE,WAAkD,WAChD,OAAIlJ,KAAKnJ,KAAKwC,KACLC,YAA0BC,EAAqByG,KAAKnJ,OAEpD8B,EAAkB,CACvBJ,WAAYyH,KAAKzH,WACjBU,UAAW+G,KAAKnJ,KAAK2B,GACrBH,UAAW2H,KAAKhI,QAAQK,UACxBgB,MAAM,EACNnC,OAAQ,KACRsC,WAAY,OACXN,MAAK,SAACO,GACP,IAAMJ,EAAOI,EAAaJ,KAE1B,OADA,EAAKxC,KAAKwC,KAAOA,EACVE,EAAqB,EAAK1C,c,kBAjDzC,K,+wCCoBO,IAAMsS,GAAb,WAkBE,WAAmB5O,EAAevC,I,4FAAkC,cAAjDuC,MAAiD,KAAlCvC,UAAkC,gDAf/BmM,IAe+B,sBAXtD,IAWsD,uDATlD,UASkD,kBALhE,IAAI7E,gBAK4D,wFAClE,IAAM8J,EAAIpR,EAAQO,WAQlB,GAPIyB,MAAMC,QAAQmP,IAChBpJ,KAAKzH,WAAa6Q,EAAE,GACpBpJ,KAAKhI,QAAQQ,GAAK4Q,EAAE,IAEpBpJ,KAAKzH,WAAa6Q,GAGfpJ,KAAKzH,WACR,MAAM,IAAIkC,MAAM,mC,QA5BtB,iB,EAAA,G,EAAA,sDAgCE,WAAezC,GAAf,uFACEgI,KAAKhI,QAAL,SAAoBgI,KAAKhI,SAAYA,GADvC,SAEqBgI,KAAKqJ,sBAF1B,cAEErJ,KAAKD,MAFP,yBAGSC,KAAKD,OAHd,gDAhCF,uEAsCE,WACE,IAAMvB,EAAawB,KAAKhI,QAAQmG,OAAOK,WAEvCwB,KAAKsJ,kBAAkBnS,SAAQ,SAACC,GACxB,UAAWA,GAEjBoH,EAAW4J,YAAYhR,EAAE2I,MAAMA,iBAG1BC,KAAKD,aACLC,KAAKuJ,gBACLvJ,KAAKwJ,mBAjDhB,uBAoDE,WACMxJ,KAAKD,OAASC,KAAKD,MAAMxI,YAC3ByI,KAAKD,MAAMxI,WAAWkS,SAAS,cAAcrE,KAAI,KAtDvD,uBA0DE,WACMpF,KAAKD,OAASC,KAAKD,MAAMxI,YAC3ByI,KAAKD,MAAMxI,WAAWkS,SAAS,cAAcrE,KAAI,KA5DvD,uBAgEE,WACE,IAAMlI,EAAS8C,KAAKuJ,UAAYvJ,KAAKuJ,SAASrM,OAC9C,GAAIA,EACF,OAAOD,EAAmBC,KAnEhC,6BAuEE,WACE,OAAQ8C,KAAKD,OAASC,KAAKD,MAAMsE,KAAKqF,kBAAqB,KAxE/D,oCA2EE,WACE,IAAMxM,EAAS8C,KAAKuJ,UAAYvJ,KAAKuJ,SAASrM,OAC9C,GAAIA,EACF,OAAOA,EAAOyM,kBAAkBnR,KA9EtC,4BAkFE,WACE,IAAMoR,EAAgB5J,KAAK6J,yBACrBxR,EAAY2H,KAAKhI,QAAQK,UAC/B,GAAIuR,EACF,OAAOvR,EAAUyR,kBAAkBF,GAAe1Q,MAAK,SAACrC,GAAS,MACzDmS,EAAU,UAAGnS,EAAKI,qBAAR,aAAG,EAAoBC,OAAOyE,MAC5C,SAACvE,GAAD,OAAOA,EAAE2S,eAELvS,EAAUwR,GAAcA,EAAWxR,QACzC,OAAOkF,EAAmB,CACxBrE,YACAE,WAAYqR,EACZvQ,MAAM,EACNnC,OAAQM,EAAU,CAACA,QAAWW,IAC7Be,MAAK,SAAC6C,GACP,IADiB,EACXiO,EAA4B,GADjB,E,65BAAA,CAEDjO,GAFC,IAEjB,2BAAuB,KAAZgJ,EAAY,QACfkF,EAAW,IAAIlB,GAAa,CAChClS,KAAMkO,EACNxM,WAAYqR,EACZZ,WAAYxR,EACZa,cAEF2R,EAAUzO,KAAK0O,IATA,8BAWjB,OAAOD,QAIb,MAAM,IAAIvP,MACR,4EAhHN,iEAoHE,wGACQyP,EAA0B,GAC5BC,EAAMnK,KAAKwJ,iBAFjB,gCAIgBxJ,KAAKoK,gBAJrB,OAIID,EAJJ,OAKInK,KAAKwJ,iBAAmBW,EAL5B,cAOMA,GAAOA,EAAItO,QACFmE,KAAKsJ,kBACJe,MAAK,SAACpO,EAAGC,GAAJ,OAAUA,EAAE1D,GAAKyD,EAAEzD,MAC/BrB,SAAQ,SAACC,GACZ,IAAMP,EAAOO,EAAEP,KACTyT,EAAWzT,EAAKyT,SACtB,QAAiBnS,IAAbmS,GAA6C,UAAnBzT,EAAK0N,UAAuB,CACxD,IAAMgG,EAAUnT,EAAEG,WAAWkS,SAAS,cACpBc,EAAQxR,QAAUwR,EAAQC,aAE1CN,EAAc3O,KAAK+O,OAjB7B,kBAsBSJ,GAtBT,gDApHF,6GA6IE,8GACMlK,KAAKzH,WADX,gCAEyByH,KAAKyK,gBAAgBzK,KAAKzH,YAFnD,YAEU2E,EAFV,UAGkBA,EAAOwN,UAHzB,yCAIa,IAAIjF,SAAuB,SAACC,GACjC,IAAM1N,EAAuB,GAC7B,GAAI,EAAKA,QAAQK,WAAa,EAAKL,QAAQK,UAAUL,QAAQ2S,KAAM,CACjE,IAAM5H,EAAU,EAAK/K,QAAQK,UAAUuS,0BACnC7H,IACF/K,EAAQ+K,QAAUA,GAGtB/K,EAAQgM,aAAe,EAAKhM,QAAQgM,aACpChM,EAAQsO,MAAQ,EAAKtO,QAAQsO,MAC7BtO,EAAQkP,MAAQ,EAAKlP,QAAQkP,MAC7BlP,EAAQqO,YAAc,EAAKrO,QAAQqO,YACnCrO,EAAQwO,iBAAmBtJ,EAAO2N,mBAClC,IAAM9K,EAAQ,IAAI,EAAKoE,cACrB,EAAKnM,QAAQmG,OACbjB,EAAOwN,UACP1S,EACA,EAAKA,QAAQK,WAEf0H,EAAMoB,QAAQO,GAAG,QAAQ,kBAAMgE,EAAQ3F,UAvB/C,gDA7IF,yGA0KE,WAA8BvH,GAA9B,wGACqBwH,KAAKhI,QAAQK,UAAUI,YAAYD,GADxD,YACQmE,EADR,4BAGIqD,KAAKuJ,SAAW5M,EACVO,EAASP,EACbqD,KAAK8K,iBAEHnO,EAAKoO,gBAAkBpO,EAAKoO,eAAeC,SAASnP,OACtDmE,KAAKiL,aAAatO,EAAKoO,gBACd/K,KAAKhI,QAAQkT,gBACPlL,KAAKhI,QAAQmG,OACrBgN,aAAa,MAAO,CACzB3S,GAAI,2BACJ6I,KAAM,mBAGNnE,EAhBR,wBAiBM8C,KAAKiJ,QAAU,CACb/L,EAAOkO,YACPlO,EAAOmO,cACPnO,EAAOoO,aACPpO,EAAOqO,YAETvL,KAAKwL,mBAAmBtO,EAAOwN,UAAW1K,KAAKhI,QAAQmG,OAAQxB,GAvBrE,kBAwBaO,GAxBb,iDA1KF,wEAyME,SAAqBuO,GAA2B,WACxCtN,EAAS6B,KAAKhI,QAAQmG,OACxBuN,GAAoB,EACxBD,EAAWT,SAAS7T,SAAQ,SAACC,IF9N1B,SAAP,oCE+NMuU,CAA4B,CAC1BxN,SACA9F,UAAW,EAAKL,QAAQK,UACxBxB,KAAMO,EACNwH,eAAgB,CAAEyH,YAAa,EAAKrO,QAAQqO,eAC3CnN,MAAK,SAACuJ,GAEP,IAAM2D,GAAasF,GAA4BtU,EAAEwU,QACjDzN,EAAOgN,aAAa1I,EAAS,CAC3BpB,KAAMjK,EAAEQ,aACRyN,QAASjO,EAAEiO,QACXe,eAEEhP,EAAEwU,UACJF,GAAoB,WA3N9B,gCAiOE,SACE7U,EACAsH,EACAxB,GACA,WACA,GAAI9F,EACF,GAAuB,UAAnBA,EAAK0N,WAA4C,SAAnB1N,EAAK0N,UACjC1N,EAAK6N,WACP7N,EAAK6N,SAAW7N,EAAK6N,SAASnK,KAAI,SAACnD,GAAD,OAChC,EAAKoU,mBAAmBpU,EAAG+G,EAAQxB,OAGhB,SAAnB9F,EAAK0N,YACP1N,EAAKe,aAAe+E,EAAKrE,SAASV,mBAE/B,GAAuB,UAAnBf,EAAK0N,UAAuB,CACrC,IAAM/B,GAAMqJ,QACV7L,KAAKhI,QAAQK,UAAUL,QAAQuK,QAC7B,+BAEEhK,EAAa1B,EAAKiV,eACxBjV,EAAK2L,IAAMA,EACX3L,EAAK0B,WAAaA,EAClB1B,EAAKmM,gBAAkB,SAACpK,GAAD,OACrBqK,GAAkBrK,EAAQL,IAC5B,IACMwL,EAAsBzB,GAC1B,CACEG,QAHY5L,EAAK8O,cAAcC,cAI/BtN,SAAUC,GAEZ4F,EACA6B,KAAKhI,QAAQK,UAAUL,QAAQuK,SAAW,IAE5C1L,EAAO,SACFA,GACAkN,GAIT,OAAOlN,IAzQX,0DA4QE,qHACQkV,EAAa/L,KAAKD,QACwB,SAA9BgM,EAAWlV,KAAK0N,UAFpC,uBAGUnB,EAAS2I,EAAW1H,KAAKqF,iBACzBhP,EAA0C,GAChD0I,EAAOjM,SAAQ,SAACC,GACd,IAAMP,EAAOO,EAAEP,KACf,GAAuB,UAAnBA,EAAK0N,UAAuB,CAC9B,IAAM/L,EAAK3B,EAAKiV,eACVE,EAAU,EAAKhU,QAAQK,UAAUI,YAAYD,GAAIU,MAAK,SAAC0D,GAC3D,GAAIA,EAAG,CACL,IAAM0N,EAAW9P,OAAOoC,EAAEtE,SAAS0F,OAAOxF,IAE1C,OADA3B,EAAKyT,SAAWA,EACTA,MAGX5P,EAASa,KAAKyQ,OAhBtB,SAmBsBvG,QAAQwG,IAAIvR,GAnBlC,cAmBUyP,EAnBV,yBAoBWA,EAAIlP,QAAO,SAAC7D,GAAD,YAAae,IAANf,MApB7B,gDA5QF,gD,kBAAA,K,yrDC9BO,SAAe8U,GAAtB,mC,oDAAO,iHACSlU,EADT,EACLqG,aACAF,EAFK,EAELA,OACA9F,EAHK,EAGLA,UAHK,SAKoBD,EAA2BJ,EAASK,GALxD,cAKCE,EALD,yDAOH,WAAYgC,GAAU,8BACdA,EAAK,CACTiI,IAAK,GACLrE,SACA5F,aACAF,cAZD,UAMsC8T,KANtC,4C,gbCFA,IAAMC,GAAb,yB,4FAAA,sF,UAAA,S,EAAA,G,EAAA,yB,EAAA,yBAME,iGACMpM,KAAKiJ,QADX,yCAEWjJ,KAAKiJ,SAFhB,WAIMjJ,KAAKnJ,KAJX,gCAKyBgH,EACnBmC,KAAKnJ,KACLmJ,KAAK3H,WACLa,OARN,cAKI8G,KAAKiJ,QALT,yBASWjJ,KAAKiJ,SAThB,+CANF,E,gLAAA,gD,kBAAA,K,84FCCO,SAAeoD,GAAtB,mC,oDAAO,qHACLlO,EADK,EACLA,SACAtH,EAFK,EAELA,MAESyV,cAJJ,oBAKGC,EAAM1V,EAAKyV,cAAcC,IACzB/J,EAAM3L,EAAKyV,cAAc9J,KAC3B+J,EAPD,wBAQKC,EAAOC,KAAKC,MAAMH,GAClB9J,EAAUgD,QAAQC,QACtBiH,6BAA8BxO,OAAQhG,EAAW,CAC/CoU,IAAKC,EACLhE,WAAW,KAZd,kBAeM/F,GAfN,YAgBQD,EAhBR,sBAiBKoK,EAAczO,EAAOK,WAAWC,cAAcoO,MAjBnD,wBAqBOC,EArBP,2JAsBG,WAAe5U,GAAf,gKAC6BA,GAD7B,IACkCsK,UADlC,gDAtBH,mDAqBkCoK,GArBlC,kBA0BQE,GA1BR,6C,mhCCqBA,IAAMC,GAAiD,GAExDC,GAA4B,CAChC,kBACA,oBACA,oBACA,oBACA,eACA,gBACA,eACA,eACA,SAEA,mB,SAGaC,G,uFAAf,uHACE5O,EADF,EACEA,aACAF,EAFF,EAEEA,OACA9F,EAHF,EAGEA,UACAxB,EAJF,EAIEA,KAEMmH,EAASnH,EAAKyB,SAASE,GAN/B,SAO+BH,EAAUU,IAAI,sBAAuB,KAAM,CACtEiF,WARJ,UAOQkP,EAPR,SAUQC,EAAaD,GAAkBA,EAAe,IAVtD,yCAaW5E,GAAmB,SACnBjK,GADkB,IACJ/F,SAAU6U,EAAW7U,SAASE,KACjD2F,EACA9F,IAhBN,4C,sBAqBO,SAAeiQ,GAAtB,uC,oDAAO,WACLtQ,EACAmG,EACA9F,GAHK,mHAOC+U,EAAcpV,EAAQyK,QAPvB,SAQoBrK,EAA2BJ,EAASK,GARxD,YAQCE,EARD,8BAWG8U,EADkBrV,EACeM,YAGrC+U,EAAe/U,eACgBH,IAA/BkV,EAAe/U,SAASE,GAfvB,iBAiBD3B,EAAOwW,EAjBN,yCAmBYhV,EAAUI,YAAYF,GAnBlC,QAmBD1B,EAnBC,mBAqBCA,EArBD,oBAsBKiH,EAAMjH,EAAKyB,SAASwF,IACpBO,EAvBL,SAwBIrG,GAxBJ,IAyBCM,SAAUC,IAGNqG,EAAyC,CAC7CP,eACAF,SACA9F,YACAxB,SAG+B,IAA7BmW,GAAWjP,QAAQD,GAnCtB,oBAoCa,WAARA,EApCL,iBAqCG2E,EAAUyJ,GAAoBtN,GArCjC,2BAsCoB,iBAARd,EAtCZ,yBAuCuB3F,IAAhBiV,GAA6C,YAAhBA,EAvCpC,oBAwCyB,QAAhBA,EAxCT,iBAyCO3K,EAAUe,GAAoB5E,GAzCrC,iDA2CcqO,GAA4BrO,IA3C1C,gCA8CK6D,EAAUvE,GAAqBU,GA9CpC,mCAgDoB,iBAARd,EAhDZ,0CAiDUmP,GAA4BrO,IAjDtC,WAkDoB,kBAARd,EAlDZ,iBAmDG2E,EAAU4J,GAA0BzN,GAnDvC,2BAqDuB,YAAhBwO,EArDP,kCAsD8B/U,EAAUI,YACjC5B,EAAKyB,SAAS0F,OAAOxF,IAvD5B,SAsDW8U,EAtDX,UA0DaC,EADQ,SAETvV,GAFS,IAGZM,SAAUzB,EAAKyB,SAAS0F,OAAOxF,KAEjCiK,EAAUvE,GAAqB,SAC1BU,GADyB,IAE5B/H,KAAMyW,EACNjP,aAAckP,MAjEvB,wBAqEK9K,EAAUe,GAAoB5E,GArEnC,oCAwEUmO,GAAcjP,GAxExB,iBAyEO0P,EAAkBT,GAAcjP,IAGpC2P,EADEL,GAAuC,mBAAjBK,EACRD,EACdJ,GAGaI,KAGf/K,EAAUgL,EAAa7O,IAnF1B,uDAsF0Bd,EAtF1B,6DAyFK,6BAzFL,YA6FD2E,EA7FC,0CA8FIA,EAAQvJ,MAAK,SAAC9B,GACnB,GAAIA,EAAG,CACL,IAAMsW,EAAkBtW,EAQxB,OAPIP,IACF6W,EAAgBC,UAAU9W,KAAOA,EACjC6W,EAAgBC,UAAUpV,WAAa1B,EAAKyB,SAASE,GACrDkV,EAAgBC,UAAUtV,UAAYA,IAGxCuV,QAAYF,EAAiB,CAACtB,IAAc,CAAEyB,SAAS,IAChDH,OAxGR,6C,41CPpDA,SAASzK,GACdrK,EACAL,GAEA,IAAQuV,EAA4BlV,EAA5BkV,KAAMC,EAAsBnV,EAAtBmV,MAAOC,EAAepV,EAAfoV,OAAQnL,EAAOjK,EAAPiK,GAC7B,MAAO,CACLvK,SAAUC,EACVgF,OAAQuQ,EACRG,KAAMF,EAAQ,IAAMC,EACpBE,UAAWC,KAAKC,MAChBvL,MAIG,IAiDHwL,GAjDS1O,GAGT,CACF2O,MAAO,QACPC,WAAY,OACZC,QAAS,UACTC,WAAY,QACZC,gBAAiB,OACjBC,aAAc,UACdC,OAAQ,QACRC,YAAa,OACbC,SAAU,UACVC,YAAa,QACbC,iBAAkB,OAClBC,cAAe,WAGV,SAASC,GACdlX,EACAmG,EACA9F,GAEA,IAAM0K,EAAU1K,EAAUuS,0BAK1B,OAJI7H,IACF/K,EAAQ+K,QAAUA,GAGbuF,GAAmBtQ,EAASmG,EAAQ9F,GAStC,SAAS8W,GACdjX,GAQA,OAP6B,a,mOAAA,U,IAAA,G,EAAA,E,kZAE3B,WAAYqC,EAAUvC,GAAkC,O,4FAAA,SACtDA,EAAU,SAAKE,GAAQF,GAD+B,YAEhDuC,EAAKvC,GAJc,UACbmR,IAWX,SAAS1B,KACd,QAAuBtP,IAAnBkW,GAA8B,CAChC,IAAMe,EAAMrY,SAASC,cAAc,OACnCoY,EAAIC,MAAMC,QACR,gEACFvY,SAASwY,KAAK7X,YAAY0X,GAC1B,IAAMI,EAAKJ,EAAIK,YACf1Y,SAASwY,KAAKG,YAAYN,GAC1Bf,GAAiBmB,EAEnB,OAAOnB,GAIF,SAAS3G,GAA0BtF,GACxC,OAAO,SAAcuN,KAAKC,GAAKD,KAAKE,IAAKzN,EAAMuN,KAAKC,GAAM,KAGrD,SAASpI,GAAiBF,GAC/B,OAAOqI,KAAKpM,IAAI+D,EAAQ,KAAOqI,KAAKG,I,y+DQ5E/B,IAAMC,GAAb,WAKE,WAAmB/X,GACjB,G,4FADyC,cAAxBA,UAAwB,2EACrCgI,KAAKhI,QAAQK,UACf2H,KAAKwC,IAAMxC,KAAKhI,QAAQK,UAAUL,QAAQuK,SAAW,GACrDvC,KAAK3H,UAAY2H,KAAKhI,QAAQK,cACzB,CACL,IAAI2H,KAAKhI,QAAQuK,QAGf,MAAM,IAAI9H,MAAM,sBAFhBuF,KAAKwC,IAAMxC,KAAKhI,QAAQuK,QAI1BvC,KAAK3H,UAAY,IAAI2X,IAAa,CAChCzN,QAASvC,KAAKwC,IACdmI,KAAM3K,KAAKhI,QAAQ2S,Q,YAjB3B,S,EAAA,E,EAAA,+BAsBE,SAAwB7M,EAAa2E,GACnCsK,GAAcjP,GAAO2E,M,EAvBzB,0B,EAAA,yBA0BE,WAAiBtE,GAAjB,oGACM6B,KAAKhI,QAAQO,aAAcyH,KAAKwC,IADtC,sBAGUyN,EAAc,CAACjQ,KAAKhI,QAAQO,aAElBsD,OALpB,sBAMsBoU,GANtB,gEAMiB7G,EANjB,QAOcpR,EAA4C,CAChDO,WAAY6Q,EACZ/Q,UAAW2H,KAAK3H,UAChB8F,UAVV,UAY6BA,EAAO4H,SAASoD,GAAhB,IACnB/C,YAAY,EACZ8J,KAAK,EACLC,YAAanQ,KAAKhI,QAAQmY,aACvBnY,IAhBb,eAYc+H,EAZd,yBAkBeA,GAlBf,sMA1BF,E,gLAAA,4EAkDE,WACE,OAAO0F,QAAQC,QAAQ,CAAC1F,KAAKoQ,uBAnDjC,8BAsDE,WAA2B,WACzB,MAAO,CACL/O,KAAM,SACNgP,cAAe,SAACnT,GAAD,OACbuI,QAAQC,QAAQ,EAAK4K,eAAepT,QA1D5C,4BA8DE,SAAuBiB,GAGrB,OAAOgR,GAA4B,CACjChR,SACA9F,UAJgB2H,KAAK3H,UAKrBkK,QAJcvC,KAAKwC,W,6BAhEzB,K,gSCJO,IAAM+N,GAAb,WAeE,WAAYvY,I,4FAA8B,iSACxC,IAAMsD,EAAItD,EAAQpB,QAClBoJ,KAAKxH,GAAK8C,EAAE9C,GACZwH,KAAKwQ,MAAQlV,EAAEkV,MACfxQ,KAAKyQ,QAAUnV,EAAEmV,QACjBzQ,KAAKhC,OAAS1C,EAAE0C,OAChBgC,KAAK9I,OAASoE,EAAEpE,OAChB8I,KAAK3G,KAAOiC,EAAEjC,KACd2G,KAAK3H,UAAYL,EAAQK,U,QAvB7B,O,EAAA,G,EAAA,uBA0BE,WAA4D,WAC1D,OAAI2H,KAAK0Q,MACApX,YAA0B0G,KAAK0Q,OAEjC/X,EAAwB,CAC7BN,UAAW2H,KAAK3H,UAChBY,UAAW+G,KAAKxH,GAChBD,WAAYyH,KAAKyQ,QACjBvZ,OAAQ,KACRsC,WAAY,CAAC,aAAc,iBAC1BN,MAAK,SAACC,GAIP,OAHA,EAAKuX,MAAQvX,EACb,EAAKE,KAAOF,EAAKE,KACjB,EAAKG,WAAaL,EAAKK,WAChBL,OAxCb,sBA4CE,WAA+C,WAC7C,OAAI6G,KAAK2Q,UACArX,YAA0B0G,KAAK2Q,UAAU1Z,eAE3C+I,KAAK3H,UAAUI,YAAYuH,KAAKyQ,SAASvX,MAAK,SAACC,GAEpD,OADA,EAAKwX,UAAYxX,EACV,EAAKwX,UAAU1Z,mBAlD5B,qBAsDE,WAA4C,WAC1C,OAAI+I,KAAK4Q,SACAtX,YAA0B0G,KAAK4Q,UAEjC5Q,KAAK6Q,WAAW3X,MAAK,SAACC,GAC3B,OAAOA,EAAKC,YAAYF,MAAK,SAAC4X,GAE5B,OADA,EAAKF,SAAWE,EACTA,a,kBA7Df,K,unDCeO,SAASC,GACdF,GAEmB,IACfjY,EAFJoY,EACmB,wDAIbC,EAAY,GACZC,EAAa,GACnB,IAAK,IAAMhM,KAAK2L,EAAU,CACxB,IAAMrY,EAAKgC,OAAO0K,GACbiM,MAAM3Y,IACTyY,EAAU1V,KAAK/C,GAGnB,IAAM4Y,EAAaP,EAASI,UACxBG,GACFH,EAAU5G,MAAK,SAACpO,EAAGC,GACjB,OAAOkV,EAAWrT,QAAQ9B,GAAKmV,EAAWrT,QAAQ7B,MAGtD,IAAK,IAAImV,EAAM,EAAGA,EAAMJ,EAAUpV,OAAQwV,IAAO,CAC/C,IAAMnM,EAAI+L,EAAUI,GACdC,EAAeT,EAAS3L,GAC9B,GAAI,aAAcoM,EAAc,CAC9B,IAAMC,EAAgBD,EAAavU,SAC7BxE,EAAaiC,OAAO0K,GACpBtO,EAAoC2a,EAAc,GACxD,GAAI3a,IACFgC,EAAS,CACPK,UAAWrC,EAAQ4B,GACnBD,aACA3B,WAEFsa,EAAW3V,KAAK3C,IACXoY,GACH,OAKR,OAAOE,EAGF,SAASM,GAIdxZ,GAEA,IAAQK,EAAwBL,EAAxBK,UAAWwY,EAAa7Y,EAAb6Y,SACnB,IAAK,IAAM3L,KAAK2L,EAAU,CACxB,IAAMrY,EAAKgC,OAAO0K,GAClB,IAAKiM,MAAM3Y,GAAK,CACd,IAAM3B,EAAOga,EAAS3L,GACtB,GAAI,aAAcrO,EAAM,CACtB,IAAM4a,EAAW5a,EAAKkG,SAASpB,MAAK,SAACvE,GAAD,OAAOA,EAAEiC,QAE7C,GAAIoY,GAAYA,EAASpY,KAAM,CAC7B,IAAMA,EAAOoY,EAASpY,KACtB,OAAOC,YACLC,EAAqB,SAChBkY,GADe,IAElBpY,cAQZ,IAAMT,EAASmY,GAAiBF,GAChC,OAAIjY,GAAUA,EAAOiD,OACZnC,EAAqB,IAAErB,aAAcO,EAAO,KAE9CU,iBAA0BnB,GAG5B,SAASuZ,GAId1Z,GAEA,IAAQK,EAAwBL,EAAxBK,UAEFO,EAASmY,GAFiB/Y,EAAb6Y,UAGnB,OAAIjY,GAAUA,EAAOiD,OACZlD,EAAkB,OACvBN,aACGL,EAAQ2Z,gBACR/Y,EAAO,KAGPU,iBAA0BnB,GAe5B,SAASyZ,GACdC,EACA7Z,IAGA8Z,QAAmBD,GACnB,SAAmBA,EAAGE,OAAtB,GAAO5P,EAAP,KAAYC,EAAZ,KAEI/I,EAAmB,GAEvB,GAAIrB,EAAQqB,KAAM,CAChB,IAAM6I,EACkB,YAAtBlK,EAAQqB,KAAKS,KACT9B,EAAQqB,KAAKQ,SACS,YAAtB7B,EAAQqB,KAAKS,MACb9B,EAAQqB,KAEV6I,IACF7I,EAAO6I,EAAQ8P,YAAY,IAG1B3Y,EAAKwC,SACRxC,GAAO4Y,QAA4B9P,EAAKC,EAAKpK,EAAQka,SAIvD,IAAMhQ,EAAoB,GAE1B7I,EAAKlC,SAAQ,YAAgB,cAAdgL,EAAc,KAATC,EAAS,KAC3B,MAAeC,QAAeF,EAAKC,GAAnC,GAAOhL,EAAP,KAAUwF,EAAV,KACAsF,EAAQ3G,KAAKnE,EAAI,IAAMwF,MAGzB,IAIMD,EAAsC,CAC1CtD,KALU,YAAH,OAAe6I,EAAQnI,KAAK,MAA5B,MAMPJ,IAAK,KACLyJ,OALuBpL,EAAQoL,QAQjC,OAAOpL,EAAQK,UAAU8Z,KAAK,yBAA0B,CAAExV,SAGrD,SAASyV,GAGdla,GACA,OAAO,IAAIqY,GAAmBrY,G,gUCzLzB,SAAema,GAAtB,qC,oDAAO,WACLha,EACAL,GAFK,kHAIkBK,EAAUU,IAAI,mBAAoB,KAAM,CAC7DuZ,UAAW,YALR,aAICC,EAJD,SAOWA,EAASC,cAAgBD,EAASC,aAAa5G,SAP1D,wBAQG6G,EAAS1b,SAASC,cAAc,MAC/BqY,MAAMqD,SAAW,WACxBD,EAAOpD,MAAMlS,OAAS,IACtBsV,EAAOpD,MAAM/R,MAAQ,IACrBmV,EAAOpD,MAAMsD,QAAb,UAAuB3a,aAAvB,EAAuBA,EAAS2a,eAAhC,QAA2C,OAC3CF,EAAOG,UAAY,eACf5a,GAAWA,EAAQ6a,WACrBJ,EAAOG,WAAa,IAAM5a,EAAQ6a,WAE9BC,EAAM,IAAIC,OACZ1D,MAAM2D,UAAY,QACtBF,EAAIzD,MAAM4D,SAAW,QACrBH,EAAII,IAAM,GApBP,oBAsBiB7a,EAAUU,IAAI,uBAAwB,CACtDoa,aAAc,SAvBf,QAsBKD,EAtBL,OAyBKE,EAAaC,OAAOC,KAAOD,OAAOE,UAClCC,EAAWJ,EAAWK,gBAAgBP,GAC5CJ,EAAII,IAAMM,EA3BT,mDA6BDlQ,QAAQC,IAAR,MA7BC,eAiC8B,OAA/BgP,EAASC,aAAakB,MACgB,KAAtCnB,EAASC,aAAakB,KAAKC,SAE3BlB,EAAOmB,KAAOrB,EAASC,aAAakB,KACpCjB,EAAOoB,OAAS,UAC2C,IAAvDtB,EAASC,aAAakB,KAAKI,OAAO,kBACpChB,EAAIiB,IAAM,wCAGdtB,EAAO/a,YAAYob,GA1ChB,kBA2CIL,GA3CJ,4D,q3CCGA,SAASuB,EACdhc,EACAM,EACA2b,EACAC,GAEA,GAAwB,iBAAb5b,GAA6C,iBAAbA,EACzCA,EAAWkC,OAAOlC,GAClBN,EAAQuD,KAAR,OACK0Y,GADL,IAEE3b,mBAEG,GAAI0B,MAAMC,QAAQ3B,GAAW,CAClC,O,EAAA,E,4CAAyBA,I,wwBAAlBC,EAAP,KAAmBC,EAAnB,KACAR,EAAQuD,KAAR,OACK0Y,GADL,IAEE3b,SAAUC,EACVC,MACG0b,QAEwB,WAApB,EAAO5b,IAChBN,EAAQuD,KAAR,SAAkB0Y,GAAe3b,GAAa4b,I,+uBCnB3C,IAAMC,EAAyB,CACpCN,OAAQ,MACRtR,QAAS,GACT6R,WAAW,EACXC,SAAU,CAAC,OAAQ,eACnBC,gBAAiB,CACfC,KAAM,CAAE7B,SAAU,YAClB8B,YAAa,CACX9B,SAAU,eACV+B,kBAAmB,CACjB,gEAINtE,YAAa,I,okECsER,IAAMuE,EAAb,a,kOAAA,U,IAAA,kB,IAAA,G,EAAA,E,+YAsBE,WAAY1c,GAAY,a,4FAAA,aACtB,cD1FG,SAA8BA,GACnC,IAAM2c,EAAqB,CAAC,IAAIhI,MAmChC,OAlCI3U,EAAQ4c,aACV5c,EAAQ4c,YAAYzd,SAAQ,SAACC,GAC3Bud,EAAKpZ,KAAKnE,MAITY,EAAQK,UAKFL,EAAQK,YACjBL,EAAQuK,QAAUvK,EAAQK,UAAUL,QAAQuK,SAL5CvK,EAAQK,UAAY,IAAI2X,IAAa,CACnCzN,QAASvK,EAAQuK,SAAW,GAC5BoI,KAAM3S,EAAQ2S,QAKlB3S,GAAU6c,QAAUV,EAASnc,IAEhB8c,QAAW9c,EAAQ6J,SAC9B7J,EAAQ6J,OAAS,EAAE,KAAM,GAAI,IAAK,IAClC7J,EAAQ+c,UAAY/c,EAAQ6J,QAG1B7J,EAAQK,WACVsc,EAAKpZ,KACH,IAAIwU,KAAO,CACT1X,UAAWL,EAAQK,UACnBsS,KAAM3S,EAAQ2S,QAIV,OACL3S,GADE,IAEL4c,YAAaD,EACbK,QAAQ,ICwDFC,CAAqBjd,KADL,UAXpB,IAAIsH,gBAWgB,+CARU,IAQV,iGALuC,CAC7D4V,OAAQ,GACRrE,SAAU,KAKN7Y,EAAQK,YACV,EAAKA,UAAYL,EAAQK,WAE3B,EAAK8c,gBAAgBjc,MAAK,WACxB,IAAMkc,EAAY,EAAKC,eACnBD,GACFA,EAAUE,UAAUC,IAAI,qBAEtB,EAAKvd,QAAQoc,WACf,EAAKoB,iBAXa,EAtB1B,O,EAAA,G,EAAA,uDAoDE,WACEC,EACA/C,EACA1a,GAHF,gGAKQgI,KAAKgB,OAAO,mBALpB,8EAM0ByU,EAAY/C,EAAU1a,IANhD,gDApDF,yGA6EE,WACEA,GADF,kHAGQgI,KAAK0V,YAHb,UAKQle,EAAWQ,EAAoCR,QAE/Ce,EAAcP,EAAsCO,YAEtDf,QAA0BW,IAAfI,KACbod,QACE,+DAIErd,EAAWN,EAAQM,SACpBd,GAAYe,GAAeD,EAhBlC,sBAiBU,IAAImC,MACR,0EAlBN,WAqBMuF,KAAKhI,QAAQuK,SAAoC,KAAzBvC,KAAKhI,QAAQuK,QArB3C,kCAuBUrI,QAAQ8F,KAAKhI,QAAQgM,gBACvBhM,EAAQ4G,eAAiB5G,EAAQ4G,gBAAkB,IAC9C1E,QAAQlC,EAAQ4G,eAAeoF,gBAClChM,EAAQ4G,eAAeoF,aAAehE,KAAKhI,QAAQgM,eAGjDvB,GAAUyM,QAAYlX,EAASgI,KAAMA,KAAK3H,WA7BtD,UA+B2B2H,KAAK+F,SAAStD,EAAd,KACnB2D,YAAY,GAETpO,GACAA,EAAQ4G,iBAnCnB,WA+BYmB,EA/BZ,OAqCYvH,EAAKuH,GAASC,KAAK4V,WAAW7V,IAChCA,IAASvH,EAtCnB,oBAuCQwH,KAAK6V,WAAWrd,GAAM,CAAEuH,QAAOxH,WAAYwH,EAAMxH,aAE7CwH,EAAM/H,QAAQwQ,UAzC1B,qBA0CwCxI,KAAK8V,qBA1C7C,0CA4CmB/V,GA5CnB,iCAgDaA,GAhDb,kCAkDYgW,GACJC,QAAS1d,IAAa,OAAQA,EAC1BA,EAASE,GACThB,GAAWe,GAAcD,EAC/BgL,QAAQ2S,MAAR,8BAAqCF,EAArC,WAtDN,0DA7EF,+DA2IE,WACE,MAAiC/V,KAAKhI,QAA9B8c,EAAR,EAAQA,OAAQoB,EAAhB,EAAgBA,KAAMrU,EAAtB,EAAsBA,OAClBiT,GACF9U,KAAKmW,UAAUrB,GACXoB,GACFlW,KAAKoW,QAAQF,IAENrU,GACT7B,KAAKqW,UAAUxU,KAnJrB,+BAuJE,SAAkB7J,GAIhB,OAAOW,QAAkB,GACvBN,UAAW2H,KAAK3H,WACbL,MA7JT,gCAiKE,SAIEA,GAMA,OAAO0E,QAAkB,GACvBrE,UAAW2H,KAAK3H,WACbL,MA7KT,kCAiLE,SAGEA,GAIA,OAAO0B,QAAoB,GACzBrB,UAAW2H,KAAK3H,WACbL,MA1LT,mCA8LE,SAIEA,GAMA,OAAO8E,QAA+B,GACpCzE,UAAW2H,KAAK3H,WACbL,MA1MT,+BA8ME,SAIE6Y,EACAc,GAGA,IAAM3F,GAAU0F,QAAwB,CACtCb,WACAxY,UAAW2H,KAAK3H,UAChBsZ,mBAKF,OADA3R,KAAKsW,YAAY,WAAYtK,GACtBA,IA9NX,kCAiOE,SACE6E,GAEwC,IADxCG,EACwC,wDAClChF,GAAUwF,QAAqB,CACnCX,WACAxY,UAAW2H,KAAK3H,UAChB2Y,aAEF,OAAIhF,GAAW,SAAUA,GACvBhM,KAAKsW,YAAY,WAAYtK,GACtBA,GAEA1S,YAA0B0S,KA9OvC,gCAqPE,SACE6E,GAEwC,IADxCG,EACwC,wDACxC,OAAOhR,KAAKwR,qBAAqBX,EAAUG,KAzP/C,wDA4PE,6GACQhR,KAAKgB,SADb,gCAEShB,KAAK6V,YAFd,gDA5PF,gHAiQE,WAA8Brd,GAA9B,2HACkBwH,KAAK6V,YADvB,iDACa5T,EADb,YAEUsU,EAAMvW,KAAK6V,WAAW5T,IACpB1J,aAAeC,EAH3B,yCAIa+d,GAAOA,EAAIxW,OAJxB,WAKewW,EAAIxW,MAAMyW,qBALzB,kCAMwBD,EAAIxW,MAAMyW,uBANlC,aAMYrM,EANZ,UAOiBA,EAAIsM,MAAK,SAACrf,GAAD,OAAOA,IAAMoB,KAPvC,0CAQe+d,EAAIxW,OARnB,YAWQwW,EAAIxW,MAAMuJ,gBAXlB,oBAYYoN,EAAeH,EAAIxW,MAAMuJ,oBACzBqN,EAAYD,EAAa/a,MAAK,SAACvE,GACnC,OAAOA,EAAEP,MAAQO,EAAEP,KAAKyT,WAAa9R,MAd7C,0CAiBeme,EAAU5W,OAjBzB,wEAjQF,kGAkSE,WAAe6W,EAAoB5e,GAAnC,wGAGIQ,EADsB,iBAAboe,GAA6C,iBAAbA,EACpC3S,OAAOzL,GAEPoe,EAASpe,KAEVqe,EAAWre,GAAMwH,KAAK6V,WAAWrd,IAPzC,qBASQqe,EAAS9W,MAAM+W,UATvB,iCAU2BD,EAAS9W,MAAM+W,YAV1C,QAUYvZ,EAVZ,SAYQyC,KAAKqW,UAAU9Y,EAAQvF,GAZ/B,4BAgBU6e,EAAS9W,MAAMlJ,KAhBzB,iBAiBQA,EAAOggB,EAAS9W,MAAMlJ,KAjB9B,+BAmBc0B,EAAase,EAASte,WAnBpC,UAoBqByH,KAAK3H,UAAUI,YAAYF,GApBhD,QAoBQ1B,EApBR,eAsBUA,IACFgH,QAAuBhH,EAAMmJ,KAAK3H,WAAWa,MAAK,SAACqE,GAC7CA,GACF,EAAK8Y,UAAU9Y,EAAQvF,MAzBnC,gCA+BI,4CAAe4e,EAAU5e,GA/B7B,iDAlSF,uGAsUE,WAAkB4e,GAAlB,yGACS5W,KAAK+W,SAASH,IADvB,gDAtUF,kEA0UE,WAAoE,IAA7DI,EAA6D,uDAAjC,iBACjC,iDAAoBA,KA3UxB,yBA8UE,SAAYJ,GACV,IAAM7W,EAAQC,KAAKiX,SAASL,GAC5B,GAAI7W,EAAO,CACT,IAAM0Q,EAAUzQ,KAAK4V,WAAW7V,GAC5B0Q,UACKzQ,KAAK6V,WAAWpF,GAEzB,+CAAkB1Q,MArVxB,6BAyVE,WAAwB,WACjBC,KAAKkX,wBACRlX,KAAKkX,sBAAwB,SAACrF,GACd,EAAK1Q,QAAQgW,cAAc,eAEvC,EAAKC,qBAAqBvF,IAG9B7R,KAAKqX,sBAAwB,SAACxF,GACxB,EAAK1Q,QAAQgW,cAAc,eAC7B,EAAKG,qBAAqBzF,IAG9B7R,KAAKmB,QAAQO,GAAG,QAAS1B,KAAKkX,uBAC9BlX,KAAKmB,QAAQO,GAAG,cAAe1B,KAAKqX,0BAvW1C,8BA2WE,WACMrX,KAAKkX,wBACPlX,KAAKmB,QAAQS,eAAe,QAAS5B,KAAKkX,uBAC1ClX,KAAKmB,QAAQS,eAAe,QAAS5B,KAAKsX,sBAC1CtX,KAAKkX,2BAAwB/e,EAC7B6H,KAAKqX,2BAAwBlf,KAhXnC,6BAuXE,SAAgBH,GAId,OAAOgI,KAAKrH,kBAAkBX,KA3XlC,8BAiYE,SACEA,GAMA,OAAOgI,KAAKtD,mBAAmB1E,KAxYnC,gCA8YE,SAGEA,GAIA,OAAOgI,KAAKtG,qBAAqB1B,KArZrC,iCA2ZE,SAIEA,GAMA,OAAOgI,KAAKhD,sBAAsBhF,KAratC,2BAyaE,WACEgI,KAAKuX,eAAL,MAAAvX,KAAA,aA1aJ,4BA6aE,WAA8C,kCAA5BwX,EAA4B,yBAA5BA,EAA4B,gBACvCA,EAAK3b,SACR2b,EAAO3X,OAAOC,KAAKE,KAAKyX,YAE1BD,EAAKrgB,SAAQ,SAACkK,GACZ,IAAMqW,EAAQ,EAAKD,UAAUpW,GACzBqW,IACFA,EAAMvgB,SAAQ,SAACC,GAAD,OAAOA,EAAEgI,YACvB,EAAKqY,UAAUpW,GAAQ,SArb/B,yBA0bE,SAAoBsW,EAAyB3L,GAC3C,IAAM0L,EAAQ1X,KAAKyX,UAAUE,GAC7B,GAAID,IAAqC,IAA5BA,EAAM3Z,QAAQiO,GAAiB,CAC1C,IAAM4L,EAAkB,WACtB,IAAMC,EAAQH,EAAM3Z,QAAQiO,IACb,IAAX6L,GACFH,EAAMpb,OAAOub,EAAO,IAGxB7L,EAAQ9S,KAAK0e,GACb5L,EAAQ8L,MAAMF,GACdF,EAAMnc,KAAKyQ,MArcjB,gCAycE,WACE,IAAMpT,EAASoH,KAAK+X,cACpB,OAAInf,EAAOsd,OAAQtd,EAAOkc,SA3c9B,yDAidE,2HACQ9U,KAAKgV,SADb,OAEMhV,KAAKhI,QAAQggB,OACfhY,KAAKiY,kBAEHjY,KAAKhI,QAAQkgB,KACflY,KAAKmY,kBAGDlH,EAA+B,GAC/BmH,EAAkBpY,KAAKqY,qBACzBrY,KAAKhI,QAAQsgB,UACftE,EAAmB/C,EAAWjR,KAAKhI,QAAQsgB,SAAU,CACnDpI,IAAKkI,IAGLpY,KAAKhI,QAAQiZ,WAAajX,MAAMC,QAAQ+F,KAAKhI,QAAQiZ,YACvDjR,KAAKhI,QAAQiZ,UAAU9Z,SAAQ,SAACC,GAC9B,IAAM8c,EAAmB,GACpBkE,IACHlE,EAAiBhE,KAAM,GAEzB8D,EAAmB/C,EAAW7Z,EAAG,GAAI8c,MAtB3C,MAyBkBjD,EAzBlB,gDAyBa7H,EAzBb,yBA2BYpJ,KAAKkP,YAAY9F,GA3B7B,2DA6BM9F,QAAQC,IAAR,MA7BN,mCAgCEvD,KAAKuY,iBAAiB,iBAAkBvY,MACxCA,KAAKwY,kBAjCP,2DAjdF,0EAqfE,WACExY,KAAKmL,aAAa,SAtftB,6BAyfE,WACE,IAAI6M,EACAS,EACAze,MAAMC,QAAQ+F,KAAKhI,QAAQggB,QAC7BA,EAAQhY,KAAKhI,QAAQggB,MAAM,GAC3BS,EAAezY,KAAKhI,QAAQggB,MAAM,IAElCA,EAAQxd,OAAOwF,KAAKhI,QAAQggB,OAE9B,IAAMU,EAA8C,CAClDV,SAEES,IACFC,EAAgBlgB,GAAKigB,GAGvBzY,KAAKmL,aAAa,MAAOuN,KAzgB7B,kCA4gBE,SACE7G,GAEA,IAAM9R,EAAyB8R,EAAG9R,MAE5BvH,EAAKuH,EAAMlJ,MAAQkJ,EAAMlJ,KAAKyB,SAASE,GACvC5B,EAAUib,EAAGjb,QAEnB,QAAWuB,IAAPK,GAAoB5B,EAAS,CAC/B,IAAMqC,EAAYrC,EAAQ4B,GAC1B,GAAIS,EAAW,CACb,IAYM4X,EAAkC,GACtC8H,aAAc,GACbngB,EANuC,CACxCmgB,aAAc,EACd5b,SAAU,CAV0B,CACpCvE,GAAIgC,OAAOvB,GACX/B,OAAQN,EAAQW,WAChBiZ,MAAO,IAAF,OAAMhY,GACXiY,QAASjW,OAAOhC,GAChBwF,OAAQ,GACR3E,KAAMzC,EAAQiD,aAkBhB,OARAmG,KAAKuY,iBACH,aACAvY,KAAK4Y,mBAAL,OACK/H,GADL,IAEEI,UAAW,CAACzY,GACZqgB,WAAY,aAGThI,MA/iBf,gEAojBE,WAAmCgB,GAAnC,wHACE7R,KAAKuY,iBAAiB,iBAEhB7d,EAA4C,IAC5C0I,EAASvD,OAAOiZ,OAAO9Y,KAAK6V,aAC3BxL,MAAK,SAACpO,EAAGC,GACd,OAAID,EAAE8D,MAAMuG,OAASpK,EAAE6D,MAAMuG,MACpBpK,EAAE6D,MAAMuG,MAAQrK,EAAE8D,MAAMuG,MAE1B,KAETlD,EAAOjM,SAAQ,SAAC+N,GACd,IAAMnF,EAAQmF,EAAEnF,MACVgZ,EACkC,mBAA/BhZ,EAAMyW,sBACTzW,EAAMyW,qBAERuC,GAAahZ,EAAM/H,QAAQghB,YAAc,EAAKC,eAAelZ,IAC/DrF,EAASa,KAAKwd,EAAUG,KAAKnZ,OAG3BoZ,EAAgB1T,QAAQwG,IAAIvR,GArBpC,SAsBuBye,EAtBvB,UAsBQC,EAtBR,OAuBQjP,EAAgB,GACtBiP,EAAOjiB,SAAQ,SAACC,GACVA,GACFA,EAAED,SAAQ,SAACyF,GAAD,OAAOuN,EAAI5O,KAAKqB,SAIzBuN,EAAItO,OA9BX,wBA+BImE,KAAKuY,iBAAiB,aAAc,MA/BxC,8BAmCQpI,EAAcnQ,KAAKhI,QAAQmY,aAAe,GAC1C2E,EAAS9U,KAAKqZ,YAEpBnD,OAAgB/d,KADZ+d,EAAOlW,KAAKsZ,WACYpD,EAAO,GAC9BpB,GAAWoB,EAvClB,wBAwCIlW,KAAKuY,iBAAiB,aAAc,MAxCxC,kCA2CQgB,EACH,aAAe5J,KAAK6J,IAAI7J,KAAKE,IAAiB,IAAZiF,EAAO,GAAYnF,KAAKC,KAC3DD,KAAK8J,IAAI,EAAGvD,EAAO,GACfhE,EAAS/B,EAAcoJ,EAAiB,KAExCG,GAAgB9H,QAAoBC,EAAI,CAC5CzO,OAAQ+G,EACR9R,UAAW2H,KAAK3H,UAChB6Z,WACChZ,MAAK,SAACC,GAUP,OATA,EAAKof,iBACH,aACA,EAAKK,mBAAL,OACKzf,GADL,IAEE8X,UAAW9G,EACX0O,WAAY,SACZ7B,MAAOnF,MAGJ1Y,KAET6G,KAAKsW,YAAY,SAAUoD,GAhE7B,kBAiESA,GAjET,iDApjBF,8EAwnBE,SAA2B7I,GAAuB,WAShD,cACKA,GADL,IAEEE,iBAVwB,WACxB,OAAOA,QAAiBF,GAAU,GAAMtW,KAAI,SAACnD,GAC3C,OAAOgb,QAAmB,CACxBxb,QAASQ,EAAER,QACXyB,UAAW,EAAKA,oBA7nB1B,uDAuoBE,0GACQ+c,EAAYpV,KAAKqV,gBADzB,iCAGuBhD,QACjBrS,KAAK3H,UACL2H,KAAKhI,QAAQ2hB,oBALnB,QAGUC,EAHV,SAQMxE,EAAU1d,YAAYkiB,GAR5B,gDAvoBF,gD,iBAAA,GAKUC,M,EALGnF,E,UAMMoF","file":"main-edab8224d47a661.js","sourcesContent":["import { Feature } from 'geojson';\nimport { ResourceItem } from '@nextgis/ngw-connector';\n\nexport function createPopupContent(\n  feature: Feature,\n  item?: ResourceItem,\n): HTMLElement | string {\n  if (__BROWSER__) {\n    const element = document.createElement('div');\n    if (item && item.feature_layer) {\n      item.feature_layer.fields.forEach((x) => {\n        if (x.grid_visibility) {\n          const value = feature.properties && feature.properties[x.keyname];\n          if (value) {\n            const propElem = document.createElement('div');\n            element.appendChild(propElem);\n            propElem.innerHTML = `<span>${x.display_name}</span>: ${value}<span></span>`;\n          }\n        }\n      });\n    } else if (feature.properties) {\n      for (const p in feature.properties) {\n        const propElem = document.createElement('div');\n        element.appendChild(propElem);\n        propElem.innerHTML = `<span>${p}</span>: ${feature.properties[p]}<span></span>`;\n      }\n    }\n    return element;\n  } else {\n    return '';\n  }\n}\n","import { FilterOptions, GeoJsonAdapterOptions } from '@nextgis/webmap';\n\nconst filterOptionsKeys: (keyof FilterOptions)[] = [\n  'fields',\n  'intersects',\n  'limit',\n  'orderBy',\n  'strategy',\n];\n\nexport function getLayerFilterOptions(\n  options: GeoJsonAdapterOptions,\n): FilterOptions {\n  const filterOptions: Record<string, any> = {};\n  filterOptionsKeys.forEach((x) => {\n    const opt = options[x];\n    if (opt !== undefined) {\n      filterOptions[x] = opt;\n    }\n  });\n  return filterOptions as FilterOptions;\n}\n","import NgwConnector, { ResourceItem } from '@nextgis/ngw-connector';\nimport {\n  NgwLayerOptions,\n  KeynamedNgwLayerOptions,\n  ResourceIdNgwLayerOptions,\n  ResourceNgwLayerOptions,\n} from '../interfaces';\n\nexport async function resourceIdFromLayerOptions(\n  options: NgwLayerOptions,\n  connector: NgwConnector,\n): Promise<number> {\n  const resource = (options as ResourceNgwLayerOptions).resource;\n  const item = resource as ResourceItem;\n\n  // @ts-ignore @deprecated\n  let keyname = (options as KeynamedNgwLayerOptions).keyname;\n  // @ts-ignore @deprecated\n  let resourceId = (options as ResourceIdNgwLayerOptions).resourceId;\n\n  if (resource) {\n    if (typeof resource === 'string') {\n      keyname = resource;\n    } else if (typeof resource === 'number') {\n      resourceId = resource;\n    } else if (\n      item.resource &&\n      item.resource !== undefined &&\n      'resmeta' in item\n    ) {\n      resourceId = (resource as ResourceItem).resource.id;\n    } else {\n      // TODO: safe remove this case\n      resourceId = await resourceIdFromLayerOptions(\n        resource as ResourceNgwLayerOptions,\n        connector,\n      );\n    }\n  }\n  if (!resourceId && keyname) {\n    const resourceItem = await connector.getResource(keyname);\n    if (resourceItem) {\n      resourceId = resourceItem.resource.id;\n    }\n  }\n  return resourceId;\n}\n","import { Geometry, GeoJsonProperties } from 'geojson';\n\nimport CancelablePromise from '@nextgis/cancelable-promise';\n\nimport {\n  FeatureRequestParams,\n  GetNgwItemOptions,\n  NgwFeatureItemResponse,\n  NgwFeatureRequestOptions,\n} from '../interfaces';\nimport {\n  createGeoJsonFeature,\n  FEATURE_REQUEST_PARAMS,\n  updateItemRequestParam,\n} from './featureLayerUtils';\n\nexport function fetchNgwLayerItem<\n  G extends Geometry = Geometry,\n  P extends GeoJsonProperties = GeoJsonProperties\n>(\n  options: GetNgwItemOptions & NgwFeatureRequestOptions,\n): CancelablePromise<NgwFeatureItemResponse<P, G>> {\n  const params: FeatureRequestParams & { [name: string]: any } = {\n    ...FEATURE_REQUEST_PARAMS,\n  };\n  updateItemRequestParam(params, options);\n  return options.connector\n    .get('feature_layer.feature.item', null, {\n      id: options.resourceId,\n      fid: options.featureId,\n      ...params,\n    })\n    .then((resp) => {\n      return {\n        ...resp,\n        toGeojson: () => {\n          if (resp.geom) {\n            return CancelablePromise.resolve(createGeoJsonFeature<G, P>(resp));\n          } else {\n            return fetchNgwLayerItem({\n              ...options,\n              geom: true,\n              fields: null,\n              extensions: null,\n            }).then((onlyGeomItem) => {\n              const geom = onlyGeomItem.geom;\n              return createGeoJsonFeature<G, P>({ ...resp, geom });\n            });\n          }\n        },\n      } as NgwFeatureItemResponse<P, G>;\n    });\n}\n","import { Geometry, Feature } from 'geojson';\n\nimport NgwConnector from '@nextgis/ngw-connector';\nimport CancelablePromise from '@nextgis/cancelable-promise';\n\nimport { NgwFeatureRequestOptions } from '../interfaces';\nimport { fetchNgwLayerItem } from './fetchNgwLayerItem';\nimport { createGeoJsonFeature } from './featureLayerUtils';\n\nexport function fetchNgwLayerFeature<\n  G extends Geometry = Geometry,\n  P extends Record<string, any> = Record<string, any>\n>(\n  options: {\n    resourceId: number;\n    featureId: number;\n    connector: NgwConnector;\n  } & NgwFeatureRequestOptions,\n): CancelablePromise<Feature<G, P>> {\n  return fetchNgwLayerItem<G, P>(options).then((item) => {\n    return createGeoJsonFeature<G, P>(item);\n  });\n}\n","import {\n  Geometry,\n  Feature,\n  FeatureCollection,\n  GeoJsonProperties,\n} from 'geojson';\n\nimport NgwConnector, {\n  FeatureItem,\n  RequestItemAdditionalParams,\n  FeatureLayerField,\n} from '@nextgis/ngw-connector';\nimport CancelablePromise from '@nextgis/cancelable-promise';\nimport {\n  checkIfPropertyFilter,\n  PropertyFilter,\n  PropertiesFilter,\n} from '@nextgis/properties-filter';\nimport {\n  FeatureRequestParams,\n  GetNgwItemsOptions,\n  NgwFeatureRequestOptions,\n} from '../interfaces';\nimport { defined, JsonMap } from '@nextgis/utils';\nimport { fetchNgwLayerItem } from './fetchNgwLayerItem';\nimport { fetchNgwLayerFeature } from './fetchNgwLayerFeature';\nimport { fetchNgwLayerFeatureCollection } from './fetchNgwLayerFeatureCollection';\nimport { fetchNgwLayerItems } from './fetchNgwLayerItems';\n\nexport const FEATURE_REQUEST_PARAMS: FeatureRequestParams = {\n  srs: 4326,\n  geom_format: 'geojson',\n};\n\nexport function createGeoJsonFeature<\n  G extends Geometry | null = Geometry,\n  P extends GeoJsonProperties = GeoJsonProperties\n>(item: Pick<FeatureItem, 'id' | 'geom' | 'fields'>): Feature<G, P> {\n  const geometry = item.geom as G;\n  const feature: Feature<G, P> = {\n    id: item.id,\n    type: 'Feature',\n    properties: item.fields as P,\n    geometry,\n  };\n  return feature;\n}\n\n/**\n * @deprecated use {@link fetchNgwLayerItem} instead\n */\nexport function getNgwLayerItem<\n  G extends Geometry = Geometry,\n  P extends GeoJsonProperties = GeoJsonProperties\n>(\n  options: {\n    resourceId: number;\n    featureId: number;\n    connector: NgwConnector;\n  } & NgwFeatureRequestOptions,\n): CancelablePromise<FeatureItem<P, G>> {\n  return fetchNgwLayerItem(options);\n}\n\n/**\n * @deprecated use {@link fetchNgwLayerFeature} instead\n */\nexport function getNgwLayerFeature<\n  G extends Geometry = Geometry,\n  P extends Record<string, any> = Record<string, any>\n>(\n  options: {\n    resourceId: number;\n    featureId: number;\n    connector: NgwConnector;\n  } & NgwFeatureRequestOptions,\n): CancelablePromise<Feature<G, P>> {\n  return fetchNgwLayerFeature(options);\n}\n\n/**\n * @deprecated use {@link fetchNgwLayerFeatures} instead\n */\n\nexport function getNgwLayerFeatures<\n  G extends Geometry | null = Geometry,\n  P extends { [field: string]: any } = { [field: string]: any }\n>(\n  options: {\n    resourceId: number;\n    connector: NgwConnector;\n    filters?: PropertiesFilter;\n  } & NgwFeatureRequestOptions<P>,\n): CancelablePromise<FeatureCollection<G, P>> {\n  return fetchNgwLayerFeatureCollection(options);\n}\n\n/**\n * @deprecated use {@link fetchNgwLayerItems} instead\n */\nexport function getNgwLayerItems<\n  G extends Geometry = Geometry,\n  P extends JsonMap = JsonMap\n>(\n  options: GetNgwItemsOptions & NgwFeatureRequestOptions<P>,\n): CancelablePromise<FeatureItem<P, G>[]> {\n  return fetchNgwLayerItems(options);\n}\n\nexport function updateItemRequestParam(\n  params: FeatureRequestParams,\n  options: NgwFeatureRequestOptions,\n): void {\n  const { extensions, geom, fields, srs } = options;\n  params.extensions = extensions ? extensions.join(',') : '';\n  if (fields !== undefined) {\n    params.fields = Array.isArray(fields) ? fields.join(',') : '';\n  }\n  if (geom !== undefined) {\n    params.geom = geom ? 'yes' : 'no';\n    if (!geom) {\n      delete params.srs;\n      delete params.geom_format;\n    }\n  }\n  if (defined(srs)) {\n    params.srs = srs;\n  }\n}\n\nexport function idFilterWorkAround<\n  G extends Geometry = Geometry,\n  P extends JsonMap = JsonMap\n>(options: {\n  filterById: PropertyFilter;\n  resourceId: number;\n  connector: NgwConnector;\n}): CancelablePromise<FeatureItem<P, G>[]> {\n  const value = options.filterById[2];\n  const featureIds: number[] =\n    typeof value === 'number'\n      ? [value]\n      : value.split(',').map((x: string) => Number(x));\n  if (options.filterById[1] !== 'eq' && options.filterById[1] !== 'in') {\n    throw new Error(\n      'Unable to filter by object id. Except `eq` or `in` operator',\n    );\n  }\n  const promises: Promise<FeatureItem<P, G>>[] = featureIds.map((featureId) => {\n    return fetchNgwLayerItem<G, P>({\n      connector: options.connector,\n      resourceId: options.resourceId,\n      featureId,\n    });\n  });\n  return CancelablePromise.all(promises);\n}\n\n// NGW REST API is not able to filtering by combined queries\n// therefore the filter is divided into several requests\nexport function createFeatureFieldFilterQueries<\n  G extends Geometry = Geometry,\n  P extends { [field: string]: any } = { [field: string]: any }\n>(\n  opt: Required<GetNgwItemsOptions> & NgwFeatureRequestOptions<P>,\n  _queries: CancelablePromise<FeatureItem<P, G>[]>[] = [],\n  _parentAllParams: [string, any][] = [],\n): CancelablePromise<FeatureItem<P, G>[]> {\n  const { filters, connector, resourceId } = opt;\n\n  const logic = typeof filters[0] === 'string' ? filters[0] : 'all';\n\n  const filters_ = filters.filter((x) => Array.isArray(x)) as PropertyFilter[];\n\n  const createParam = (pf: PropertyFilter): [string, any] => {\n    const [field, operation, value] = pf;\n    return [`fld_${field}__${operation}`, value];\n  };\n\n  if (logic === 'any') {\n    filters_.forEach((f) => {\n      if (f[0] === 'id') {\n        _queries.push(\n          idFilterWorkAround({ filterById: f, connector, resourceId }),\n        );\n      }\n      if (checkIfPropertyFilter(f)) {\n        _queries.push(\n          fetchNgwLayerItemsRequest<G, P>({\n            ...opt,\n            paramList: [..._parentAllParams, createParam(f)],\n          }),\n        );\n      } else {\n        createFeatureFieldFilterQueries(\n          {\n            ...opt,\n            filters: f,\n          },\n          _queries,\n          [..._parentAllParams],\n        );\n      }\n    });\n  } else if (logic === 'all') {\n    const filterById = filters_.find((x) => x[0] === 'id');\n    if (filterById) {\n      _queries.push(idFilterWorkAround({ filterById, connector, resourceId }));\n    } else {\n      const filters: [string, any][] = [];\n      const propertiesFilterList: PropertiesFilter[] = [];\n      filters_.forEach((f) => {\n        if (checkIfPropertyFilter(f)) {\n          filters.push(createParam(f));\n        } else {\n          propertiesFilterList.push(f);\n        }\n      });\n\n      if (propertiesFilterList.length) {\n        propertiesFilterList.forEach((x) => {\n          createFeatureFieldFilterQueries(\n            {\n              ...opt,\n              filters: x,\n            },\n            _queries,\n            [..._parentAllParams, ...filters],\n          );\n        });\n      } else {\n        _queries.push(\n          fetchNgwLayerItemsRequest<G, P>({\n            ...opt,\n            paramList: [..._parentAllParams, ...filters],\n          }),\n        );\n      }\n    }\n  }\n\n  return CancelablePromise.all(_queries).then((itemsParts) => {\n    const items = itemsParts.reduce((a, b) => a.concat(b), []);\n    const offset = opt.offset !== undefined ? opt.offset : 0;\n    const limit = opt.limit !== undefined ? opt.limit : items.length;\n    if (opt.offset || opt.limit) {\n      return items.splice(offset, limit);\n    }\n    return items;\n  });\n}\n\nexport function fetchNgwLayerItemsRequest<\n  G extends Geometry = Geometry,\n  P extends { [field: string]: any } = { [field: string]: any }\n>(\n  options: GetNgwItemsOptions &\n    NgwFeatureRequestOptions<P> & { paramList?: [string, any][] },\n): CancelablePromise<FeatureItem<P, G>[]> {\n  const params: FeatureRequestParams & RequestItemAdditionalParams = {\n    ...FEATURE_REQUEST_PARAMS,\n  };\n  const {\n    connector,\n    limit,\n    offset,\n    intersects,\n    orderBy,\n    resourceId,\n    paramList,\n  } = options;\n  if (limit) {\n    params.limit = limit;\n  }\n  if (offset) {\n    params.offset = offset;\n  }\n  // TODO: fix type for options\n  updateItemRequestParam(params, options as { [field: string]: any });\n\n  if (orderBy) {\n    params.order_by = orderBy.join(',');\n  }\n  if (intersects) {\n    params.intersects = intersects;\n  }\n\n  if (paramList) {\n    params.paramList = paramList;\n  }\n\n  return connector.get('feature_layer.feature.collection', null, {\n    id: resourceId,\n    ...params,\n  }) as CancelablePromise<FeatureItem<P, G>[]>;\n}\n\nexport function prepareFieldsToNgw<T extends GeoJsonProperties>(\n  item: T,\n  resourceFields: Pick<FeatureLayerField, 'keyname' | 'datatype'>[],\n): Record<keyof T, any> {\n  const fields = {} as Record<keyof T, any>;\n  if (item) {\n    resourceFields.forEach((x) => {\n      if (x.keyname in item) {\n        const keyname = x.keyname;\n        const prop = item[keyname];\n        let value: any;\n        if (prop !== undefined) {\n          if (x.datatype === 'STRING') {\n            value = prop ? String(prop) : null;\n            // TODO: remove after v 3.0.0. For backward compatibility\n            if (value === 'null') {\n              value = null;\n            }\n          } else if (x.datatype === 'BIGINT' || x.datatype === 'INTEGER') {\n            value = typeof prop === 'string' ? parseInt(prop, 10) : prop;\n          } else if (x.datatype === 'REAL') {\n            value = typeof prop === 'string' ? parseFloat(prop) : prop;\n          } else if (x.datatype === 'BOOLEAN') {\n            value =\n              typeof prop === 'boolean' || typeof prop === 'number'\n                ? Number(!!prop)\n                : null;\n          } else if (x.datatype === 'DATE' || x.datatype === 'DATETIME') {\n            let dt: Date | undefined;\n            if (typeof prop === 'object' && !((prop as any) instanceof Date)) {\n              value = prop;\n            } else {\n              if ((prop as any) instanceof Date) {\n                dt = prop as any;\n              } else {\n                const parse = Date.parse(String(prop));\n                if (parse) {\n                  dt = new Date(parse);\n                }\n              }\n              if (dt) {\n                value = {\n                  year: dt.getFullYear(),\n                  month: dt.getMonth(),\n                  day: dt.getDay(),\n                };\n                if (x.datatype === 'DATETIME') {\n                  value.hour = dt.getHours();\n                  value.minute = dt.getMinutes();\n                  value.second = dt.getSeconds();\n                }\n              }\n            }\n          }\n        }\n        fields[keyname as keyof T] = value ?? null;\n      }\n    });\n  }\n  return fields;\n}\n","import { Geometry } from 'geojson';\nimport { FeatureItem } from '@nextgis/ngw-connector';\nimport { propertiesFilter } from '@nextgis/properties-filter';\nimport CancelablePromise from '@nextgis/cancelable-promise';\nimport { FetchNgwItemsOptions } from '../interfaces';\nimport {\n  createFeatureFieldFilterQueries,\n  fetchNgwLayerItemsRequest,\n} from './featureLayerUtils';\n\nexport function fetchNgwLayerItems<\n  G extends Geometry = Geometry,\n  P extends { [field: string]: any } = { [field: string]: any }\n>(options: FetchNgwItemsOptions<P>): CancelablePromise<FeatureItem<P, G>[]> {\n  const filters = options.filters;\n  if (filters) {\n    return createFeatureFieldFilterQueries({\n      ...options,\n      filters,\n    }) as CancelablePromise<FeatureItem<P, G>[]>;\n  } else {\n    return fetchNgwLayerItemsRequest<G, P>(options).then((data) => {\n      if (filters) {\n        // client-side filter check\n        return data.filter((y) => {\n          const fields = y.fields;\n          if (fields) {\n            propertiesFilter(fields, filters);\n          }\n        });\n      }\n      return data;\n    }) as CancelablePromise<FeatureItem<P, G>[]>;\n  }\n}\n","import { Geometry, FeatureCollection } from 'geojson';\n\nimport NgwConnector from '@nextgis/ngw-connector';\nimport CancelablePromise from '@nextgis/cancelable-promise';\nimport { PropertiesFilter } from '@nextgis/properties-filter';\nimport { NgwFeatureRequestOptions } from '../interfaces';\n\nimport { fetchNgwLayerFeatures } from './fetchNgwLayerFeatures';\n\nexport function fetchNgwLayerFeatureCollection<\n  G extends Geometry | null = Geometry,\n  P extends { [field: string]: any } = { [field: string]: any }\n>(\n  options: {\n    resourceId: number;\n    connector: NgwConnector;\n    filters?: PropertiesFilter;\n  } & NgwFeatureRequestOptions<P>,\n): CancelablePromise<FeatureCollection<G, P>> {\n  return fetchNgwLayerFeatures<G, P>(options).then((features) => {\n    const featureCollection: FeatureCollection<G, P> = {\n      type: 'FeatureCollection',\n      features,\n    };\n    return featureCollection;\n  });\n}\n","import { Geometry, Feature } from 'geojson';\n\nimport { FeatureItem } from '@nextgis/ngw-connector';\nimport CancelablePromise from '@nextgis/cancelable-promise';\nimport { FetchNgwItemsOptions } from '../interfaces';\nimport { fetchNgwLayerItems } from './fetchNgwLayerItems';\nimport { createGeoJsonFeature } from './featureLayerUtils';\n\nexport function fetchNgwLayerFeatures<\n  G extends Geometry | null = Geometry,\n  P extends { [field: string]: any } = { [field: string]: any }\n>(options: FetchNgwItemsOptions<P>): CancelablePromise<Feature<G, P>[]> {\n  return fetchNgwLayerItems(options).then((x: FeatureItem[]) => {\n    const features: Array<Feature<G, P>> = [];\n    x.forEach((y) => {\n      features.push(createGeoJsonFeature(y));\n    });\n\n    return features;\n  });\n}\n","import { LngLatBoundsArray } from '@nextgis/webmap';\nimport NgwConnector, {\n  WebmapResource,\n  ResourceItem,\n} from '@nextgis/ngw-connector';\n\nexport function getNgwWebmapExtent(\n  webmap: WebmapResource,\n): LngLatBoundsArray | undefined {\n  const bottom = webmap['extent_bottom'];\n  const left = webmap['extent_left'];\n  const top = webmap['extent_top'];\n  const right = webmap['extent_right'];\n  if (bottom && left && top && right) {\n    const extent: LngLatBoundsArray = [left, bottom, right, top];\n    if (extent[3] > 82) {\n      extent[3] = 82;\n    }\n    if (extent[1] < -82) {\n      extent[1] = -82;\n    }\n    return extent;\n  }\n}\n\nexport function fetchNgwLayerExtent(\n  id: number,\n  connector: NgwConnector,\n): Promise<LngLatBoundsArray | undefined> {\n  return connector.get('layer.extent', null, { id }).then((resp) => {\n    if (resp) {\n      const { maxLat, maxLon, minLat, minLon } = resp.extent;\n      const extenrArray: LngLatBoundsArray = [minLon, minLat, maxLon, maxLat];\n      return extenrArray;\n    }\n  });\n}\n\nexport async function fetchNgwResourceExtent(\n  item: ResourceItem,\n  connector: NgwConnector,\n): Promise<LngLatBoundsArray | undefined> {\n  if (item.webmap) {\n    return getNgwWebmapExtent(item.webmap);\n  } else {\n    const resource = item.resource;\n    if (resource.cls && resource.cls.indexOf('style') !== -1) {\n      return connector.getResource(resource.parent.id).then((res) => {\n        if (res) {\n          return fetchNgwLayerExtent(res.resource.id, connector);\n        }\n      });\n    } else {\n      return fetchNgwLayerExtent(resource.id, connector);\n    }\n  }\n}\n\n/**\n * @deprecated use {@link fetchNgwLayerExtent} instead\n */\nexport function getNgwLayerExtent(\n  id: number,\n  connector: NgwConnector,\n): Promise<LngLatBoundsArray | undefined> {\n  return fetchNgwLayerExtent(id, connector);\n}\n/**\n * @deprecated use {@link fetchNgwResourceExtent} instead\n */\nexport async function getNgwResourceExtent(\n  item: ResourceItem,\n  connector: NgwConnector,\n): Promise<LngLatBoundsArray | undefined> {\n  return fetchNgwResourceExtent(item, connector);\n}\n","import { EventEmitter } from 'events';\nimport {\n  VectorLayerAdapter,\n  Type,\n  GeoJsonAdapterOptions,\n  FilterOptions,\n  LayerAdapter,\n} from '@nextgis/webmap';\nimport { debounce, degrees2meters } from '@nextgis/utils';\nimport { PropertiesFilter, propertiesFilter } from '@nextgis/properties-filter';\nimport CancelablePromise from '@nextgis/cancelable-promise';\nimport { vectorLayerGeomToPaintTypeAlias } from '../utils/utils';\nimport { createPopupContent } from '../utils/createPopupContent';\nimport { getLayerFilterOptions } from '../utils/getLayerFilterOptions';\nimport { resourceIdFromLayerOptions } from '../utils/resourceIdFromLayerOptions';\nimport { NgwLayerOptions, GetClassAdapterOptions } from '../interfaces';\nimport { fetchNgwLayerFeatureCollection } from '../utils/fetchNgwLayerFeatureCollection';\nimport { fetchNgwResourceExtent } from '../utils/fetchNgwExtent';\n\ninterface FilterArgs {\n  filters?: PropertiesFilter;\n  options?: FilterOptions;\n}\n\nexport async function createGeoJsonAdapter(\n  opt: GetClassAdapterOptions,\n): Promise<Type<VectorLayerAdapter>> {\n  const { webMap, connector, item } = opt;\n  const addLayerOptionsPriority =\n    opt.addLayerOptionsPriority !== undefined\n      ? opt.addLayerOptionsPriority\n      : true;\n  const options = opt.layerOptions as NgwLayerOptions<'GEOJSON'>;\n  const GeoJsonAdapter =\n    (opt.Adapter as Type<VectorLayerAdapter>) ||\n    (webMap.mapAdapter.layerAdapters.GEOJSON as Type<VectorLayerAdapter>);\n\n  let _dataPromise: CancelablePromise<any> | undefined;\n  const _fullDataLoad = false;\n  let _lastFilterArgs: FilterArgs | undefined;\n\n  const resourceId = await resourceIdFromLayerOptions(options, connector);\n\n  if (\n    options.adapterOptions &&\n    options.adapterOptions.popupOptions &&\n    options.adapterOptions.popupOptions.fromProperties\n  ) {\n    options.adapterOptions.popupOptions.createPopupContent = ({ feature }) => {\n      return feature && createPopupContent(feature, item);\n    };\n  }\n\n  const geoJsonAdapterCb = async (\n    filters?: PropertiesFilter,\n    opt?: FilterOptions,\n  ) => {\n    abort();\n    _lastFilterArgs = { filters, options: opt };\n    _dataPromise = fetchNgwLayerFeatureCollection({\n      resourceId,\n      filters,\n      connector,\n      ...opt,\n      // strict restriction on loading data from large layers\n      limit: opt?.limit !== undefined ? opt.limit : 3000,\n    });\n    return await _dataPromise;\n  };\n  let removed = false;\n  const abort = () => {\n    if (_dataPromise) {\n      _dataPromise.cancel();\n      _dataPromise = undefined;\n    }\n  };\n\n  class NgwGeoJsonAdapter extends GeoJsonAdapter {\n    emitter = new EventEmitter();\n    _count?: number;\n    __onMapMove?: () => void;\n    __onMapMoveStart?: () => void;\n    __enableMapMoveListener?: (e: LayerAdapter) => void;\n    __disableMapMoveListener?: (e: LayerAdapter) => void;\n\n    async addLayer(opt_: GeoJsonAdapterOptions) {\n      let needUpdate = !opt_.data;\n      const waitFullLoad =\n        opt_.waitFullLoad !== undefined ? opt_.waitFullLoad : true;\n      if (options.id !== undefined) {\n        opt_.id = options.id;\n      }\n      if (item && item.vector_layer) {\n        opt_.type =\n          vectorLayerGeomToPaintTypeAlias[item.vector_layer.geometry_type];\n      }\n      if (options.adapterOptions) {\n        // TODO: remove addLayerOptionsPriority options/\n        // in some cases, addLayer options must be used,\n        // but in others factory method options needs first\n        if (addLayerOptionsPriority) {\n          opt_ = {\n            ...options.adapterOptions,\n            ...opt_,\n          };\n        } else {\n          opt_ = {\n            ...opt_,\n            ...options.adapterOptions,\n          };\n        }\n      }\n      if (opt_.data && Object.keys(opt_.data).length === 0) {\n        opt_.data = undefined;\n        needUpdate = false;\n      }\n      const layer = super.addLayer(opt_);\n      this.options.strategy = opt_.strategy || undefined;\n\n      _lastFilterArgs = {\n        filters: opt_.propertiesFilter,\n        options: getLayerFilterOptions(opt_),\n      };\n      let updatePromise: Promise<any> | undefined;\n      if (needUpdate) {\n        updatePromise = this.updateLayer();\n      }\n      if (waitFullLoad && updatePromise) {\n        await updatePromise;\n      }\n      if (this.options.strategy === 'BBOX') {\n        this._addBboxEventListener();\n      }\n      return layer;\n    }\n\n    getExtent() {\n      const hasData = this.getLayers && this.getLayers().length;\n      if (this.options.strategy === 'BBOX' || hasData) {\n        return fetchNgwResourceExtent(item, connector);\n      } else {\n        if (super.getExtent) {\n          return super.getExtent();\n        }\n      }\n    }\n\n    beforeRemove() {\n      removed = true;\n      this._removeMoveEventListener();\n      this._removeBboxEventListener();\n      this.__disableMapMoveListener = undefined;\n      this.__enableMapMoveListener = undefined;\n      this.__onMapMove = undefined;\n      this.__onMapMoveStart = undefined;\n      abort();\n    }\n\n    getCount() {\n      if (this._count !== undefined) {\n        return this._count;\n      }\n      return connector\n        .get('feature_layer.feature.count', null, {\n          id: resourceId,\n        })\n        .then((resp) => {\n          if (resp) {\n            this._count = resp.total_count;\n          }\n        });\n    }\n\n    async updateLayer(filterArgs?: FilterArgs) {\n      filterArgs = filterArgs || _lastFilterArgs || {};\n      if (this.options.strategy === 'BBOX') {\n        await webMap.onLoad('create');\n        filterArgs.options = filterArgs.options || {};\n        filterArgs.options.intersects = this._getMapBbox();\n      }\n      if (removed) {\n        return;\n      }\n      try {\n        const data = await geoJsonAdapterCb(\n          filterArgs.filters,\n          filterArgs.options,\n        );\n        await webMap.setLayerData(this, data);\n        this.emitter.emit('updated');\n      } catch (er) {\n        if (er.name !== 'CancelError') {\n          throw er;\n        }\n      }\n      if (super.updateLayer) {\n        super.updateLayer();\n      }\n    }\n\n    async propertiesFilter(filters: PropertiesFilter, opt?: FilterOptions) {\n      abort();\n      if (this.filter && _fullDataLoad) {\n        this.filter((e) => {\n          if (e.feature && e.feature.properties) {\n            return propertiesFilter(e.feature.properties, filters);\n          }\n          return true;\n        });\n      } else if (this.setData) {\n        if (this.clearLayer) {\n          this.clearLayer();\n        }\n        const data = await geoJsonAdapterCb(filters, opt);\n        this.setData(data);\n      }\n    }\n\n    removeFilter() {\n      _lastFilterArgs = undefined;\n      this.propertiesFilter([]);\n      if (this.filter) {\n        this.filter(() => {\n          return true;\n        });\n      }\n    }\n\n    _addBboxEventListener() {\n      this.__enableMapMoveListener = (e: LayerAdapter) => {\n        if (e === this) {\n          this._removeMoveEventListener();\n          this.updateLayer();\n          this._addMoveEventListener();\n        }\n      };\n      this.__disableMapMoveListener = (e: LayerAdapter) => {\n        if (e === this) {\n          this._removeMoveEventListener();\n        }\n      };\n      webMap.emitter.on('layer:show', this.__enableMapMoveListener);\n      webMap.emitter.on('layer:hide', this.__disableMapMoveListener);\n      this.__enableMapMoveListener(this);\n    }\n\n    _removeBboxEventListener() {\n      if (this.__enableMapMoveListener) {\n        webMap.emitter.on('layer:show', this.__enableMapMoveListener);\n      }\n      if (this.__disableMapMoveListener) {\n        webMap.emitter.on('layer:hide', this.__disableMapMoveListener);\n      }\n    }\n\n    _addMoveEventListener() {\n      this.__onMapMove = debounce(() => this.updateLayer());\n      this.__onMapMoveStart = abort;\n      webMap.emitter.on('movestart', this.__onMapMoveStart);\n      webMap.emitter.on('moveend', this.__onMapMove);\n    }\n\n    _removeMoveEventListener() {\n      if (this.__onMapMove) {\n        webMap.emitter.removeListener('moveend', this.__onMapMove);\n      }\n      if (this.__onMapMoveStart) {\n        webMap.emitter.removeListener('movestart', this.__onMapMoveStart);\n      }\n    }\n\n    _getMapBbox(): string | undefined {\n      const bounds = webMap.getBounds();\n      if (bounds) {\n        const [s, w, n, e] = bounds;\n        const polygon = [\n          [s, w],\n          [n, w],\n          [n, e],\n          [s, e],\n          [s, w],\n        ].map(([lng, lat]) => {\n          const [x, y] = degrees2meters(lng, lat);\n          return x + ' ' + y;\n        });\n        return `POLYGON((${polygon.join(', ')}))`;\n      }\n    }\n  }\n\n  return NgwGeoJsonAdapter;\n}\n","import {\n  WebMap,\n  RasterAdapterOptions,\n  ImageAdapterOptions,\n  WmsAdapterOptions,\n} from '@nextgis/webmap';\n\nimport { NgwLayerOptions, TileNoData } from '../interfaces';\nimport { updateImageParams } from './utils';\n\nexport function getLayerAdapterOptions(\n  options: NgwLayerOptions,\n  webMap: WebMap,\n  baseUrl: string,\n): RasterAdapterOptions | ImageAdapterOptions | undefined {\n  let adapter = options.adapter || 'IMAGE';\n  let url: string;\n  const layerAdapters = webMap.getLayerAdapters();\n  const isImageAllowed = layerAdapters ? layerAdapters.IMAGE : true;\n\n  const resourceId = options.resource;\n  const nd: TileNoData = options.tileNoData ? options.tileNoData : 200;\n\n  if (typeof resourceId === 'number') {\n    if (adapter === 'IMAGE') {\n      if (isImageAllowed) {\n        url = baseUrl + '/api/component/render/image';\n        return {\n          url,\n          resourceId,\n          headers: options.headers,\n          params: { resource: resourceId, nd: nd },\n          updateWmsParams: (params: Record<string, any>) =>\n            updateImageParams({ nd: nd, ...params }, resourceId),\n        } as ImageAdapterOptions;\n      } else {\n        adapter = 'TILE';\n      }\n    }\n    if (adapter === 'WMS') {\n      url = `${baseUrl}/api/resource/${resourceId}/wms`;\n      const adapterOptions = options.adapterOptions as WmsAdapterOptions;\n      return {\n        url,\n        format: 'image/png',\n        version: '1.1.1',\n        layers: adapterOptions && adapterOptions.layers,\n        headers: options.headers,\n      };\n    }\n    if (adapter === 'MVT') {\n      url =\n        baseUrl +\n        '/api/component/feature_layer/mvt?x={x}&y={y}&z={z}&' +\n        'resource=' +\n        resourceId +\n        '&simplification=' +\n        (options.simplification || 0);\n      // url = baseUrl + '/api/resource/' + options.resourceId + '/{z}/{x}/{y}.mvt';\n      return {\n        url,\n      };\n    }\n    if (adapter === 'TERRAIN') {\n      url = baseUrl + `/api/resource/${resourceId}/terrain_provider`;\n      // `/api/resource/${resourceId}/terrain_provider/{z}/{x}/{y}.terrain`;\n      return { url, adapter };\n    }\n    if (adapter === 'MODEL_3D') {\n      url = baseUrl + `/api/component/model_3d/${resourceId}/data.glb`;\n      return { url };\n    }\n    if (adapter === 'TILE') {\n      url =\n        baseUrl +\n        '/api/component/render/tile?z={z}&x={x}&y={y}&resource=' +\n        resourceId +\n        '&nd=' +\n        nd;\n      return { url, adapter };\n    }\n  } else if (resourceId !== undefined) {\n    throw new Error(\n      'Option `resource` must be number, not ' + typeof resourceId,\n    );\n  } else {\n    console.log('Option `resource` not set');\n  }\n}\n","import {\n  ResourceAdapter,\n  NgwLayerAdapterType,\n  GetClassAdapterOptions,\n} from '../interfaces';\nimport { MainLayerAdapter, Type, ImageAdapterOptions } from '@nextgis/webmap';\nimport { defined } from '@nextgis/utils';\nimport { ResourceItem, ResourceCls } from '@nextgis/ngw-connector';\n\nimport { getLayerAdapterOptions } from '../utils/getLayerAdapterOptions';\nimport { resourceIdFromLayerOptions } from '../utils/resourceIdFromLayerOptions';\n\nexport async function createRasterAdapter({\n  layerOptions,\n  webMap,\n  connector,\n  item,\n}: GetClassAdapterOptions): Promise<Type<MainLayerAdapter> | undefined> {\n  const resourceCls = item.resource.cls;\n  const clsAdapterAlias: { [key in ResourceCls]?: NgwLayerAdapterType } = {\n    wmsserver_service: 'WMS',\n    tmsclient_layer: 'IMAGE',\n  };\n  let adapter =\n    layerOptions.adapter ||\n    (resourceCls && clsAdapterAlias[resourceCls]) ||\n    'IMAGE';\n  if (adapter !== undefined) {\n    layerOptions.adapter = adapter;\n  }\n  if (adapter === 'IMAGE') {\n    const layerAdapters = webMap.getLayerAdapters();\n    const isImageAllowed = layerAdapters ? layerAdapters.IMAGE : true;\n    if (!isImageAllowed) {\n      adapter = 'TILE';\n    }\n  }\n\n  const adapterClass = webMap.mapAdapter.layerAdapters[\n    adapter\n  ] as Type<MainLayerAdapter>;\n  if (adapterClass) {\n    const resourceId = await resourceIdFromLayerOptions(\n      layerOptions,\n      connector,\n    );\n    return class Adapter extends adapterClass implements ResourceAdapter {\n      // options = {};\n      item?: ResourceItem = item;\n      resourceId = resourceId;\n\n      constructor(public map: any, _options: any) {\n        super(map, _options);\n        const opt = getLayerAdapterOptions(\n          layerOptions,\n          webMap,\n          connector.options.baseUrl || '',\n        );\n        if (opt) {\n          const layerAdapterOptions: ImageAdapterOptions = {\n            ...opt,\n            setViewDelay: layerOptions.adapterOptions?.setViewDelay,\n            params: { resource: resourceId },\n            // @deprecated\n            layers: String(resourceId),\n            resourceId: resourceId,\n          };\n          if (\n            layerOptions.adapterOptions &&\n            defined(layerOptions.adapterOptions.setViewDelay)\n          ) {\n            layerAdapterOptions.setViewDelay =\n              layerOptions.adapterOptions.setViewDelay;\n          }\n          this.options = { ...this.options, ...layerAdapterOptions };\n          // if (__DEV__) {\n          //   Object.defineProperty(this.options, 'layers', {\n          //     get: () => {\n          //       console.warn('Do not use `layers` in ImageAdapterOptions');\n          //       return String(resourceId);\n          //     },\n          //   });\n          //   Object.defineProperty(this.options, 'resourceId', {\n          //     get: () => {\n          //       console.warn('Do not use `resourceId` in ImageAdapterOptions');\n          //       return resourceId;\n          //     },\n          //   });\n          // }\n        }\n      }\n      addLayer(addOptions: any) {\n        return super.addLayer({ ...this.options, ...addOptions });\n      }\n\n      async getIdentificationIds() {\n        const id = this.item && this.item.resource.parent.id;\n        if (defined(id)) {\n          return [id];\n        }\n      }\n      // beforeRemove() {\n\n      // }\n    };\n  } else {\n    throw new Error(adapter + ' not supported yet. Only TILE');\n  }\n}\n","import { EventEmitter } from 'events';\nimport { ItemOptions, Item } from '@nextgis/item';\nimport { treeSome } from '@nextgis/tree';\nimport {\n  WebMap,\n  LayerAdapter,\n  LayerAdapterDefinition,\n  ImageAdapterOptions,\n} from '@nextgis/webmap';\nimport NgwConnector from '@nextgis/ngw-connector';\nimport { objectAssign } from '@nextgis/utils';\n\nimport { setScaleRatio } from './utils/utils';\nimport { TreeGroup, TreeLayer, TreeItem } from './interfaces';\n\nexport class NgwWebmapItem extends Item<ItemOptions> {\n  static GetAdapterFromLayerType: {\n    [layerType: string]: (\n      item: TreeItem,\n      options: any,\n      webMap: WebMap,\n      connector?: NgwConnector,\n    ) => LayerAdapterDefinition;\n  } = {};\n\n  static options: ItemOptions = {\n    properties: [\n      {\n        type: 'boolean',\n        name: 'visibility',\n        getProperty(item?: NgwWebmapItem): boolean {\n          if (item) {\n            if (\n              item.item.item_type === 'group' ||\n              item.item.item_type === 'root'\n            ) {\n              return treeSome<TreeGroup | TreeLayer>(\n                item.item,\n                (i) => ('layer_enabled' in i ? i.layer_enabled : false),\n                (i) => (i as TreeGroup).children,\n              );\n            } else if (item.item.item_type === 'layer') {\n              return item.item.layer_enabled;\n            }\n            // else if (item.item.item_type === 'root') {\n            //   return true;\n            // }\n          }\n          return false;\n        },\n        onSet(\n          value: boolean,\n          options?: Record<string, any>,\n          item?: NgwWebmapItem,\n        ): void {\n          if (item && item.item.item_type === 'layer') {\n            if (item.layer) {\n              if (value) {\n                item.webMap.showLayer(item.layer);\n              } else {\n                item.webMap.hideLayer(item.layer);\n              }\n            }\n            item.item['layer_enabled'] = value;\n          }\n        },\n      },\n    ],\n  };\n\n  item: TreeGroup | TreeLayer;\n  connector?: NgwConnector;\n  layer?: LayerAdapter;\n  readonly emitter = new EventEmitter();\n\n  protected _rootDescendantsCount = 0;\n\n  constructor(\n    public webMap: WebMap,\n    item: TreeGroup | TreeLayer,\n    options?: ItemOptions,\n    connector?: NgwConnector,\n    parent?: NgwWebmapItem,\n    noInit?: boolean,\n  ) {\n    super({ ...NgwWebmapItem.options, ...options });\n    if (connector) {\n      this.connector = connector;\n    }\n    if (parent) {\n      this.tree.setParent(parent);\n    }\n    this.item = item;\n    if (this.item.item_type === 'root') {\n      this._rootDescendantsCount = this._sumUp(this.item.children);\n    } else {\n      const root = this.tree.getRoot<this>();\n      if (root) {\n        this._rootDescendantsCount = root._rootDescendantsCount;\n      }\n    }\n    this.initProperties();\n    if (!noInit) {\n      this._init(item);\n    }\n  }\n\n  static async create(\n    webMap: WebMap,\n    item: TreeGroup | TreeLayer,\n    options?: ItemOptions,\n    connector?: NgwConnector,\n    parent?: NgwWebmapItem,\n  ): Promise<NgwWebmapItem> {\n    const ngwWebmapItem = new NgwWebmapItem(\n      webMap,\n      item,\n      options,\n      connector,\n      parent,\n      true,\n    );\n    await ngwWebmapItem._init(item);\n    return ngwWebmapItem;\n  }\n\n  initItem(item: TreeGroup | TreeLayer): Promise<void> {\n    const i = item;\n    const options: Partial<ImageAdapterOptions> = this.getItemOptions(item);\n    const setNewLayer = (l: LayerAdapter) => {\n      i._layer = l;\n      this.layer = l;\n      const enabled = this.properties.get('visibility');\n      if (enabled) {\n        this.properties.set('visibility', true);\n      }\n\n      if (options.opacity !== undefined) {\n        this.webMap.setLayerOpacity(l, options.opacity);\n      }\n    };\n\n    if (item.item_type === 'group' || item.item_type === 'root') {\n      if (item.children && item.children.length) {\n        this.getChildren(item).forEach((x) => {\n          const children = new NgwWebmapItem(\n            this.webMap,\n            x,\n            this.options,\n            this.connector,\n            this,\n          );\n          this.tree.addChild(children);\n        });\n      }\n      return Promise.resolve();\n    } else {\n      let adapter: LayerAdapterDefinition | undefined;\n      if (item.item_type === 'layer') {\n        adapter = item.adapter || item.layer_adapter.toUpperCase();\n      } else if (NgwWebmapItem.GetAdapterFromLayerType[item.item_type]) {\n        const getAdapter =\n          NgwWebmapItem.GetAdapterFromLayerType[item.item_type];\n        adapter = getAdapter(item, options, this.webMap, this.connector);\n      }\n\n      if (adapter) {\n        return this.webMap.addLayer(adapter, options).then((newLayer) => {\n          setNewLayer(newLayer);\n        });\n      }\n    }\n    if (item._layer) {\n      return Promise.resolve(setNewLayer(item._layer));\n    }\n    return Promise.reject('No layer added');\n  }\n\n  bringToFront(): void {\n    //\n  }\n\n  fit(): void {\n    if (this.item.item_type === 'layer') {\n      // console.log(this.item);\n    }\n  }\n\n  protected getItemOptions(item: TreeGroup | TreeLayer): Record<string, any> {\n    const transparency = item.item_type === 'layer' && item.layer_transparency;\n    const opacity =\n      typeof transparency === 'number' ? (100 - transparency) / 100 : undefined;\n    const options: Partial<ImageAdapterOptions> = {\n      visibility: false,\n      headers: this.options.headers,\n      crossOrigin: this.options.crossOrigin,\n      setViewDelay: this.options.setViewDelay,\n      params: { resource: this.item.resourceId },\n    };\n    if (this.options.order) {\n      const subOrder =\n        this.options.drawOrderEnabled && 'draw_order_position' in item\n          ? this._rootDescendantsCount - item.draw_order_position\n          : this.id;\n\n      // 9 > 0009, 11 > 0011\n      // TODO: find better way to set order in sub level, not limit by 1000 layer in group\n      const subLevel = String(subOrder).padStart(4, '0');\n      options.order = Number((this.options.order | 0) + '.' + subLevel);\n    }\n    if (item.item_type === 'layer') {\n      const maxZoom = item.layer_max_scale_denom\n        ? this._mapScaleToZoomLevel(item.layer_max_scale_denom)\n        : this.webMap.options.maxZoom;\n      const minZoom = item.layer_min_scale_denom\n        ? this._mapScaleToZoomLevel(item.layer_min_scale_denom)\n        : this.webMap.options.minZoom;\n      objectAssign(options, {\n        updateWmsParams: item.updateWmsParams,\n        url: item.url,\n        headers: this.options.headers,\n        ratio: this.options.ratio,\n        maxZoom,\n        minZoom,\n        minScale: item.layer_min_scale_denom,\n        maxScale: item.layer_max_scale_denom,\n      });\n    }\n    if (opacity !== undefined) {\n      options.opacity = opacity;\n    }\n    return options;\n  }\n\n  protected getChildren(item: TreeGroup): (TreeGroup | TreeLayer)[] {\n    return [...item.children].reverse();\n  }\n\n  private _mapScaleToZoomLevel(scale: number) {\n    return setScaleRatio(scale);\n  }\n\n  private _init(item: TreeGroup | TreeLayer) {\n    this.initItem(item).then(() => {\n      this.emitter.emit('init');\n    });\n  }\n\n  private _sumUp(children: Array<TreeGroup | TreeLayer>, totalValue = 0) {\n    for (const child of children) {\n      if (child.item_type === 'layer') {\n        totalValue += 1;\n        child.draw_order_position = child.draw_order_position || totalValue;\n      } else if (child.item_type === 'group') {\n        totalValue = this._sumUp(child.children, totalValue);\n      }\n    }\n    return totalValue;\n  }\n}\n","import { WebMap, Type, VectorAdapterLayerType } from '@nextgis/webmap';\nimport NgwConnector, { GeometryType } from '@nextgis/ngw-connector';\nimport {\n  NgwLayerOptions,\n  NgwWebmapAdapterOptions,\n  ResourceAdapter,\n} from '../interfaces';\nimport { createAsyncAdapter } from '../adapters/createAsyncAdapter';\nimport { NgwWebmapLayerAdapter } from '../NgwWebmapLayerAdapter';\n\nexport function updateImageParams(\n  params: Record<string, any>,\n  resourceId: number,\n): Record<string, any> {\n  const { bbox, width, height, nd } = params;\n  return {\n    resource: resourceId,\n    extent: bbox,\n    size: width + ',' + height,\n    timestamp: Date.now(),\n    nd,\n  };\n}\n\nexport const vectorLayerGeomToPaintTypeAlias: Record<\n  GeometryType,\n  VectorAdapterLayerType\n> = {\n  POINT: 'point',\n  LINESTRING: 'line',\n  POLYGON: 'polygon',\n  MULTIPOINT: 'point',\n  MULTILINESTRING: 'line',\n  MULTIPOLYGON: 'polygon',\n  POINTZ: 'point',\n  LINESTRINGZ: 'line',\n  POLYGONZ: 'polygon',\n  MULTIPOINTZ: 'point',\n  MULTILINESTRINGZ: 'line',\n  MULTIPOLYGONZ: 'polygon',\n};\n\nexport function addNgwLayer(\n  options: NgwLayerOptions,\n  webMap: WebMap,\n  connector: NgwConnector,\n): Promise<Type<ResourceAdapter> | undefined> {\n  const headers = connector.getAuthorizationHeaders();\n  if (headers) {\n    options.headers = headers;\n  }\n\n  return createAsyncAdapter(options, webMap, connector);\n}\n\nexport interface ExtendNgwWebmapLayerAdapterOptions {\n  webMap: WebMap;\n  connector: NgwConnector;\n  baseUrl?: string;\n}\n\nexport function extendNgwWebmapLayerAdapter(\n  opt: ExtendNgwWebmapLayerAdapterOptions,\n): Type<NgwWebmapLayerAdapter> {\n  class A extends NgwWebmapLayerAdapter {\n    constructor(map: any, options: NgwWebmapAdapterOptions) {\n      options = { ...opt, ...options };\n      super(map, options);\n    }\n  }\n  return A;\n}\n\nlet _pixelsInMeter: number;\n\nexport function pixelsInMeterWidth(): number {\n  if (_pixelsInMeter === undefined) {\n    const div = document.createElement('div');\n    div.style.cssText =\n      'position: absolute;  left: -100%;  top: -100%;  width: 100cm;';\n    document.body.appendChild(div);\n    const px = div.offsetWidth;\n    document.body.removeChild(div);\n    _pixelsInMeter = px;\n  }\n  return _pixelsInMeter;\n}\n\n// Returns width of map in meters on specified latitude.\nexport function getMapWidthForLanInMeters(lat: number): number {\n  return 6378137 * 2 * Math.PI * Math.cos((lat * Math.PI) / 180);\n}\n\nexport function getZoomFromScale(scale: number): number {\n  return Math.log(scale / 256) / Math.LN2;\n}\n\nexport function setScaleRatio(scale: number, lat = 0): number {\n  // TODO: get real center\n  // webmap does not contain center yet\n  // const center = [104, 45]; // this.webMap.getCenter();\n\n  const centerLat = lat;\n  const crsScale =\n    (pixelsInMeterWidth() * getMapWidthForLanInMeters(centerLat)) / scale;\n  const zoom = getZoomFromScale(crsScale);\n  return zoom;\n\n  // return Math.round(Math.log(591657550.5 / (scale / 2)) / Math.log(2));\n}\n","import {\n  WebMap,\n  Type,\n  MainLayerAdapter,\n  AdapterOptions,\n} from '@nextgis/webmap';\nimport NgwConnector, { BasemapWebmapItem } from '@nextgis/ngw-connector';\nimport { createAsyncAdapter } from './createAsyncAdapter';\n\ninterface CreateOnFirstShowAdapterOptions {\n  webMap: WebMap;\n  connector: NgwConnector;\n  item: BasemapWebmapItem;\n  adapterOptions?: Record<string, any>;\n  idPrefix?: string;\n}\n\nexport async function createOnFirstShowNgwAdapter({\n  webMap,\n  connector,\n  item,\n  adapterOptions = {},\n  idPrefix = 'basemapwebmap',\n}: CreateOnFirstShowAdapterOptions): Promise<Type<MainLayerAdapter>> {\n  class OnFirstShowAdapter implements MainLayerAdapter {\n    options: AdapterOptions = {};\n    layer: MainLayerAdapter[] = [];\n    _removed = false;\n\n    addLayer() {\n      return this.layer;\n    }\n\n    removeLayer() {\n      this._removed = true;\n      this.layer.forEach((x) => webMap.removeLayer(x));\n    }\n\n    showLayer() {\n      this.options.visibility = true;\n      if (this.layer.length) {\n        this.layer.forEach((x) => {\n          webMap.showLayer(x);\n        });\n      } else {\n        createAsyncAdapter(\n          {\n            resource: item.resource_id,\n            adapterOptions: {\n              name: item.display_name,\n              opacity: item.opacity,\n            },\n          },\n          webMap,\n          connector,\n        ).then((Adapter) => {\n          if (Adapter) {\n            const adapter = new Adapter(webMap.mapAdapter.map, {\n              ...adapterOptions,\n              baselayer: false,\n            });\n            adapter.addLayer({}).then((baselayer: MainLayerAdapter) => {\n              adapter.options.baselayer = false;\n              Object.assign(adapter.options, adapterOptions);\n              adapter.id = idPrefix + '-' + item.resource_id;\n              adapter.layer = baselayer;\n              if (this._removed) {\n                webMap.removeLayer(adapter);\n              }\n              if (this.options.visibility) {\n                webMap.showLayer(adapter);\n              }\n              this.layer.push(adapter);\n            });\n          }\n        });\n      }\n    }\n\n    hideLayer() {\n      this.options.visibility = false;\n      if (this.layer) {\n        this.layer.forEach((x) => webMap.hideLayer(x));\n      }\n    }\n  }\n  return OnFirstShowAdapter;\n}\n","import { Feature, Point } from 'geojson';\nimport { createGeoJsonFeature, fetchNgwLayerItem } from '@nextgis/ngw-kit';\nimport CancelablePromise from '@nextgis/cancelable-promise';\n\nimport type NgwConnector from '@nextgis/ngw-connector';\nimport type { FeatureItem } from '@nextgis/ngw-connector';\nimport type { LngLatBoundsArray } from '@nextgis/utils';\n\ninterface BookmarkItemOptions {\n  connector: NgwConnector;\n  resourceId: number;\n  item: FeatureItem;\n  labelField?: string;\n}\n\nexport class BookmarkItem {\n  readonly name: string;\n  readonly resourceId: number;\n  readonly item: FeatureItem;\n\n  private _extent?: LngLatBoundsArray;\n\n  constructor(private options: BookmarkItemOptions) {\n    this.resourceId = options.resourceId;\n    const item = options.item;\n    this.item = item;\n    if (options.labelField && item.fields) {\n      this.name = item.fields[options.labelField];\n    } else {\n      this.name = String(item.id);\n    }\n  }\n\n  extent(): CancelablePromise<LngLatBoundsArray> {\n    if (this._extent) {\n      return CancelablePromise.resolve(this._extent);\n    }\n    return this.options.connector\n      .get('feature_layer.feature.item_extent', null, {\n        id: this.resourceId,\n        fid: this.item.id,\n      })\n      .then((resp) => {\n        const { minLat, minLon, maxLat, maxLon } = resp.extent;\n        const lonLat = [minLon, minLat, maxLon, maxLat];\n        this._extent = lonLat;\n        return lonLat;\n      });\n  }\n\n  geoJson(): CancelablePromise<Feature<Point, any>> {\n    if (this.item.geom) {\n      return CancelablePromise.resolve(createGeoJsonFeature(this.item));\n    } else {\n      return fetchNgwLayerItem({\n        resourceId: this.resourceId,\n        featureId: this.item.id,\n        connector: this.options.connector,\n        geom: true,\n        fields: null,\n        extensions: null,\n      }).then((onlyGeomItem) => {\n        const geom = onlyGeomItem.geom;\n        this.item.geom = geom;\n        return createGeoJsonFeature(this.item);\n      });\n    }\n  }\n}\n","import { EventEmitter } from 'events';\n\nimport CancelablePromise from '@nextgis/cancelable-promise';\nimport { fixUrlStr } from '@nextgis/utils';\nimport { fetchNgwLayerItems } from '@nextgis/ngw-kit';\n\nimport { NgwWebmapItem } from './NgwWebmapItem';\nimport { createOnFirstShowNgwAdapter } from './adapters/createOnFirstShowNgwAdapter';\nimport { getLayerAdapterOptions } from './utils/getLayerAdapterOptions';\nimport { getNgwWebmapExtent } from './utils/fetchNgwExtent';\nimport { updateImageParams } from './utils/utils';\nimport { BookmarkItem } from './BookmarkItem';\n\nimport type { Type } from '@nextgis/utils';\nimport type { ItemOptions } from '@nextgis/item';\nimport type StrictEventEmitter from 'strict-event-emitter-types';\nimport type {\n  ResourceItem,\n  WebmapResource,\n  BasemapWebmap,\n} from '@nextgis/ngw-connector';\nimport type {\n  WebMap,\n  LngLatBoundsArray,\n  RasterAdapterOptions,\n} from '@nextgis/webmap';\nimport type {\n  TreeGroup,\n  TreeLayer,\n  NgwLayerAdapterType,\n  NgwWebmapAdapterOptions,\n  NgwWebmapLayerAdapterEvents,\n  ResourceAdapter,\n} from './interfaces';\n\nexport class NgwWebmapLayerAdapter<M = any> implements ResourceAdapter<M> {\n  layer?: NgwWebmapItem;\n\n  NgwWebmapItem: Type<NgwWebmapItem> = NgwWebmapItem;\n  /**\n   * Radius for searching objects in pixels\n   */\n  pixelRadius = 10; // webmapSettings.identify_radius,\n  resourceId!: number;\n  webmapClassName = 'webmap';\n  readonly emitter: StrictEventEmitter<\n    EventEmitter,\n    NgwWebmapLayerAdapterEvents\n  > = new EventEmitter();\n  protected _extent?: LngLatBoundsArray;\n  private response?: ResourceItem;\n  private _webmapLayersIds?: number[];\n\n  constructor(public map: M, public options: NgwWebmapAdapterOptions) {\n    const r = options.resourceId;\n    if (Array.isArray(r)) {\n      this.resourceId = r[0];\n      this.options.id = r[1];\n    } else {\n      this.resourceId = r;\n    }\n\n    if (!this.resourceId) {\n      throw new Error('NGW `resourceId` is not defined');\n    }\n  }\n\n  async addLayer(options: NgwWebmapAdapterOptions): Promise<any> {\n    this.options = { ...this.options, ...options };\n    this.layer = await this._getWebMapLayerItem();\n    return this.layer;\n  }\n\n  removeLayer(): void {\n    const mapAdapter = this.options.webMap.mapAdapter;\n\n    this.getDependLayers().forEach((x) => {\n      if (!('layer' in x)) return;\n      // @ts-ignore Update x interface\n      mapAdapter.removeLayer(x.layer.layer);\n    });\n    // delete this.options;\n    delete this.layer;\n    delete this.response;\n    delete this._webmapLayersIds;\n  }\n\n  showLayer(): void {\n    if (this.layer && this.layer.properties) {\n      this.layer.properties.property('visibility').set(true);\n    }\n  }\n\n  hideLayer(): void {\n    if (this.layer && this.layer.properties) {\n      this.layer.properties.property('visibility').set(false);\n    }\n  }\n\n  getExtent(): LngLatBoundsArray | undefined {\n    const webmap = this.response && this.response.webmap;\n    if (webmap) {\n      return getNgwWebmapExtent(webmap);\n    }\n  }\n\n  getDependLayers(): Array<NgwWebmapItem> {\n    return (this.layer && this.layer.tree.getDescendants()) || [];\n  }\n\n  getBookmarksResourceId(): number | undefined {\n    const webmap = this.response && this.response.webmap;\n    if (webmap) {\n      return webmap.bookmark_resource.id;\n    }\n  }\n\n  fetchBookmarks(): CancelablePromise<BookmarkItem[]> {\n    const bookmarkResId = this.getBookmarksResourceId();\n    const connector = this.options.connector;\n    if (bookmarkResId) {\n      return connector.getResourceOrFail(bookmarkResId).then((item) => {\n        const labelField = item.feature_layer?.fields.find(\n          (x) => x.label_field,\n        );\n        const keyname = labelField && labelField.keyname;\n        return fetchNgwLayerItems({\n          connector,\n          resourceId: bookmarkResId,\n          geom: false,\n          fields: keyname ? [keyname] : undefined,\n        }).then((items) => {\n          const bookmarks: BookmarkItem[] = [];\n          for (const i of items) {\n            const bookmark = new BookmarkItem({\n              item: i,\n              resourceId: bookmarkResId,\n              labelField: keyname,\n              connector,\n            });\n            bookmarks.push(bookmark);\n          }\n          return bookmarks;\n        });\n      });\n    }\n    throw new Error(\n      'Webmap was not loaded correctly, it is impossible to extract bookmarks',\n    );\n  }\n\n  async getIdentificationIds(): Promise<number[]> {\n    const visibleLayers: number[] = [];\n    let ids = this._webmapLayersIds;\n    if (!ids) {\n      ids = await this._getWebMapIds();\n      this._webmapLayersIds = ids;\n    }\n    if (ids && ids.length) {\n      let deps = this.getDependLayers();\n      deps = deps.sort((a, b) => b.id - a.id);\n      deps.forEach((x) => {\n        const item = x.item;\n        const parentId = item.parentId;\n        if (parentId !== undefined && item.item_type === 'layer') {\n          const visible = x.properties.property('visibility');\n          const isVisible = visible.get() && !visible.isBlocked();\n          if (isVisible) {\n            visibleLayers.push(parentId);\n          }\n        }\n      });\n    }\n    return visibleLayers;\n  }\n\n  protected async _getWebMapLayerItem(): Promise<NgwWebmapItem | undefined> {\n    if (this.resourceId) {\n      const webmap = await this.getWebMapConfig(this.resourceId);\n      if (webmap && webmap.root_item) {\n        return new Promise<NgwWebmapItem>((resolve) => {\n          const options: ItemOptions = {};\n          if (this.options.connector && this.options.connector.options.auth) {\n            const headers = this.options.connector.getAuthorizationHeaders();\n            if (headers) {\n              options.headers = headers;\n            }\n          }\n          options.setViewDelay = this.options.setViewDelay;\n          options.order = this.options.order;\n          options.ratio = this.options.ratio;\n          options.crossOrigin = this.options.crossOrigin;\n          options.drawOrderEnabled = webmap.draw_order_enabled;\n          const layer = new this.NgwWebmapItem(\n            this.options.webMap,\n            webmap.root_item,\n            options,\n            this.options.connector,\n          );\n          layer.emitter.on('init', () => resolve(layer));\n        });\n      }\n    }\n  }\n\n  private async getWebMapConfig(id: number) {\n    const data = await this.options.connector.getResource(id);\n    if (data) {\n      this.response = data;\n      const webmap = data[\n        this.webmapClassName as keyof ResourceItem\n      ] as WebmapResource;\n      if (data.basemap_webmap && data.basemap_webmap.basemaps.length) {\n        this._setBasemaps(data.basemap_webmap);\n      } else if (this.options.defaultBasemap) {\n        const webMap = this.options.webMap;\n        webMap.addBaseLayer('OSM', {\n          id: 'webmap-default-baselayer',\n          name: 'OpenStreetMap',\n        });\n      }\n      if (webmap) {\n        this._extent = [\n          webmap.extent_left,\n          webmap.extent_bottom,\n          webmap.extent_right,\n          webmap.extent_top,\n        ];\n        this._updateItemsParams(webmap.root_item, this.options.webMap, data);\n        return webmap;\n      } else {\n        // TODO: resource is no webmap\n      }\n    }\n  }\n\n  private _setBasemaps(baseWebmap: BasemapWebmap) {\n    const webMap = this.options.webMap;\n    let enabledAlreadySet = false;\n    baseWebmap.basemaps.forEach((x) => {\n      createOnFirstShowNgwAdapter({\n        webMap,\n        connector: this.options.connector,\n        item: x,\n        adapterOptions: { crossOrigin: this.options.crossOrigin },\n      }).then((adapter) => {\n        // to avoid set many basemaps on init\n        const visibility = enabledAlreadySet ? false : x.enabled;\n        webMap.addBaseLayer(adapter, {\n          name: x.display_name,\n          opacity: x.opacity,\n          visibility,\n        });\n        if (x.enabled) {\n          enabledAlreadySet = true;\n        }\n      });\n    });\n  }\n\n  private _updateItemsParams(\n    item: TreeGroup | TreeLayer,\n    webMap: WebMap,\n    data: ResourceItem,\n  ) {\n    if (item) {\n      if (item.item_type === 'group' || item.item_type === 'root') {\n        if (item.children) {\n          item.children = item.children.map((x) =>\n            this._updateItemsParams(x, webMap, data),\n          );\n        }\n        if (item.item_type === 'root') {\n          item.display_name = data.resource.display_name;\n        }\n      } else if (item.item_type === 'layer') {\n        const url = fixUrlStr(\n          this.options.connector.options.baseUrl +\n            '/api/component/render/image',\n        );\n        const resourceId = item.layer_style_id;\n        item.url = url;\n        item.resourceId = resourceId;\n        item.updateWmsParams = (params) =>\n          updateImageParams(params, resourceId);\n        const adapter = item.layer_adapter.toUpperCase() as NgwLayerAdapterType;\n        const layerAdapterOptions = getLayerAdapterOptions(\n          {\n            adapter,\n            resource: resourceId,\n          },\n          webMap,\n          this.options.connector.options.baseUrl || '',\n        ) as RasterAdapterOptions;\n        item = {\n          ...item,\n          ...layerAdapterOptions,\n        };\n      }\n    }\n    return item;\n  }\n\n  private async _getWebMapIds(): Promise<number[] | undefined> {\n    const webMapItem = this.layer;\n    if (webMapItem && webMapItem.item.item_type === 'root') {\n      const layers = webMapItem.tree.getDescendants();\n      const promises: Array<CancelablePromise<any>> = [];\n      layers.forEach((x: NgwWebmapItem) => {\n        const item = x.item;\n        if (item.item_type === 'layer') {\n          const id = item.layer_style_id;\n          const promise = this.options.connector.getResource(id).then((y) => {\n            if (y) {\n              const parentId = Number(y.resource.parent.id);\n              item.parentId = parentId;\n              return parentId;\n            }\n          });\n          promises.push(promise);\n        }\n      });\n      const ids = await Promise.all(promises);\n      return ids.filter((x) => x !== undefined);\n      // const id = item['layer_style_id']\n    }\n  }\n}\n","import { Type } from '@nextgis/webmap';\nimport { GetClassAdapterOptions } from '../interfaces';\nimport { NgwWebmapLayerAdapter as NWLayerAdapter } from '../NgwWebmapLayerAdapter';\nimport { resourceIdFromLayerOptions } from '../utils/resourceIdFromLayerOptions';\n\nexport async function createWebMapAdapter({\n  layerOptions: options,\n  webMap,\n  connector,\n}: GetClassAdapterOptions): Promise<Type<NWLayerAdapter>> {\n  const resourceId = await resourceIdFromLayerOptions(options, connector);\n  return class NgwWebmapLayerAdapter extends NWLayerAdapter {\n    constructor(map: any) {\n      super(map, {\n        url: '',\n        webMap,\n        resourceId,\n        connector,\n      });\n    }\n  };\n}\n","import NgwConnector, { ResourceItem } from '@nextgis/ngw-connector';\nimport { LngLatBoundsArray } from '@nextgis/webmap';\nimport { fetchNgwResourceExtent } from './utils/fetchNgwExtent';\nexport class NgwResource {\n  item!: ResourceItem;\n  connector!: NgwConnector;\n\n  protected _extent?: LngLatBoundsArray;\n\n  async getExtent(): Promise<LngLatBoundsArray | undefined> {\n    if (this._extent) {\n      return this._extent;\n    }\n    if (this.item) {\n      this._extent = await fetchNgwResourceExtent(\n        this.item,\n        this.connector,\n      ).then();\n      return this._extent;\n    }\n  }\n}\n","import { Type, MainLayerAdapter, TileAdapterOptions } from '@nextgis/webmap';\nimport { QmsKit } from '@nextgis/qms-kit';\nimport { GetClassAdapterOptions } from '../interfaces';\n\nexport async function createBasemapLayerAdapter({\n  webMap,\n  item,\n}: GetClassAdapterOptions): Promise<Type<MainLayerAdapter> | undefined> {\n  if (item.basemap_layer) {\n    const qms = item.basemap_layer.qms;\n    const url = item.basemap_layer.url;\n    if (qms) {\n      const qms_ = JSON.parse(qms);\n      const adapter = Promise.resolve(\n        QmsKit.utils.createQmsAdapter(webMap, undefined, {\n          qms: qms_,\n          baselayer: true,\n        }),\n      );\n      return adapter;\n    } else if (url) {\n      const TileAdapter = webMap.mapAdapter.layerAdapters.TILE as Type<\n        MainLayerAdapter<any, any, TileAdapterOptions>\n      >;\n      if (TileAdapter) {\n        class BasemapTileAdapter extends TileAdapter {\n          async addLayer(opt: TileAdapterOptions) {\n            return super.addLayer({ ...opt, url });\n          }\n        }\n        return BasemapTileAdapter;\n      }\n    }\n  }\n}\n","import NgwConnector, {\n  ResourceCls,\n  ResourceItem,\n} from '@nextgis/ngw-connector';\nimport { WebMap } from '@nextgis/webmap';\nimport { Type, applyMixins } from '@nextgis/utils';\n\nimport {\n  ResourceAdapter,\n  NgwLayerOptions,\n  GetClassAdapterCallback,\n  GetClassAdapterByType,\n  GetClassAdapter,\n  GetClassAdapterOptions,\n  ClassAdapter,\n  ResourceNgwLayerOptions,\n} from '../interfaces';\n\nimport { createGeoJsonAdapter } from './createGeoJsonAdapter';\nimport { createRasterAdapter } from './createRasterAdapter';\nimport { createWebMapAdapter } from './createNgwWebmapAdapter';\nimport { NgwResource } from '../NgwResource';\nimport { resourceIdFromLayerOptions } from '../utils/resourceIdFromLayerOptions';\nimport { createBasemapLayerAdapter } from './createBasemapLayerAdapter';\n\nexport const classAdapters: Record<string, GetClassAdapter> = {};\n\nconst supportCls: ResourceCls[] = [\n  'mapserver_style',\n  'qgis_vector_style',\n  'qgis_raster_style',\n  'wmsserver_service',\n  'raster_style',\n  'basemap_layer',\n  'vector_layer',\n  'raster_layer',\n  'webmap',\n  // in tms branch\n  'tmsclient_layer',\n];\n\nasync function createAdapterFromFirstStyle({\n  layerOptions,\n  webMap,\n  connector,\n  item,\n}: GetClassAdapterOptions) {\n  const parent = item.resource.id;\n  const childrenStyles = await connector.get('resource.collection', null, {\n    parent,\n  });\n  const firstStyle = childrenStyles && childrenStyles[0];\n  if (firstStyle) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return createAsyncAdapter(\n      { ...layerOptions, resource: firstStyle.resource.id },\n      webMap,\n      connector,\n    );\n  }\n}\n\nexport async function createAsyncAdapter(\n  options: NgwLayerOptions,\n  webMap: WebMap,\n  connector: NgwConnector,\n): Promise<Type<ResourceAdapter> | undefined> {\n  let adapter: ClassAdapter | undefined;\n  let item: ResourceItem | undefined;\n  const adapterType = options.adapter;\n  const resourceId = await resourceIdFromLayerOptions(options, connector);\n  if (resourceId) {\n    const resourceOptions = options as ResourceNgwLayerOptions;\n    const itemFromResOpt = resourceOptions.resource as ResourceItem;\n    if (\n      itemFromResOpt &&\n      itemFromResOpt.resource &&\n      itemFromResOpt.resource.id !== undefined\n    ) {\n      item = itemFromResOpt;\n    } else {\n      item = await connector.getResource(resourceId);\n    }\n    if (item) {\n      const cls = item.resource.cls;\n      const layerOptions: NgwLayerOptions = {\n        ...options,\n        resource: resourceId,\n      };\n\n      const adapterOptions: GetClassAdapterOptions = {\n        layerOptions,\n        webMap,\n        connector,\n        item,\n      };\n\n      if (supportCls.indexOf(cls) !== -1) {\n        if (cls === 'webmap') {\n          adapter = createWebMapAdapter(adapterOptions);\n        } else if (cls === 'vector_layer') {\n          if (adapterType !== undefined && adapterType !== 'GEOJSON') {\n            if (adapterType === 'MVT') {\n              adapter = createRasterAdapter(adapterOptions);\n            } else {\n              return createAdapterFromFirstStyle(adapterOptions);\n            }\n          } else {\n            adapter = createGeoJsonAdapter(adapterOptions);\n          }\n        } else if (cls === 'raster_layer') {\n          return createAdapterFromFirstStyle(adapterOptions);\n        } else if (cls === 'basemap_layer') {\n          adapter = createBasemapLayerAdapter(adapterOptions);\n        } else {\n          if (adapterType === 'GEOJSON') {\n            const parentItem = await connector.getResource(\n              item.resource.parent.id,\n            );\n            if (parentItem) {\n              const parentOptions: NgwLayerOptions = {\n                ...options,\n                resource: item.resource.parent.id,\n              };\n              adapter = createGeoJsonAdapter({\n                ...adapterOptions,\n                item: parentItem,\n                layerOptions: parentOptions,\n              });\n            }\n          } else {\n            adapter = createRasterAdapter(adapterOptions);\n          }\n        }\n      } else if (classAdapters[cls]) {\n        const getClassAdapter = classAdapters[cls];\n        let classAdapter: GetClassAdapterCallback | undefined;\n        if (adapterType && typeof classAdapter !== 'function') {\n          classAdapter = (getClassAdapter as GetClassAdapterByType)[\n            adapterType\n          ];\n        } else {\n          classAdapter = getClassAdapter as GetClassAdapterCallback;\n        }\n        if (classAdapter) {\n          adapter = classAdapter(adapterOptions);\n        }\n      } else {\n        throw `Resource class '${cls}' not yet supported.`;\n      }\n    } else {\n      throw 'Resource item is not found';\n    }\n  }\n\n  if (adapter) {\n    return adapter.then((x) => {\n      if (x) {\n        const resourceAdapter = x as Type<ResourceAdapter>;\n        if (item) {\n          resourceAdapter.prototype.item = item;\n          resourceAdapter.prototype.resourceId = item.resource.id;\n          resourceAdapter.prototype.connector = connector;\n        }\n\n        applyMixins(resourceAdapter, [NgwResource], { replace: false });\n        return resourceAdapter;\n      }\n    });\n  }\n}\n","import NgwConnector from '@nextgis/ngw-connector';\nimport {\n  WebMap,\n  StarterKit,\n  Type,\n  LayerAdapterCreators,\n} from '@nextgis/webmap';\n\nimport { extendNgwWebmapLayerAdapter } from './utils/utils';\nimport { NgwWebmapLayerAdapter } from './NgwWebmapLayerAdapter';\nimport { classAdapters } from './adapters/createAsyncAdapter';\n\nimport {\n  NgwKitOptions,\n  NgwWebmapAdapterOptions,\n  GetClassAdapter,\n} from './interfaces';\n\nexport class NgwKit implements StarterKit {\n  url: string;\n  connector: NgwConnector;\n  webMap?: WebMap;\n\n  constructor(public options: NgwKitOptions) {\n    if (this.options.connector) {\n      this.url = this.options.connector.options.baseUrl || '';\n      this.connector = this.options.connector;\n    } else {\n      if (this.options.baseUrl) {\n        this.url = this.options.baseUrl;\n      } else {\n        throw new Error('url is not defined');\n      }\n      this.connector = new NgwConnector({\n        baseUrl: this.url,\n        auth: this.options.auth,\n      });\n    }\n  }\n\n  static addClassAdapters(cls: string, adapter: GetClassAdapter): void {\n    classAdapters[cls] = adapter;\n  }\n\n  async onLoadSync(webMap: WebMap): Promise<NgwWebmapLayerAdapter | undefined> {\n    if (this.options.resourceId && this.url) {\n      // TODO: resources from array\n      const resourceIds = [this.options.resourceId];\n\n      if (resourceIds.length) {\n        for (const r of resourceIds) {\n          const options: Partial<NgwWebmapAdapterOptions> = {\n            resourceId: r,\n            connector: this.connector,\n            webMap,\n          };\n          const layer = (await webMap.addLayer(NgwWebmapLayerAdapter, {\n            visibility: true,\n            fit: true,\n            pixelRadius: this.options.pixelRadius,\n            ...options,\n          })) as NgwWebmapLayerAdapter;\n          return layer;\n        }\n      }\n    }\n  }\n\n  getLayerAdapters(): Promise<LayerAdapterCreators[]> {\n    return Promise.resolve([this._getLayerAdapter()]);\n  }\n\n  private _getLayerAdapter() {\n    return {\n      name: 'WEBMAP',\n      createAdapter: (webmap: WebMap) =>\n        Promise.resolve(this._createAdapter(webmap)),\n    };\n  }\n\n  private _createAdapter(webMap: WebMap): Type<NgwWebmapLayerAdapter> {\n    const connector = this.connector;\n    const baseUrl = this.url;\n    return extendNgwWebmapLayerAdapter({\n      webMap,\n      connector,\n      baseUrl,\n    });\n  }\n}\n","import { fetchNgwLayerItem, IdentifyItemOptions } from '.';\nimport CancelablePromise from '@nextgis/cancelable-promise';\n\nimport type { NgwFeatureItemResponse } from '.';\nimport type { GeoJsonObject, Geometry, Feature } from 'geojson';\nimport type {\n  FeatureItemExtensions,\n  FeatureLayerFields,\n  FeatureResource,\n  LayerFeature,\n  VectorLayerResourceItem,\n} from '@nextgis/ngw-connector';\nimport type NgwConnector from '@nextgis/ngw-connector';\n\nexport class IdentifyItem<F = FeatureLayerFields, G extends Geometry = Geometry>\n  implements LayerFeature {\n  readonly id: number;\n  readonly label: string;\n  readonly layerId: number;\n  readonly parent: string;\n  readonly fields: FeatureLayerFields;\n  geom?: GeoJsonObject;\n  extensions?: FeatureItemExtensions;\n\n  private connector: NgwConnector;\n  private _item?: NgwFeatureItemResponse<F, G>;\n  private _geojson?: Feature<G, F>;\n  private _resource?: VectorLayerResourceItem;\n\n  constructor(options: IdentifyItemOptions) {\n    const f = options.feature;\n    this.id = f.id;\n    this.label = f.label;\n    this.layerId = f.layerId;\n    this.parent = f.parent;\n    this.fields = f.fields;\n    this.geom = f.geom;\n    this.connector = options.connector;\n  }\n\n  identify(): CancelablePromise<NgwFeatureItemResponse<F, G>> {\n    if (this._item) {\n      return CancelablePromise.resolve(this._item);\n    }\n    return fetchNgwLayerItem<G, F>({\n      connector: this.connector,\n      featureId: this.id,\n      resourceId: this.layerId,\n      fields: null,\n      extensions: ['attachment', 'description'],\n    }).then((resp) => {\n      this._item = resp;\n      this.geom = resp.geom;\n      this.extensions = resp.extensions;\n      return resp;\n    });\n  }\n\n  resource(): CancelablePromise<FeatureResource> {\n    if (this._resource) {\n      return CancelablePromise.resolve(this._resource.feature_layer);\n    }\n    return this.connector.getResource(this.layerId).then((resp) => {\n      this._resource = resp as VectorLayerResourceItem;\n      return this._resource.feature_layer;\n    });\n  }\n\n  geojson(): CancelablePromise<Feature<G, F>> {\n    if (this._geojson) {\n      return CancelablePromise.resolve(this._geojson);\n    }\n    return this.identify().then((resp) => {\n      return resp.toGeojson().then((geojson) => {\n        this._geojson = geojson;\n        return geojson;\n      });\n    });\n  }\n}\n","import CancelablePromise from '@nextgis/cancelable-promise';\nimport {\n  JsonMap,\n  degrees2meters,\n  getCirclePolygonCoordinates,\n  deprecatedMapClick,\n} from '@nextgis/utils';\nimport { createGeoJsonFeature } from './featureLayerUtils';\nimport { fetchNgwLayerFeature } from './fetchNgwLayerFeature';\nimport { fetchNgwLayerItem } from './fetchNgwLayerItem';\n\nimport type { Geometry, Feature, GeoJsonProperties } from 'geojson';\nimport type { MapClickEvent } from '@nextgis/webmap';\nimport type {\n  LayerFeature,\n  FeatureLayersIdentify,\n  FeatureLayerFields,\n} from '@nextgis/ngw-connector';\nimport type {\n  GetIdentifyGeoJsonOptions,\n  NgwIdentify,\n  NgwIdentifyItem,\n  IdentifyRequestOptions,\n  FeatureIdentifyRequestOptions,\n  NgwFeatureItemResponse,\n  IdentifyItemOptions,\n} from '../interfaces';\nimport { IdentifyItem } from '../IdentifyItem';\n\nexport function getIdentifyItems(\n  identify: NgwIdentify,\n  multiple = false,\n): NgwIdentifyItem[] {\n  let params:\n    | { resourceId: number; featureId: number; feature: LayerFeature }\n    | undefined;\n  const resources = [];\n  const paramsList = [];\n  for (const l in identify) {\n    const id = Number(l);\n    if (!isNaN(id)) {\n      resources.push(id);\n    }\n  }\n  const sortingArr = identify.resources;\n  if (sortingArr) {\n    resources.sort((a, b) => {\n      return sortingArr.indexOf(a) - sortingArr.indexOf(b);\n    });\n  }\n  for (let fry = 0; fry < resources.length; fry++) {\n    const l = resources[fry];\n    const identifyItem = identify[l];\n    if ('features' in identifyItem) {\n      const layerFeatures = identifyItem.features;\n      const resourceId = Number(l);\n      const feature: LayerFeature | undefined = layerFeatures[0];\n      if (feature) {\n        params = {\n          featureId: feature.id,\n          resourceId,\n          feature,\n        };\n        paramsList.push(params);\n        if (!multiple) {\n          break;\n        }\n      }\n    }\n  }\n  return paramsList;\n}\n\nexport function fetchIdentifyGeoJson<\n  G extends Geometry = Geometry,\n  P extends JsonMap = JsonMap\n>(\n  options: GetIdentifyGeoJsonOptions,\n): CancelablePromise<Feature<G, P> | undefined> {\n  const { connector, identify } = options;\n  for (const l in identify) {\n    const id = Number(l);\n    if (!isNaN(id)) {\n      const item = identify[l];\n      if ('features' in item) {\n        const withGeom = item.features.find((x) => x.geom);\n\n        if (withGeom && withGeom.geom) {\n          const geom = withGeom.geom as Geometry;\n          return CancelablePromise.resolve(\n            createGeoJsonFeature({\n              ...withGeom,\n              geom,\n            }),\n          );\n        }\n      }\n    }\n  }\n\n  const params = getIdentifyItems(identify);\n  if (params && params.length) {\n    return fetchNgwLayerFeature({ connector, ...params[0] });\n  }\n  return CancelablePromise.resolve(undefined);\n}\n\nexport function fetchIdentifyItem<\n  G extends Geometry = Geometry,\n  P extends GeoJsonProperties = GeoJsonProperties\n>(\n  options: GetIdentifyGeoJsonOptions,\n): CancelablePromise<NgwFeatureItemResponse<P, G> | undefined> {\n  const { connector, identify } = options;\n\n  const params = getIdentifyItems(identify);\n  if (params && params.length) {\n    return fetchNgwLayerItem({\n      connector,\n      ...options.requestOptions,\n      ...params[0],\n    });\n  }\n  return CancelablePromise.resolve(undefined);\n}\n\n/**\n * @deprecated use {@link fetchIdentifyGeoJson} instead\n */\nexport function getIdentifyGeoJson<\n  G extends Geometry = Geometry,\n  P extends JsonMap = JsonMap\n>(\n  options: GetIdentifyGeoJsonOptions,\n): CancelablePromise<Feature<G, P> | undefined> {\n  return fetchIdentifyGeoJson(options);\n}\n\nexport function sendIdentifyRequest(\n  ev: MapClickEvent,\n  options: IdentifyRequestOptions,\n  // webMap: WebMap\n): CancelablePromise<FeatureLayersIdentify> {\n  deprecatedMapClick(ev);\n  const [lng, lat] = ev.lngLat;\n\n  let geom: number[][] = [];\n\n  if (options.geom) {\n    const polygon =\n      options.geom.type === 'Feature'\n        ? options.geom.geometry\n        : options.geom.type === 'Polygon'\n        ? options.geom\n        : false;\n    if (polygon) {\n      geom = polygon.coordinates[0];\n    }\n  }\n  if (!geom.length) {\n    geom = getCirclePolygonCoordinates(lng, lat, options.radius);\n  }\n\n  // create wkt string\n  const polygon: string[] = [];\n\n  geom.forEach(([lng, lat]) => {\n    const [x, y] = degrees2meters(lng, lat);\n    polygon.push(x + ' ' + y);\n  });\n\n  const wkt = `POLYGON((${polygon.join(', ')}))`;\n\n  const layers: number[] = options.layers;\n\n  const data: FeatureIdentifyRequestOptions = {\n    geom: wkt,\n    srs: 3857,\n    layers,\n  };\n\n  return options.connector.post('feature_layer.identify', { data });\n}\n\nexport function createIdentifyItem<\n  F = FeatureLayerFields,\n  G extends Geometry = Geometry\n>(opt: IdentifyItemOptions): IdentifyItem {\n  return new IdentifyItem<F, G>(opt);\n}\n","import NgwConnector from '@nextgis/ngw-connector';\nimport { CompanyLogoOptions } from '../interfaces';\n\nexport async function getCompanyLogo(\n  connector: NgwConnector,\n  options?: CompanyLogoOptions,\n): Promise<HTMLElement | undefined> {\n  const settings = await connector.get('pyramid.settings', null, {\n    component: 'pyramid',\n  });\n  if (settings && settings.company_logo && settings.company_logo.enabled) {\n    const anchor = document.createElement('a');\n    anchor.style.position = 'absolute';\n    anchor.style.bottom = '0';\n    anchor.style.right = '0';\n    anchor.style.padding = options?.padding ?? '10px';\n    anchor.className = 'ngw-map-logo';\n    if (options && options.cssClass) {\n      anchor.className += ' ' + options.cssClass;\n    }\n    const img = new Image();\n    img.style.maxHeight = '100px';\n    img.style.maxWidth = '100px';\n    img.src = '';\n    try {\n      const src = await connector.get('pyramid.company_logo', {\n        responseType: 'blob',\n      });\n      const urlCreator = window.URL || window.webkitURL;\n      const imageUrl = urlCreator.createObjectURL(src);\n      img.src = imageUrl;\n    } catch (er) {\n      console.log(er);\n    }\n\n    if (\n      settings.company_logo.link !== null &&\n      settings.company_logo.link.trim() !== ''\n    ) {\n      anchor.href = settings.company_logo.link;\n      anchor.target = '_blank';\n      if (settings.company_logo.link.search(/:\\/\\/nextgis/) !== -1) {\n        img.alt = 'Get your own Web GIS at nextgis.com';\n      }\n    }\n    anchor.appendChild(img);\n    return anchor;\n  }\n}\n","import type {\n  NgwLayerOptionsAdditional,\n  NgwLayerOptions,\n} from '@nextgis/ngw-kit';\nimport type { NgwResourceDefinition } from '../interfaces';\n\nexport function appendNgwResources(\n  options: NgwLayerOptions[],\n  resource?: NgwResourceDefinition,\n  defOptions?: NgwLayerOptionsAdditional,\n  overwriteOptions?: NgwLayerOptionsAdditional,\n): void {\n  if (typeof resource === 'number' || typeof resource === 'string') {\n    resource = Number(resource);\n    options.push({\n      ...defOptions,\n      resource,\n    });\n  } else if (Array.isArray(resource)) {\n    const [resourceId, id] = resource;\n    options.push({\n      ...defOptions,\n      resource: resourceId,\n      id,\n      ...overwriteOptions,\n    });\n  } else if (typeof resource === 'object') {\n    options.push({ ...defOptions, ...resource, ...overwriteOptions });\n  }\n}\n","import { deepmerge } from '@nextgis/utils';\nimport { StarterKit, MapOptions } from '@nextgis/webmap';\nimport NgwConnector from '@nextgis/ngw-connector';\nimport { QmsKit } from '@nextgis/qms-kit';\nimport { NgwKit } from '@nextgis/ngw-kit';\n\nimport { NgwMapOptions } from '../interfaces';\n\nexport const OPTIONS: NgwMapOptions = {\n  target: 'map',\n  baseUrl: '',\n  whitlabel: false,\n  controls: ['ZOOM', 'ATTRIBUTION'],\n  controlsOptions: {\n    ZOOM: { position: 'top-left' },\n    ATTRIBUTION: {\n      position: 'bottom-right',\n      customAttribution: [\n        '<a href=\"https://nextgis.com\" target=\"_blank\">©NextGIS</a>',\n      ],\n    },\n  },\n  pixelRadius: 10,\n};\n\nexport function prepareWebMapOptions(options: NgwMapOptions): MapOptions {\n  const kits: StarterKit[] = [new QmsKit()];\n  if (options.starterKits) {\n    options.starterKits.forEach((x) => {\n      kits.push(x);\n    });\n  }\n\n  if (!options.connector) {\n    options.connector = new NgwConnector({\n      baseUrl: options.baseUrl || '',\n      auth: options.auth,\n    });\n  } else if (options.connector) {\n    options.baseUrl = options.connector.options.baseUrl;\n  }\n  options = deepmerge(OPTIONS, options);\n\n  if (!options.center && !options.bounds) {\n    options.bounds = [-179, -90, 180, 90];\n    options.maxBounds = options.bounds;\n  }\n\n  if (options.connector) {\n    kits.push(\n      new NgwKit({\n        connector: options.connector,\n        auth: options.auth,\n      }),\n    );\n  }\n  options = {\n    ...options,\n    starterKits: kits,\n    create: false,\n  };\n  return options;\n}\n","import StrictEventEmitter from 'strict-event-emitter-types';\nimport { EventEmitter } from 'events';\nimport CancelablePromise from '@nextgis/cancelable-promise';\nimport { defined, isObject } from '@nextgis/utils';\nimport { WebMap } from '@nextgis/webmap';\nimport NgwConnector from '@nextgis/ngw-connector';\n\nimport {\n  addNgwLayer,\n  fetchNgwLayerItem,\n  fetchNgwLayerItems,\n  fetchNgwLayerFeature,\n  fetchNgwLayerFeatureCollection,\n  fetchIdentifyGeoJson,\n  fetchNgwResourceExtent,\n  sendIdentifyRequest,\n  getCompanyLogo,\n  fetchIdentifyItem,\n  getIdentifyItems,\n  createIdentifyItem,\n} from '@nextgis/ngw-kit';\nimport { deprecatedWarn } from '@nextgis/utils';\nimport { getIcon } from '@nextgis/icons';\n\nimport { appendNgwResources } from './utils/appendNgwResources';\nimport { prepareWebMapOptions } from './utils/prepareWebMapOptions';\n\nimport type { JsonMap } from '@nextgis/utils';\nimport type {\n  ResourceItem,\n  FeatureLayersIdentify,\n  FeatureItem,\n  FeatureLayersIdentifyItems,\n  LayerFeature,\n  FeatureLayerFields,\n} from '@nextgis/ngw-connector';\nimport type {\n  ControlPosition,\n  MapControls,\n  WebMapEvents,\n  LayerDef,\n  MapClickEvent,\n  LayerAdapter,\n  FilterOptions,\n  OnLayerClickOptions,\n  FitOptions,\n} from '@nextgis/webmap';\nimport type {\n  ResourceAdapter,\n  NgwWebmapItem,\n  NgwIdentify,\n  NgwFeatureItemResponse,\n  NgwFeatureRequestOptions,\n} from '@nextgis/ngw-kit';\nimport type { PropertiesFilter } from '@nextgis/properties-filter';\nimport type { QmsAdapterOptions } from '@nextgis/qms-kit';\nimport type {\n  NgwLayerOptions,\n  NgwLayerOptionsAdditional,\n  KeynamedNgwLayerOptions,\n  ResourceIdNgwLayerOptions,\n} from '@nextgis/ngw-kit';\nimport type {\n  Geometry,\n  Feature,\n  FeatureCollection,\n  GeoJsonProperties,\n} from 'geojson';\nimport type { NgwMapOptions, NgwMapEvents, NgwLayers } from './interfaces';\n\ntype PromiseGroup = 'select' | 'identify';\n\n/**\n * Base class containing the logic of interaction WebMap with NextGIS services.\n *\n * @example\n * ```javascript\n * import { NgwMap } from '@nextgis/ngw-map';\n * import MapAdapter from '@nextgis/leaflet-map-adapter';\n * // styles are not included in the leaflet-map-adapter\n * import 'leaflet/dist/leaflet.css';\n *\n * const ngwMap = new NgwMap({\n *   mapAdapter: new MapAdapter(),\n *   target: 'map',\n *   qmsId: 448,\n *   baseUrl: 'https://demo.nextgis.com',\n *   webmapId: 3985\n * });\n * ```\n * @public\n */\nexport class NgwMap<\n  M = unknown,\n  L = unknown,\n  C = unknown,\n  O extends NgwMapOptions<C> = NgwMapOptions<C>\n> extends WebMap<M, L, C, NgwMapEvents, O> {\n  static getIcon = getIcon;\n\n  readonly emitter: StrictEventEmitter<\n    EventEmitter,\n    NgwMapEvents\n  > = new EventEmitter();\n  connector!: NgwConnector;\n\n  protected _ngwLayers: NgwLayers = {};\n  private $$selectFromNgwRaster?: (ev: MapClickEvent) => void;\n  private $$selectFromNgwVector?: (ev: OnLayerClickOptions) => void;\n  private _promises: Record<PromiseGroup, CancelablePromise[]> = {\n    select: [],\n    identify: [],\n  };\n\n  constructor(options: O) {\n    super(prepareWebMapOptions(options) as O);\n    if (options.connector) {\n      this.connector = options.connector;\n    }\n    this._createWebMap().then(() => {\n      const container = this.getContainer();\n      if (container) {\n        container.classList.add('ngw-map-container');\n      }\n      if (this.options.whitlabel) {\n        this._whiteLabel();\n      }\n    });\n  }\n\n  /**\n   * Organized addition to the map design and controls elements,\n   * calling `control.onAdd(this.webMap.mapAdapter)`\n   * @param control - object with onAdd and onRemove methods\n   *                or a string value indicating the name of the control installed in the map adapter\n   * @param position - position relative to the map angles\n   * @param options - initialization parameters if the control is set as a string value\n   *\n   * @example\n   * ```javascript\n   * ngwMap.addControl(new CustomControl(), 'bottom-left');\n   * ngwMap.addControl('ZOOM', 'top-right')\n   * ```\n   */\n  async addControl<K extends keyof MapControls>(\n    controlDef: K | C,\n    position: ControlPosition,\n    options?: MapControls[K],\n  ): Promise<any> {\n    await this.onLoad('controls:create');\n    return super.addControl(controlDef, position, options);\n  }\n\n  /**\n   * Add any (style, vector, webmap) NGW layer by resource id.\n   * @param options - set layer identification parameters and render method.\n   *\n   * @example\n   * ```javascript\n   * // add raster layer resourceId is the style of 4004 layer\n   * ngwMap.addNgwLayer({ resourceId: 4005 });\n   * // add vector data from layer GEOJSON source\n   * ngwMap.addNgwLayer({\n   *   resourceId: 4038,\n   *   adapter: 'GEOJSON',\n   *   adapterOptions: { paint: { color: 'red' } }\n   * });\n   * ```\n   */\n  async addNgwLayer(\n    options: NgwLayerOptions,\n  ): Promise<ResourceAdapter | undefined> {\n    await this.onMapLoad();\n    // @ts-ignore for backward compatibility\n    const keyname = (options as KeynamedNgwLayerOptions).keyname;\n    // @ts-ignore for backward compatibility\n    const resourceId = (options as ResourceIdNgwLayerOptions).resourceId;\n\n    if (keyname || resourceId !== undefined) {\n      deprecatedWarn(\n        'set `resource` options instead of `keyname` or `resourceId`',\n      );\n    }\n\n    const resource = options.resource;\n    if (!keyname && !resourceId && !resource) {\n      throw new Error(\n        'resource, resourceId or keyname is required parameter to add NGW layer',\n      );\n    }\n    if (this.options.baseUrl || this.options.baseUrl === '') {\n      try {\n        if (defined(this.options.setViewDelay)) {\n          options.adapterOptions = options.adapterOptions || {};\n          if (!defined(options.adapterOptions.setViewDelay)) {\n            options.adapterOptions.setViewDelay = this.options.setViewDelay;\n          }\n        }\n        const adapter = addNgwLayer(options, this, this.connector);\n\n        const layer = (await this.addLayer(adapter, {\n          visibility: true,\n          // TODO: do not merge options, use only `adapterOptions`\n          ...options,\n          ...options.adapterOptions,\n        })) as ResourceAdapter;\n        const id = layer && this.getLayerId(layer);\n        if (layer && id) {\n          this._ngwLayers[id] = { layer, resourceId: layer.resourceId };\n\n          if (layer.options.baselayer) {\n            const visibleLayerBaseLayer = this.getActiveBaseLayer();\n            if (visibleLayerBaseLayer) {\n              return layer;\n            }\n          }\n        }\n        return layer;\n      } catch (er) {\n        const resId =\n          isObject(resource) && 'id' in resource\n            ? resource.id\n            : keyname || resourceId || resource;\n        console.error(`Can't add NGW layer ${resId}.`, er);\n      }\n    }\n  }\n\n  /**\n   * Pans and zooms the map to the initial position specified in the options\n   */\n  fit(): void {\n    const { center, zoom, bounds } = this.options;\n    if (center) {\n      this.setCenter(center);\n      if (zoom) {\n        this.setZoom(zoom);\n      }\n    } else if (bounds) {\n      this.fitBounds(bounds);\n    }\n  }\n\n  fetchNgwLayerItem(options: {\n    resourceId: number;\n    featureId: number;\n  }): CancelablePromise<FeatureItem> {\n    return fetchNgwLayerItem({\n      connector: this.connector,\n      ...options,\n    });\n  }\n\n  fetchNgwLayerItems<\n    F extends FeatureLayerFields = FeatureLayerFields,\n    G extends Geometry = Geometry\n  >(\n    options: {\n      resourceId: number;\n      connector?: NgwConnector;\n      filters?: PropertiesFilter;\n    } & FilterOptions,\n  ): CancelablePromise<FeatureItem<F, G>[]> {\n    return fetchNgwLayerItems<G, F>({\n      connector: this.connector,\n      ...options,\n    });\n  }\n\n  fetchNgwLayerFeature<\n    G extends Geometry = Geometry,\n    P extends JsonMap = JsonMap\n  >(options: {\n    resourceId: number;\n    featureId: number;\n  }): CancelablePromise<Feature<G, P>> {\n    return fetchNgwLayerFeature<G, P>({\n      connector: this.connector,\n      ...options,\n    });\n  }\n\n  fetchNgwLayerFeatures<\n    G extends Geometry | null = Geometry,\n    P extends JsonMap = JsonMap\n  >(\n    options: {\n      resourceId: number;\n      connector?: NgwConnector;\n      filters?: PropertiesFilter;\n    } & FilterOptions,\n  ): CancelablePromise<FeatureCollection<G, P>> {\n    return fetchNgwLayerFeatureCollection({\n      connector: this.connector,\n      ...options,\n    });\n  }\n\n  fetchIdentifyItem<\n    G extends Geometry = Geometry,\n    P extends GeoJsonProperties = GeoJsonProperties\n  >(\n    identify: NgwIdentify,\n    requestOptions?: NgwFeatureRequestOptions,\n    // multiple = false\n  ): CancelablePromise<NgwFeatureItemResponse<P, G> | undefined> {\n    const promise = fetchIdentifyItem<G, P>({\n      identify,\n      connector: this.connector,\n      requestOptions,\n      // multiple,\n    });\n\n    this._addPromise('identify', promise);\n    return promise;\n  }\n\n  fetchIdentifyGeoJson(\n    identify: NgwIdentify,\n    multiple = false,\n  ): CancelablePromise<Feature | undefined> {\n    const promise = fetchIdentifyGeoJson({\n      identify,\n      connector: this.connector,\n      multiple,\n    });\n    if (promise && 'then' in promise) {\n      this._addPromise('identify', promise);\n      return promise;\n    } else {\n      return CancelablePromise.resolve(promise);\n    }\n  }\n\n  /**\n   * @deprecated use {@link fetchIdentifyGeoJson} instead\n   */\n  getIdentifyGeoJson(\n    identify: NgwIdentify,\n    multiple = false,\n  ): CancelablePromise<Feature | undefined> {\n    return this.fetchIdentifyGeoJson(identify, multiple);\n  }\n\n  async getNgwLayers(): Promise<NgwLayers> {\n    await this.onLoad();\n    return this._ngwLayers;\n  }\n\n  async getNgwLayerByResourceId(id: number): Promise<LayerAdapter | undefined> {\n    for (const n in this._ngwLayers) {\n      const mem = this._ngwLayers[n];\n      if (mem.resourceId === id) {\n        return mem && mem.layer;\n      } else if (mem.layer.getIdentificationIds) {\n        const ids = await mem.layer.getIdentificationIds();\n        if (ids && ids.some((x) => x === id)) {\n          return mem.layer;\n        }\n      }\n      if (mem.layer.getDependLayers) {\n        const dependLayers = mem.layer.getDependLayers() as NgwWebmapItem[];\n        const dependFit = dependLayers.find((x) => {\n          return x.item && x.item.parentId === id;\n        });\n        if (dependFit) {\n          return dependFit.layer;\n        }\n      }\n    }\n  }\n\n  /**\n   * Move map to layer. If the layer is NGW resource, extent will be received from the server\n   *\n   * @example\n   * ```javascript\n   * const ngwLayer = ngwMap.addNgwLayer({ id: 'ngw_layer_name', resourceId: 4005 });\n   * ngwMap.fitLayer(ngwLayer);\n   * ngwMap.fitLayer('ngw_layer_name');\n   * ```\n   */\n  async fitLayer(layerDef: LayerDef, options?: FitOptions): Promise<void> {\n    let id: string | undefined;\n    if (typeof layerDef === 'string' || typeof layerDef === 'number') {\n      id = String(id);\n    } else {\n      id = layerDef.id;\n    }\n    const ngwLayer = id && this._ngwLayers[id];\n    if (ngwLayer) {\n      if (ngwLayer.layer.getExtent) {\n        const extent = await ngwLayer.layer.getExtent();\n        if (extent) {\n          this.fitBounds(extent, options);\n        }\n      } else {\n        let item: ResourceItem | undefined;\n        if (ngwLayer.layer.item) {\n          item = ngwLayer.layer.item;\n        } else {\n          const resourceId = ngwLayer.resourceId;\n          item = await this.connector.getResource(resourceId);\n        }\n        if (item) {\n          fetchNgwResourceExtent(item, this.connector).then((extent) => {\n            if (extent) {\n              this.fitBounds(extent, options);\n            }\n          });\n        }\n      }\n    } else {\n      super.fitLayer(layerDef, options);\n    }\n  }\n\n  /** @deprecated use {@link NgwMap.fitLayer} instead */\n  async zoomToLayer(layerDef: string | ResourceAdapter): Promise<void> {\n    return this.fitLayer(layerDef);\n  }\n\n  onLoad(event: keyof NgwMapEvents = 'ngw-map:create'): Promise<this> {\n    return super.onLoad(event as keyof WebMapEvents);\n  }\n\n  removeLayer(layerDef: LayerDef): void {\n    const layer = this.getLayer(layerDef);\n    if (layer) {\n      const layerId = this.getLayerId(layer);\n      if (layerId) {\n        delete this._ngwLayers[layerId];\n      }\n      super.removeLayer(layer);\n    }\n  }\n\n  enableSelection(): void {\n    if (!this.$$selectFromNgwRaster) {\n      this.$$selectFromNgwRaster = (ev: MapClickEvent) => {\n        const count = this.emitter.listenerCount('ngw:select');\n        if (count) {\n          this._selectFromNgwRaster(ev);\n        }\n      };\n      this.$$selectFromNgwVector = (ev: OnLayerClickOptions) => {\n        if (this.emitter.listenerCount('ngw:select')) {\n          this._selectFromNgwVector(ev);\n        }\n      };\n      this.emitter.on('click', this.$$selectFromNgwRaster);\n      this.emitter.on('layer:click', this.$$selectFromNgwVector);\n    }\n  }\n\n  disableSelection(): void {\n    if (this.$$selectFromNgwRaster) {\n      this.emitter.removeListener('click', this.$$selectFromNgwRaster);\n      this.emitter.removeListener('click', this._selectFromNgwVector);\n      this.$$selectFromNgwRaster = undefined;\n      this.$$selectFromNgwVector = undefined;\n    }\n  }\n\n  /**\n   * @deprecated use {@link NgwMap.fetchNgwLayerItem} instead\n   */\n  getNgwLayerItem(options: {\n    resourceId: number;\n    featureId: number;\n  }): CancelablePromise<FeatureItem> {\n    return this.fetchNgwLayerItem(options);\n  }\n\n  /**\n   * @deprecated use {@link NgwMap.fetchNgwLayerItems} instead\n   */\n  getNgwLayerItems(\n    options: {\n      resourceId: number;\n      connector?: NgwConnector;\n      filters?: PropertiesFilter;\n    } & FilterOptions,\n  ): CancelablePromise<FeatureItem[]> {\n    return this.fetchNgwLayerItems(options);\n  }\n\n  /**\n   * @deprecated use {@link NgwMap.fetchNgwLayerFeature} instead\n   */\n  getNgwLayerFeature<\n    G extends Geometry = Geometry,\n    P extends JsonMap = JsonMap\n  >(options: {\n    resourceId: number;\n    featureId: number;\n  }): CancelablePromise<Feature<G, P>> {\n    return this.fetchNgwLayerFeature(options);\n  }\n\n  /**\n   * @deprecated use {@link NgwMap.fetchNgwLayerFeatures} instead\n   */\n  getNgwLayerFeatures<\n    G extends Geometry | null = Geometry,\n    P extends JsonMap = JsonMap\n  >(\n    options: {\n      resourceId: number;\n      connector?: NgwConnector;\n      filters?: PropertiesFilter;\n    } & FilterOptions,\n  ): CancelablePromise<FeatureCollection<G, P>> {\n    return this.fetchNgwLayerFeatures(options);\n  }\n\n  /** @deprecated use {@link NgwMap.cancelPromises} instead */\n  cancelPromise(...args: PromiseGroup[]): void {\n    this.cancelPromises(...args);\n  }\n\n  cancelPromises(...args: PromiseGroup[]): void {\n    if (!args.length) {\n      args = Object.keys(this._promises) as PromiseGroup[];\n    }\n    args.forEach((name) => {\n      const group = this._promises[name];\n      if (group) {\n        group.forEach((x) => x.cancel());\n        this._promises[name] = [];\n      }\n    });\n  }\n\n  private _addPromise(groupName: PromiseGroup, promise: CancelablePromise) {\n    const group = this._promises[groupName];\n    if (group && group.indexOf(promise) === -1) {\n      const removeFromGroup = () => {\n        const index = group.indexOf(promise);\n        if (index !== -1) {\n          group.splice(index, 1);\n        }\n      };\n      promise.then(removeFromGroup);\n      promise.catch(removeFromGroup);\n      group.push(promise);\n    }\n  }\n\n  private _isFitFromResource() {\n    const params = this._initMapState;\n    if (params.zoom && params.center) {\n      return false;\n    }\n    return true;\n  }\n\n  private async _createWebMap() {\n    await this.create();\n    if (this.options.qmsId) {\n      this.addQmsBaseLayer();\n    }\n    if (this.options.osm) {\n      this.addOsmBaseLayer();\n    }\n\n    const resources: NgwLayerOptions[] = [];\n    const layerFitAllowed = this._isFitFromResource();\n    if (this.options.webmapId) {\n      appendNgwResources(resources, this.options.webmapId, {\n        fit: layerFitAllowed,\n      });\n    }\n    if (this.options.resources && Array.isArray(this.options.resources)) {\n      this.options.resources.forEach((x) => {\n        const overwriteOptions = {} as NgwLayerOptionsAdditional;\n        if (!layerFitAllowed) {\n          overwriteOptions.fit = false;\n        }\n        appendNgwResources(resources, x, {}, overwriteOptions);\n      });\n    }\n    for (const r of resources) {\n      try {\n        await this.addNgwLayer(r);\n      } catch (er) {\n        console.log(er);\n      }\n    }\n    this._emitStatusEvent('ngw-map:create', this);\n    this.enableSelection();\n  }\n\n  private addOsmBaseLayer() {\n    this.addBaseLayer('OSM');\n  }\n\n  private addQmsBaseLayer() {\n    let qmsId: number;\n    let qmsLayerName: string | undefined;\n    if (Array.isArray(this.options.qmsId)) {\n      qmsId = this.options.qmsId[0];\n      qmsLayerName = this.options.qmsId[1];\n    } else {\n      qmsId = Number(this.options.qmsId);\n    }\n    const qmsLayerOptions: Partial<QmsAdapterOptions> = {\n      qmsId,\n    };\n    if (qmsLayerName) {\n      qmsLayerOptions.id = qmsLayerName;\n    }\n\n    this.addBaseLayer('QMS', qmsLayerOptions);\n  }\n\n  private _selectFromNgwVector(\n    ev: OnLayerClickOptions,\n  ): FeatureLayersIdentify | undefined {\n    const layer: ResourceAdapter = ev.layer as ResourceAdapter;\n    // item property means layer is NgwResource\n    const id = layer.item && layer.item.resource.id;\n    const feature = ev.feature;\n\n    if (id !== undefined && feature) {\n      const featureId = feature.id;\n      if (featureId) {\n        const identifyFeature: LayerFeature = {\n          id: Number(featureId),\n          fields: feature.properties,\n          label: `#${id}`,\n          layerId: Number(id),\n          parent: '',\n          geom: feature.geometry,\n        };\n        const items: FeatureLayersIdentifyItems = {\n          featureCount: 1,\n          features: [identifyFeature],\n        };\n        const identify: FeatureLayersIdentify = {\n          featureCount: 1,\n          [id]: items,\n        };\n        this._emitStatusEvent(\n          'ngw:select',\n          this._prepareToIdentify({\n            ...identify,\n            resources: [id],\n            sourceType: 'vector',\n          } as NgwIdentify),\n        );\n        return identify;\n      }\n    }\n  }\n\n  private async _selectFromNgwRaster(ev: MapClickEvent) {\n    this._emitStatusEvent('ngw:preselect');\n\n    const promises: Promise<number[] | undefined>[] = [];\n    const layers = Object.values(this._ngwLayers);\n    layers.sort((a, b) => {\n      if (a.layer.order && b.layer.order) {\n        return b.layer.order - a.layer.order;\n      }\n      return 1;\n    });\n    layers.forEach((l) => {\n      const layer = l.layer;\n      const identFunc =\n        typeof layer.getIdentificationIds === 'function'\n          ? layer.getIdentificationIds\n          : false;\n      if (identFunc && layer.options.selectable && this.isLayerVisible(layer)) {\n        promises.push(identFunc.call(layer));\n      }\n    });\n    const getIdsPromise = Promise.all(promises);\n    const getIds = await getIdsPromise;\n    const ids: number[] = [];\n    getIds.forEach((x) => {\n      if (x) {\n        x.forEach((y) => ids.push(y));\n      }\n    });\n\n    if (!ids.length) {\n      this._emitStatusEvent('ngw:select', null);\n      return;\n    }\n\n    const pixelRadius = this.options.pixelRadius || 10;\n    const center = this.getCenter();\n    let zoom = this.getZoom();\n    zoom = zoom !== undefined ? zoom : 20;\n    if (!center || !zoom) {\n      this._emitStatusEvent('ngw:select', null);\n      return;\n    }\n    const metresPerPixel =\n      (40075016.686 * Math.abs(Math.cos((center[1] * 180) / Math.PI))) /\n      Math.pow(2, zoom + 8);\n    const radius = pixelRadius * metresPerPixel * 0.0005;\n\n    const selectPromise = sendIdentifyRequest(ev, {\n      layers: ids,\n      connector: this.connector,\n      radius,\n    }).then((resp) => {\n      this._emitStatusEvent(\n        'ngw:select',\n        this._prepareToIdentify({\n          ...resp,\n          resources: ids,\n          sourceType: 'raster',\n          event: ev,\n        }),\n      );\n      return resp;\n    });\n    this._addPromise('select', selectPromise);\n    return selectPromise;\n  }\n\n  private _prepareToIdentify(identify: NgwIdentify) {\n    const getIdentifyItems_ = () => {\n      return getIdentifyItems(identify, true).map((x) => {\n        return createIdentifyItem({\n          feature: x.feature,\n          connector: this.connector,\n        });\n      });\n    };\n    return {\n      ...identify,\n      getIdentifyItems: getIdentifyItems_,\n    };\n  }\n\n  private async _whiteLabel() {\n    const container = this.getContainer();\n    if (container) {\n      const logo = await getCompanyLogo(\n        this.connector,\n        this.options.companyLogoOptions,\n      );\n      if (logo) {\n        container.appendChild(logo);\n      }\n    }\n  }\n}\n"],"sourceRoot":""}