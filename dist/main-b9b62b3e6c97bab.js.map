{"version":3,"file":"main-b9b62b3e6c97bab.js","mappings":"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","sources":["webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/utils/WebmapLayerOpacityPropertyHandler.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/utils/createPopupContent.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/utils/featureLayerUtils.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/utils/fetchNgwExtent.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/utils/fetchNgwLayerCount.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/utils/fetchNgwLayerFeature.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/utils/fetchNgwLayerFeatureCollection.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/utils/fetchNgwLayerFeatures.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/utils/fetchNgwLayerItem.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/utils/fetchNgwLayerItems.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/utils/getCompanyLogo.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/utils/getLayerFilterOptions.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/utils/identifyUtils.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/utils/ngwApiToAdapterOptions.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/utils/prepareNgwFieldsToPropertiesFilter.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/utils/resourceIdFromLayerOptions.ts","webpack://clear_horizon/./@nextgis/packages/ngw-kit/src/utils/utils.ts"],"sourcesContent":["import { BaseProperty } from '@nextgis/item';\nimport type { ItemBasePropertyOptions } from '../../../item/src/interfaces';\nimport type { NgwWebmapItem } from '../NgwWebmapItem';\n\ntype VAL = number;\n\nexport class WebmapLayerOpacityPropertyHandler<\n  V extends VAL = VAL,\n> extends BaseProperty<VAL, ItemBasePropertyOptions<VAL>, NgwWebmapItem> {\n  getProperty(): number {\n    const layer = this.item.layer;\n    if (layer) {\n      return layer && layer.options && layer.options.opacity !== undefined\n        ? layer.options.opacity\n        : 1;\n    }\n    return 1;\n  }\n\n  update(value: V, options?: ItemBasePropertyOptions<VAL>): void {\n    options = options || {};\n\n    if (this.isGroup()) {\n      this._value = this._prepareValue(value, options);\n      const children = this.getChildren();\n      for (const child of children) {\n        const property = child.properties.property(this.name);\n        if (property) {\n          if (options.propagation) {\n            property.set(value, options);\n          } else {\n            property.update(property.get(), options);\n          }\n        }\n      }\n    }\n    const layer = this.item.layer;\n    if (layer) {\n      const parents = this.getParents();\n      const coef = parents.reduce((s, x) => {\n        const prop = x.properties.property(this.name);\n        const multiplier = prop ? prop.getValue() : 1;\n        return s * multiplier;\n      }, 1);\n      const val = value * coef;\n      this.item.webMap.setLayerOpacity(layer, this._prepareValue(val));\n    }\n  }\n\n  protected _prepareValue(\n    value: number,\n    options?: ItemBasePropertyOptions<VAL>,\n  ): number {\n    if (options && options.propagation && this.isGroup()) {\n      return 1;\n    }\n    // value = Number(value);\n    // return value < 0.1 ? 0.1 : value;\n    return Number(value);\n  }\n}\n","import { Feature } from 'geojson';\nimport { ResourceItem } from '@nextgis/ngw-connector';\n\nexport function createPopupContent(\n  feature: Feature,\n  item?: ResourceItem,\n): HTMLElement | string {\n  // @ts-ignore\n  if (__BROWSER__) {\n    const element = document.createElement('div');\n    if (item && item.feature_layer) {\n      item.feature_layer.fields.forEach((x) => {\n        if (x.grid_visibility) {\n          const value = feature.properties && feature.properties[x.keyname];\n          if (value) {\n            const propElem = document.createElement('div');\n            element.appendChild(propElem);\n            propElem.innerHTML = `<span>${x.display_name}</span>: ${value}<span></span>`;\n          }\n        }\n      });\n    } else if (feature.properties) {\n      for (const p in feature.properties) {\n        const propElem = document.createElement('div');\n        element.appendChild(propElem);\n        propElem.innerHTML = `<span>${p}</span>: ${feature.properties[p]}<span></span>`;\n      }\n    }\n    return element;\n  } else {\n    return '';\n  }\n}\n","import CancelablePromise from '@nextgis/cancelable-promise';\nimport {\n  isPropertyFilter,\n  PropertiesFilter,\n  PropertyFilter,\n} from '@nextgis/properties-filter';\nimport {\n  round,\n  defined,\n  degrees2meters,\n  isLngLatBoundsArray,\n  getBoundsCoordinates,\n} from '@nextgis/utils';\n\nimport type { Geometry, Feature } from 'geojson';\nimport type {\n  RequestItemAdditionalParams,\n  FeatureItem,\n} from '@nextgis/ngw-connector';\nimport type { LngLatArray, FeatureProperties } from '@nextgis/utils';\nimport type {\n  NgwFeatureRequestOptions,\n  FeatureRequestParams,\n  FetchNgwItemsOptions,\n} from '../interfaces';\n\nexport const FEATURE_REQUEST_PARAMS: FeatureRequestParams = {\n  srs: 4326,\n  geom_format: 'geojson',\n};\n\nexport function createGeoJsonFeature<\n  G extends Geometry | null = Geometry,\n  P extends FeatureProperties = FeatureProperties,\n>(item: Pick<FeatureItem, 'id' | 'geom' | 'fields'>): Feature<G, P> {\n  const geometry = item.geom as G;\n  const feature: Feature<G, P> = {\n    geometry,\n    id: item.id,\n    type: 'Feature',\n    properties: item.fields as P,\n  };\n  return feature;\n}\n\nexport function updateItemRequestParam<\n  P extends FeatureProperties = FeatureProperties,\n>(params: FeatureRequestParams, options: NgwFeatureRequestOptions<P>): void {\n  const { extensions, geom, fields, srs } = options;\n  params.extensions = extensions ? extensions.join(',') : '';\n  if (fields !== undefined) {\n    params.fields = Array.isArray(fields) ? fields.join(',') : '';\n  }\n  if (geom !== undefined) {\n    params.geom = geom ? 'yes' : 'no';\n    if (!geom) {\n      delete params.srs;\n      delete params.geom_format;\n    }\n  }\n  if (defined(srs)) {\n    params.srs = srs;\n  }\n}\n\n// NGW REST API is not able to filtering by combined queries\n// therefore the filter is divided into several requests\nexport function createFeatureFieldFilterQueries<\n  G extends Geometry = Geometry,\n  P extends { [field: string]: any } = { [field: string]: any },\n>(\n  opt: FetchNgwItemsOptions<P> &\n    Required<Pick<FetchNgwItemsOptions, 'filters'>>,\n): CancelablePromise<FeatureItem<P, G>[]> {\n  const queries: CancelablePromise<FeatureItem<P, G>[]>[] = getQueries<G, P>(\n    opt,\n  );\n\n  return CancelablePromise.all(queries).then((itemsParts) => {\n    // this list of ids used for optimization\n    const ids: number[] = [];\n    const items: FeatureItem<P, G>[] = [];\n    for (const part of itemsParts) {\n      for (const item of part) {\n        if (!ids.includes(item.id)) {\n          items.push(item);\n          ids.push(item.id);\n        }\n      }\n    }\n    const offset = opt.offset !== undefined ? opt.offset : 0;\n    const limit = opt.limit !== undefined ? opt.limit : items.length;\n    if (opt.offset || opt.limit) {\n      return items.splice(offset, limit);\n    }\n    return items;\n  });\n}\n\nfunction createParam(pf: PropertyFilter): [string, any] {\n  const [field, operation, value] = pf;\n  const isFldStr = field !== 'id' ? 'fld_' : '';\n  let vStart = '';\n  let vEnd = '';\n  const field_ = String(field)\n    .trim()\n    .replace(/^(%?)(.+?)(%?)$/, (m, a, b, c) => {\n      vStart = a;\n      vEnd = c;\n      return b;\n    });\n  const v = vStart + value + vEnd;\n  return [`${isFldStr}${field_}__${operation}`, v];\n}\n\nfunction getQueries<\n  G extends Geometry = Geometry,\n  P extends { [field: string]: any } = { [field: string]: any },\n>(\n  opt: FetchNgwItemsOptions<P> &\n    Required<Pick<FetchNgwItemsOptions, 'filters'>>,\n  _queries: CancelablePromise<FeatureItem<P, G>[]>[] = [],\n  _parentAllParams: [string, any][] = [],\n): CancelablePromise<FeatureItem<P, G>[]>[] {\n  const { filters } = opt;\n\n  const logic = typeof filters[0] === 'string' ? filters[0] : 'all';\n\n  const filters_ = filters.filter((x) => Array.isArray(x)) as PropertyFilter[];\n\n  if (logic === 'any') {\n    for (const f of filters_) {\n      if (isPropertyFilter(f)) {\n        _queries.push(\n          fetchNgwLayerItemsRequest<G, P>({\n            ...opt,\n            paramList: [..._parentAllParams, createParam(f)],\n          }),\n        );\n      } else {\n        getQueries(\n          {\n            ...opt,\n            filters: f,\n          },\n          _queries,\n          [..._parentAllParams],\n        );\n      }\n    }\n  } else if (logic === 'all') {\n    const filters: [string, any][] = [];\n    const propertiesFilterList: PropertiesFilter[] = [];\n    for (const f of filters_) {\n      if (isPropertyFilter(f)) {\n        filters.push(createParam(f));\n      } else {\n        propertiesFilterList.push(f);\n      }\n    }\n\n    if (propertiesFilterList.length) {\n      for (const x of propertiesFilterList) {\n        getQueries(\n          {\n            ...opt,\n            filters: x,\n          },\n          _queries,\n          [..._parentAllParams, ...filters],\n        );\n      }\n    } else {\n      _queries.push(\n        fetchNgwLayerItemsRequest<G, P>({\n          ...opt,\n          paramList: [..._parentAllParams, ...filters],\n        }),\n      );\n    }\n  }\n  return _queries;\n}\n\nfunction createWktFromCoordArray(coord: LngLatArray[]): string {\n  const polygon = coord.map(([lng, lat]) => {\n    const [x, y] = degrees2meters(lng, lat).map((c) => round(c));\n    return x + ' ' + y;\n  });\n  return `POLYGON((${polygon.join(', ')}))`;\n}\n\nexport function fetchNgwLayerItemsRequest<\n  G extends Geometry = Geometry,\n  P extends { [field: string]: any } = { [field: string]: any },\n>(options: FetchNgwItemsOptions<P>): CancelablePromise<FeatureItem<P, G>[]> {\n  const params: FeatureRequestParams & RequestItemAdditionalParams = {\n    ...FEATURE_REQUEST_PARAMS,\n  };\n  const {\n    limit,\n    cache,\n    signal,\n    offset,\n    orderBy,\n    paramList,\n    connector,\n    geomFormat,\n    intersects,\n    resourceId,\n  } = options;\n  if (limit) {\n    if (limit !== Number.POSITIVE_INFINITY) {\n      params.limit = limit;\n    }\n  } else {\n    // Strict restriction on loading data from large layers\n    params.limit = 7000;\n  }\n  if (offset) {\n    params.offset = offset;\n  }\n  if (geomFormat) {\n    params.geom_format = geomFormat;\n  }\n  updateItemRequestParam(params, options);\n\n  if (orderBy) {\n    params.order_by = orderBy.join(',');\n  }\n  if (Array.isArray(intersects)) {\n    const coordinates = isLngLatBoundsArray(intersects)\n      ? getBoundsCoordinates(intersects)\n      : intersects;\n\n    params.intersects = createWktFromCoordArray(coordinates);\n  } else if (typeof intersects === 'string') {\n    params.intersects = intersects;\n  }\n\n  if (paramList) {\n    params.paramList = paramList;\n  }\n  const reqParams = {\n    id: resourceId,\n    ...params,\n  };\n\n  return connector.get(\n    'feature_layer.feature.collection',\n    { cache, signal },\n    reqParams,\n  ) as CancelablePromise<FeatureItem<P, G>[]>;\n}\n","import CancelablePromise from '@nextgis/cancelable-promise';\n\nimport type { LngLatBoundsArray } from '@nextgis/utils';\nimport type NgwConnector from '@nextgis/ngw-connector';\nimport type { WebmapResource, ResourceItem } from '@nextgis/ngw-connector';\nimport type {\n  FetchNgwLayerExtentOptions,\n  FetchNgwLayerItemExtentOptions,\n} from '../interfaces';\n\nexport function getNgwWebmapExtent(\n  webmap: WebmapResource,\n): LngLatBoundsArray | undefined {\n  const bottom = webmap['extent_bottom'];\n  const left = webmap['extent_left'];\n  const top = webmap['extent_top'];\n  const right = webmap['extent_right'];\n  if (bottom && left && top && right) {\n    const extent: LngLatBoundsArray = [left, bottom, right, top];\n    if (extent[3] > 82) {\n      extent[3] = 82;\n    }\n    if (extent[1] < -82) {\n      extent[1] = -82;\n    }\n    return extent;\n  }\n}\n\nexport function fetchNgwLayerExtent({\n  resourceId,\n  connector,\n  cache = true,\n}: FetchNgwLayerExtentOptions): CancelablePromise<\n  LngLatBoundsArray | undefined\n> {\n  return connector\n    .get('layer.extent', { cache }, { id: resourceId })\n    .then((resp) => {\n      if (resp) {\n        const { maxLat, maxLon, minLat, minLon } = resp.extent;\n        const extentArray: LngLatBoundsArray = [minLon, minLat, maxLon, maxLat];\n        return extentArray;\n      }\n    });\n}\n\nexport function fetchNgwLayerItemExtent({\n  resourceId,\n  featureId,\n  connector,\n  cache = true,\n}: FetchNgwLayerItemExtentOptions): CancelablePromise<\n  LngLatBoundsArray | undefined\n> {\n  return connector\n    .get(\n      'feature_layer.feature.item_extent',\n      { cache },\n      { id: resourceId, fid: featureId },\n    )\n    .then((resp) => {\n      if (resp) {\n        const { maxLat, maxLon, minLat, minLon } = resp.extent;\n        const extentArray: LngLatBoundsArray = [minLon, minLat, maxLon, maxLat];\n        return extentArray;\n      }\n    });\n}\n\nexport function fetchNgwExtent(\n  options: FetchNgwLayerExtentOptions,\n): CancelablePromise<LngLatBoundsArray | undefined> {\n  return options.connector.getResource(options.resourceId).then((resource) => {\n    if (resource) {\n      return fetchNgwResourceExtent(resource, options.connector, options);\n    }\n  });\n}\n\n/** @deprecated use {@link fetchNgwExtent} instead */\nexport function fetchNgwResourceExtent(\n  item: ResourceItem,\n  connector: NgwConnector,\n  options?: FetchNgwLayerExtentOptions,\n): CancelablePromise<LngLatBoundsArray | undefined> {\n  if (item.webmap) {\n    return CancelablePromise.resolve(getNgwWebmapExtent(item.webmap));\n  } else {\n    const resource = item.resource;\n    if (resource.cls && resource.cls.indexOf('style') !== -1) {\n      return connector.getResource(resource.parent.id).then((res) => {\n        if (res) {\n          return fetchNgwLayerExtent({\n            ...options,\n            resourceId: res.resource.id,\n            connector,\n          });\n        }\n      });\n    } else {\n      return fetchNgwLayerExtent({\n        ...options,\n        resourceId: resource.id,\n        connector,\n      });\n    }\n  }\n}\n","import CancelablePromise from '@nextgis/cancelable-promise';\n\nimport type { FetchNgwLayerCountOptions } from '../interfaces';\n\nexport function fetchNgwLayerCount({\n  connector,\n  resourceId,\n  cache = true,\n}: FetchNgwLayerCountOptions): CancelablePromise<number> {\n  return connector\n    .get(\n      'feature_layer.feature.count',\n      { cache },\n      {\n        id: resourceId,\n      },\n    )\n    .then((resp) => {\n      return resp.total_count;\n    });\n}\n","import { fetchNgwLayerItem } from './fetchNgwLayerItem';\nimport { createGeoJsonFeature } from './featureLayerUtils';\n\nimport type { Geometry, Feature } from 'geojson';\nimport type CancelablePromise from '@nextgis/cancelable-promise';\nimport type { FetchNgwItemOptions } from '../interfaces';\n\nexport function fetchNgwLayerFeature<\n  G extends Geometry = Geometry,\n  P extends Record<string, any> = Record<string, any>,\n>(options: FetchNgwItemOptions<P>): CancelablePromise<Feature<G, P>> {\n  return fetchNgwLayerItem<G, P>(options).then((item) => {\n    return createGeoJsonFeature<G, P>(item);\n  });\n}\n","import { fetchNgwLayerFeatures } from './fetchNgwLayerFeatures';\n\nimport type { Geometry, FeatureCollection } from 'geojson';\nimport type CancelablePromise from '@nextgis/cancelable-promise';\nimport type { FeatureProperties } from '@nextgis/utils';\nimport type { FetchNgwItemsOptions } from '../interfaces';\n\nexport function fetchNgwLayerFeatureCollection<\n  G extends Geometry | null = Geometry,\n  P extends FeatureProperties = FeatureProperties,\n>(\n  options: FetchNgwItemsOptions<P>,\n): CancelablePromise<FeatureCollection<G, P>> {\n  return fetchNgwLayerFeatures<G, P>(options).then((features) => {\n    const featureCollection: FeatureCollection<G, P> = {\n      type: 'FeatureCollection',\n      features,\n    };\n    return featureCollection;\n  });\n}\n","import { fetchNgwLayerItems } from './fetchNgwLayerItems';\nimport { createGeoJsonFeature } from './featureLayerUtils';\n\nimport type { Geometry, Feature } from 'geojson';\nimport type CancelablePromise from '@nextgis/cancelable-promise';\nimport type { FeatureItem } from '@nextgis/ngw-connector';\nimport type { FetchNgwItemsOptions } from '../interfaces';\nimport type { FeatureProperties } from '@nextgis/utils';\n\nexport function fetchNgwLayerFeatures<\n  G extends Geometry | null = Geometry,\n  P extends FeatureProperties = FeatureProperties,\n>(options: FetchNgwItemsOptions<P>): CancelablePromise<Feature<G, P>[]> {\n  return fetchNgwLayerItems(options).then((x: FeatureItem[]) => {\n    const features: Array<Feature<G, P>> = [];\n    x.forEach((y) => {\n      features.push(createGeoJsonFeature(y));\n    });\n\n    return features;\n  });\n}\n","import { Geometry } from 'geojson';\n\nimport CancelablePromise from '@nextgis/cancelable-promise';\nimport {\n  createGeoJsonFeature,\n  FEATURE_REQUEST_PARAMS,\n  updateItemRequestParam,\n} from './featureLayerUtils';\n\nimport type { FeatureProperties } from '@nextgis/utils';\nimport type {\n  NgwFeatureItemResponse,\n  FeatureRequestParams,\n  FetchNgwItemOptions,\n} from '../interfaces';\n\nexport function fetchNgwLayerItem<\n  G extends Geometry = Geometry,\n  P extends FeatureProperties = FeatureProperties,\n>(\n  options: FetchNgwItemOptions<P>,\n): CancelablePromise<NgwFeatureItemResponse<P, G>> {\n  const params: FeatureRequestParams & { [name: string]: any } = {\n    ...FEATURE_REQUEST_PARAMS,\n  };\n  updateItemRequestParam(params, options);\n  const queryParams = {\n    id: options.resourceId,\n    fid: options.featureId,\n    ...params,\n  };\n  const cache = options.cache || true;\n  return options.connector\n    .get('feature_layer.feature.item', { cache }, queryParams)\n    .then((resp) => {\n      return {\n        ...resp,\n        toGeojson: () => {\n          if (resp.geom) {\n            return CancelablePromise.resolve(createGeoJsonFeature<G, P>(resp));\n          } else {\n            return fetchNgwLayerItem({\n              ...options,\n              geom: true,\n              fields: null,\n              extensions: null,\n            }).then((onlyGeomItem) => {\n              const geom = onlyGeomItem.geom;\n              return createGeoJsonFeature<G, P>({ ...resp, geom });\n            });\n          }\n        },\n      } as NgwFeatureItemResponse<P, G>;\n    });\n}\n","import { propertiesFilter } from '@nextgis/properties-filter';\nimport CancelablePromise from '@nextgis/cancelable-promise';\nimport {\n  createFeatureFieldFilterQueries,\n  fetchNgwLayerItemsRequest,\n} from './featureLayerUtils';\nimport { prepareNgwFieldsToPropertiesFilter } from './prepareNgwFieldsToPropertiesFilter';\n\nimport type { Geometry } from 'geojson';\nimport type { FeatureItem } from '@nextgis/ngw-connector';\nimport { FeatureProperties, isArray } from '@nextgis/utils';\nimport type { PropertiesFilter } from '@nextgis/properties-filter';\nimport type { FetchNgwItemsOptions } from '../interfaces';\n\nexport function fetchNgwLayerItems<\n  G extends Geometry = Geometry,\n  P extends FeatureProperties = FeatureProperties,\n>(options: FetchNgwItemsOptions<P>): CancelablePromise<FeatureItem<P, G>[]> {\n  const filters = options.filters;\n  if (filters) {\n    return createFeatureFieldFilterQueries({\n      ...options,\n      filters,\n    }).then((data) => {\n      const clientFilterValidate =\n        options.clientFilterValidate ?? isFilterWithAnyCase(filters);\n      // Additional client-side filter check\n      if (clientFilterValidate) {\n        data = data.filter((y) => {\n          const fields = prepareNgwFieldsToPropertiesFilter({\n            ...y.fields,\n            id: y.id,\n          });\n          const result = propertiesFilter(fields, filters);\n          return result;\n        });\n      }\n      return data;\n    }) as CancelablePromise<FeatureItem<P, G>[]>;\n  } else {\n    return fetchNgwLayerItemsRequest<G, P>(options);\n  }\n}\n\nfunction isFilterWithAnyCase(filters: PropertiesFilter): boolean {\n  if (filters[0] === 'any') {\n    return true;\n  }\n  for (let i = 1; i < filters.length; i++) {\n    const p = filters[i];\n    if (isArray(p)) {\n      const deep = isFilterWithAnyCase(p);\n      if (deep) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n","import NgwConnector from '@nextgis/ngw-connector';\nimport { CompanyLogoOptions } from '../interfaces';\n\nexport async function getCompanyLogo(\n  connector: NgwConnector,\n  options?: CompanyLogoOptions,\n): Promise<HTMLElement | undefined> {\n  const settings = await connector.get('pyramid.settings', null, {\n    component: 'pyramid',\n  });\n  if (settings && settings.company_logo && settings.company_logo.enabled) {\n    const anchor = document.createElement('a');\n    anchor.style.position = 'absolute';\n    anchor.style.bottom = '0';\n    anchor.style.right = '0';\n    anchor.style.padding = options?.padding ?? '10px';\n    anchor.className = 'ngw-map-logo';\n    if (options && options.cssClass) {\n      anchor.className += ' ' + options.cssClass;\n    }\n    const img = new Image();\n    img.style.maxHeight = '100px';\n    img.style.maxWidth = '100px';\n    img.src = '';\n    try {\n      const src = await connector.get('pyramid.company_logo', {\n        responseType: 'blob',\n      });\n      const urlCreator = window.URL || window.webkitURL;\n      const imageUrl = urlCreator.createObjectURL(src as any);\n      img.src = imageUrl;\n    } catch (er) {\n      console.warn(er);\n    }\n\n    if (\n      settings.company_logo.link !== null &&\n      settings.company_logo.link.trim() !== ''\n    ) {\n      anchor.href = settings.company_logo.link;\n      anchor.target = '_blank';\n      if (settings.company_logo.link.search(/:\\/\\/nextgis/) !== -1) {\n        img.alt = 'Get your own Web GIS at nextgis.com';\n      }\n    }\n    anchor.appendChild(img);\n    return anchor;\n  }\n}\n","import { FilterOptions, GeoJsonAdapterOptions } from '@nextgis/webmap';\n\nconst filterOptionsKeys: (keyof FilterOptions)[] = [\n  'fields',\n  'intersects',\n  'limit',\n  'orderBy',\n  'strategy',\n];\n\nexport function getLayerFilterOptions(\n  options: GeoJsonAdapterOptions,\n): FilterOptions {\n  const filterOptions: Record<string, any> = {};\n  filterOptionsKeys.forEach((x) => {\n    const opt = options[x];\n    if (opt !== undefined) {\n      filterOptions[x] = opt;\n    }\n  });\n  return filterOptions as FilterOptions;\n}\n","import CancelablePromise from '@nextgis/cancelable-promise';\nimport {\n  JsonMap,\n  degrees2meters,\n  deprecatedMapClick,\n  getCirclePolygonCoordinates,\n} from '@nextgis/utils';\nimport { IdentifyItem } from '../IdentifyItem';\nimport { createGeoJsonFeature } from './featureLayerUtils';\nimport { fetchNgwLayerFeature } from './fetchNgwLayerFeature';\nimport { fetchNgwLayerItem } from './fetchNgwLayerItem';\n\nimport type { Geometry, Feature, Position } from 'geojson';\nimport type { MapClickEvent } from '@nextgis/webmap';\nimport type { FeatureProperties } from '@nextgis/utils';\nimport type {\n  LayerFeature,\n  FeatureLayersIdentify,\n} from '@nextgis/ngw-connector';\nimport type {\n  FeatureIdentifyRequestOptions,\n  FeatureLayerIdentifyOptions,\n  GetIdentifyGeoJsonOptions,\n  IdentifyRequestOptions,\n  NgwFeatureItemResponse,\n  IdentifyItemOptions,\n  NgwIdentifyItem,\n} from '../interfaces';\n\nexport function getIdentifyItems(\n  identify: FeatureLayersIdentify & { resources?: number[] },\n  multiple = false,\n): NgwIdentifyItem[] {\n  const resources = [];\n  const paramsList = [];\n  for (const l in identify) {\n    const id = Number(l);\n    if (!isNaN(id)) {\n      resources.push(id);\n    }\n  }\n  const sortingArr = identify.resources;\n  if (sortingArr) {\n    resources.sort((a, b) => {\n      return sortingArr.indexOf(a) - sortingArr.indexOf(b);\n    });\n  }\n\n  for (let fry = 0; fry < resources.length; fry++) {\n    const l = resources[fry];\n    const identifyItem = identify[l];\n    if ('features' in identifyItem) {\n      const layerFeatures = identifyItem.features;\n      const resourceId = Number(l);\n      const featureParams: NgwIdentifyItem[] = createParamsFromFeatures(\n        layerFeatures,\n        resourceId,\n        multiple,\n      );\n      if (featureParams.length) {\n        paramsList.push(...featureParams);\n        if (!multiple) {\n          break;\n        }\n      }\n    }\n  }\n  return paramsList;\n}\n\nfunction createParamsFromFeatures(\n  features: LayerFeature[],\n  resourceId: number,\n  multiple: boolean,\n): NgwIdentifyItem[] {\n  const featureParams: NgwIdentifyItem[] = [];\n  for (const feature of features) {\n    const params = {\n      featureId: feature.id,\n      resourceId,\n      feature,\n    };\n    featureParams.push(params);\n    if (!multiple) {\n      break;\n    }\n  }\n  return featureParams;\n}\n\nexport function fetchIdentifyGeoJson<\n  G extends Geometry = Geometry,\n  P extends JsonMap = JsonMap,\n>(\n  options: GetIdentifyGeoJsonOptions,\n): CancelablePromise<Feature<G, P> | undefined> {\n  const { connector, identify, requestOptions } = options;\n  for (const l in identify) {\n    const id = Number(l);\n    if (!isNaN(id)) {\n      const item = identify[l];\n      if ('features' in item) {\n        const withGeom = item.features.find((x) => x.geom);\n\n        if (withGeom && withGeom.geom) {\n          const geom = withGeom.geom as Geometry;\n          return CancelablePromise.resolve(\n            createGeoJsonFeature({\n              ...withGeom,\n              geom,\n            }),\n          );\n        }\n      }\n    }\n  }\n\n  const params = getIdentifyItems(identify);\n  if (params && params.length) {\n    return fetchNgwLayerFeature({ ...requestOptions, connector, ...params[0] });\n  }\n  return CancelablePromise.resolve(undefined);\n}\n\nexport function fetchIdentifyItem<\n  G extends Geometry = Geometry,\n  P extends FeatureProperties = FeatureProperties,\n>(\n  options: GetIdentifyGeoJsonOptions<P>,\n): CancelablePromise<NgwFeatureItemResponse<P, G> | undefined> {\n  const { connector, identify } = options;\n\n  const params = getIdentifyItems(identify);\n  if (params && params.length) {\n    return fetchNgwLayerItem<G, P>({\n      connector,\n      ...options.requestOptions,\n      ...params[0],\n    });\n  }\n  return CancelablePromise.resolve(undefined);\n}\n\n/**\n * @deprecated use {@link fetchIdentifyGeoJson} instead\n */\nexport function getIdentifyGeoJson<\n  G extends Geometry = Geometry,\n  P extends JsonMap = JsonMap,\n>(\n  options: GetIdentifyGeoJsonOptions,\n): CancelablePromise<Feature<G, P> | undefined> {\n  return fetchIdentifyGeoJson(options);\n}\n\nexport function featureLayerIdentify(\n  options: FeatureLayerIdentifyOptions,\n): CancelablePromise<FeatureLayersIdentify> {\n  const { geom, signal, cache } = options;\n  let geom_: Position[] = [];\n  if (Array.isArray(geom)) {\n    geom_ = geom;\n  } else {\n    const polygon =\n      geom.type === 'Feature'\n        ? geom.geometry\n        : geom.type === 'Polygon'\n        ? geom\n        : false;\n    if (polygon) {\n      geom_ = polygon.coordinates[0];\n    }\n  }\n  if (geom_) {\n    // create wkt string\n    const polygonStr: string[] = [];\n\n    for (const [lng, lat] of geom_) {\n      const [x, y] = degrees2meters(lng, lat);\n      polygonStr.push(x + ' ' + y);\n    }\n\n    const wkt = `POLYGON((${polygonStr.join(', ')}))`;\n\n    const layers: number[] = options.layers;\n\n    const data: FeatureIdentifyRequestOptions = {\n      geom: wkt,\n      srs: 3857,\n      layers,\n    };\n\n    return options.connector.post('feature_layer.identify', {\n      data,\n      signal,\n      cache,\n    });\n  } else {\n    throw new Error('Not valid geometry format to make intersection');\n  }\n}\n\nexport function sendIdentifyRequest(\n  ev: MapClickEvent,\n  options: IdentifyRequestOptions,\n): CancelablePromise<FeatureLayersIdentify> {\n  deprecatedMapClick(ev);\n  const [lng, lat] = ev.lngLat;\n  const { geom, radius, signal, cache } = options;\n  const geom_ = geom ?? getCirclePolygonCoordinates(lng, lat, radius);\n\n  return featureLayerIdentify({ ...options, geom: geom_, signal, cache });\n}\n\nexport function createIdentifyItem<\n  F extends FeatureProperties = FeatureProperties,\n  G extends Geometry = Geometry,\n>(opt: IdentifyItemOptions): IdentifyItem<F, G> {\n  return new IdentifyItem<F, G>(opt);\n}\n","import { updateImageParams } from './utils';\n\nimport type {\n  RasterAdapterOptions,\n  ImageAdapterOptions,\n  WmsAdapterOptions,\n  MvtAdapterOptions,\n  WebMap,\n} from '@nextgis/webmap';\nimport type { NgwLayerOptions, TileNoData } from '../interfaces';\n\nexport interface GetLayerAdapterOptions {\n  options: NgwLayerOptions;\n  webMap?: WebMap;\n  baseUrl?: string;\n}\n\nexport interface GetImageAdapterOptionsParams {\n  resourceId: number | number[];\n  baseUrl?: string;\n  nd?: TileNoData;\n  headers: any;\n}\n\nexport function getImageAdapterOptions({\n  resourceId,\n  baseUrl,\n  nd,\n  headers,\n}: GetImageAdapterOptionsParams): ImageAdapterOptions {\n  const url = baseUrl + '/api/component/render/image';\n  const params: Record<string, any> = { resource: resourceId };\n  if (nd) {\n    params.nd = nd;\n  }\n  return {\n    url,\n    resourceId,\n    headers,\n    params,\n    updateWmsParams: (params_: Record<string, any>) => {\n      if (nd) {\n        params_.nd = nd;\n      }\n      return updateImageParams(params_, resourceId);\n    },\n  } as ImageAdapterOptions;\n}\n\nexport function ngwApiToAdapterOptions({\n  options,\n  webMap,\n  baseUrl,\n}: GetLayerAdapterOptions):\n  | MvtAdapterOptions\n  | RasterAdapterOptions\n  | ImageAdapterOptions\n  | undefined {\n  let adapter = options.adapter || 'IMAGE';\n  let url: string;\n  const layerAdapters = webMap && webMap.getLayerAdapters();\n  const isImageAllowed = layerAdapters ? layerAdapters.IMAGE : true;\n\n  const resourceId = options.resource;\n  const nd: TileNoData = options.tileNoData ? options.tileNoData : 200;\n\n  if (typeof resourceId === 'number') {\n    if (adapter === 'IMAGE') {\n      if (isImageAllowed) {\n        return getImageAdapterOptions({\n          resourceId,\n          headers: options.headers,\n          nd,\n          baseUrl,\n        });\n      } else {\n        adapter = 'TILE';\n      }\n    }\n    if (adapter === 'WMS') {\n      url = `${baseUrl}/api/resource/${resourceId}/wms`;\n      const adapterOptions = options.adapterOptions as WmsAdapterOptions;\n      return {\n        url,\n        format: 'image/png',\n        version: '1.1.1',\n        layers: adapterOptions && adapterOptions.layers,\n        headers: options.headers,\n      };\n    }\n    if (adapter === 'MVT') {\n      url =\n        baseUrl +\n        '/api/component/feature_layer/mvt?x={x}&y={y}&z={z}&' +\n        'resource=' +\n        resourceId +\n        '&simplification=' +\n        (options.simplification ?? 6);\n      // url = baseUrl + '/api/resource/' + options.resourceId + '/{z}/{x}/{y}.mvt';\n      return {\n        url,\n        sourceLayer: 'ngw:' + resourceId,\n        featureIdName: '$id',\n      };\n    }\n    if (adapter === 'TERRAIN') {\n      url = baseUrl + `/api/resource/${resourceId}/terrain_provider`;\n      // `/api/resource/${resourceId}/terrain_provider/{z}/{x}/{y}.terrain`;\n      return { url, adapter };\n    }\n    if (adapter === 'MODEL_3D') {\n      url = baseUrl + `/api/component/model_3d/${resourceId}/data.glb`;\n      return { url };\n    }\n    if (adapter === 'TILE') {\n      url =\n        baseUrl +\n        '/api/component/render/tile?z={z}&x={x}&y={y}&resource=' +\n        resourceId +\n        '&nd=' +\n        nd;\n      return { url, adapter };\n    }\n  } else if (resourceId !== undefined) {\n    throw new Error(\n      'Option `resource` must be number, not ' + typeof resourceId,\n    );\n  } else {\n    console.log('Option `resource` not set');\n  }\n}\n\n/** @deprecated use {@link ngwApiToAdapterOptions} instead */\nexport function getLayerAdapterOptions(\n  options: NgwLayerOptions,\n  webMap: WebMap,\n  baseUrl: string,\n): RasterAdapterOptions | ImageAdapterOptions | undefined {\n  return ngwApiToAdapterOptions({ options, webMap, baseUrl });\n}\n","import { isObject, defined } from '@nextgis/utils';\nimport type { NgwDateFormat, NgwDateTimeFormat } from '@nextgis/ngw-connector';\n\nexport function prepareNgwFieldsToPropertiesFilter(\n  fields: Record<string, any>,\n): Record<string, any> {\n  let f: keyof typeof fields;\n  for (f in fields) {\n    const field = fields[f];\n    if (isObject(field)) {\n      const date = field as NgwDateFormat | NgwDateTimeFormat;\n      if (defined(date.year) && defined(date.month) && defined(date.day)) {\n        const dt: [number, number, number, number?, number?, number?] = [\n          date.year,\n          date.month - 1,\n          date.day,\n        ];\n        if ('hour' in date) {\n          [date.hour, date.minute, date.second].forEach((x) => {\n            dt.push(x);\n          });\n        }\n        fields[f] = new Date(...dt).toISOString();\n      }\n    } else if (f === 'id' && typeof field === 'string') {\n      fields[f] = field.split(',').map(Number);\n    }\n  }\n  return fields;\n}\n","import NgwConnector, { ResourceItem } from '@nextgis/ngw-connector';\nimport type { NgwLayerOptions } from '../interfaces';\n\nexport async function resourceIdFromLayerOptions(\n  options: NgwLayerOptions,\n  connector: NgwConnector,\n): Promise<number> {\n  const resource = options.resource;\n  const item = resource as ResourceItem;\n\n  // @ts-ignore @deprecated\n  let { keyname, resourceId } = options;\n\n  if (resource) {\n    if (typeof resource === 'string') {\n      keyname = resource;\n    } else if (typeof resource === 'number') {\n      resourceId = resource;\n    } else if (\n      item.resource &&\n      item.resource !== undefined &&\n      'resource' in item\n    ) {\n      resourceId = (resource as ResourceItem).resource.id;\n    } else {\n      // TODO: safe remove this case\n      resourceId = await resourceIdFromLayerOptions(resource as any, connector);\n    }\n  }\n  if (!resourceId && keyname) {\n    const resourceItem = await connector.getResource(keyname);\n    if (resourceItem) {\n      resourceId = resourceItem.resource.id;\n    }\n  }\n  return resourceId;\n}\n","import NgwConnector, { GeometryType } from '@nextgis/ngw-connector';\nimport { createAsyncAdapter } from '../adapters/createAsyncAdapter';\nimport { NgwWebmapLayerAdapter } from '../NgwWebmapLayerAdapter';\n\nimport type { Type } from '@nextgis/utils';\nimport type { WebMap, VectorAdapterLayerType } from '@nextgis/webmap';\nimport type {\n  ResourceAdapter,\n  NgwLayerOptions,\n  NgwWebmapAdapterOptions,\n} from '../interfaces';\n\nexport function updateImageParams(\n  params: Record<string, any>,\n  resourceId: number | number[],\n): Record<string, any> {\n  const { bbox, width, height, nd } = params;\n  return {\n    resource: Array.isArray(resourceId) ? resourceId.join(',') : resourceId,\n    extent: bbox,\n    size: width + ',' + height,\n    timestamp: Date.now(),\n    nd: nd ?? 200,\n  };\n}\n\nexport const vectorLayerGeomToPaintTypeAlias: Record<\n  GeometryType,\n  VectorAdapterLayerType\n> = {\n  POINT: 'point',\n  LINESTRING: 'line',\n  POLYGON: 'polygon',\n  MULTIPOINT: 'point',\n  MULTILINESTRING: 'line',\n  MULTIPOLYGON: 'polygon',\n  POINTZ: 'point',\n  LINESTRINGZ: 'line',\n  POLYGONZ: 'polygon',\n  MULTIPOINTZ: 'point',\n  MULTILINESTRINGZ: 'line',\n  MULTIPOLYGONZ: 'polygon',\n};\n\nexport function createNgwLayerAdapter(\n  options: NgwLayerOptions,\n  webMap: WebMap,\n  connector: NgwConnector,\n): Promise<Type<ResourceAdapter> | undefined> {\n  const headers = connector.getAuthorizationHeaders();\n  if (headers) {\n    options.headers = headers;\n  }\n\n  return createAsyncAdapter(options, webMap, connector);\n}\n\n/** @deprecated use {@link createNgwLayerAdapter} instead */\nexport function addNgwLayer(\n  options: NgwLayerOptions,\n  webMap: WebMap,\n  connector: NgwConnector,\n): Promise<Type<ResourceAdapter> | undefined> {\n  return createNgwLayerAdapter(options, webMap, connector);\n}\n\nexport interface ExtendNgwWebmapLayerAdapterOptions {\n  webMap: WebMap;\n  connector: NgwConnector;\n  baseUrl?: string;\n}\n\nexport function extendNgwWebmapLayerAdapter(\n  opt: ExtendNgwWebmapLayerAdapterOptions,\n): Type<NgwWebmapLayerAdapter> {\n  class A extends NgwWebmapLayerAdapter {\n    constructor(map: any, options: NgwWebmapAdapterOptions) {\n      options = { ...opt, ...options };\n      super(map, options);\n    }\n  }\n  return A;\n}\n\nlet _pixelsInMeter: number;\n\nexport function pixelsInMeterWidth(): number {\n  if (_pixelsInMeter === undefined) {\n    const div = document.createElement('div');\n    div.style.cssText =\n      'position: absolute;  left: -100%;  top: -100%;  width: 100cm;';\n    document.body.appendChild(div);\n    const px = div.offsetWidth;\n    document.body.removeChild(div);\n    _pixelsInMeter = px;\n  }\n  return _pixelsInMeter;\n}\n\n// Returns width of map in meters on specified latitude.\nexport function getMapWidthForLanInMeters(lat: number): number {\n  return 6378137 * 2 * Math.PI * Math.cos((lat * Math.PI) / 180);\n}\n\nexport function getZoomFromScale(scale: number): number {\n  return Math.log(scale / 256) / Math.LN2;\n}\n\nexport function setScaleRatio(scale: number, lat = 0): number {\n  // TODO: get real center\n  // webmap does not contain center yet\n  // const center = [104, 45]; // this.webMap.getCenter();\n\n  const centerLat = lat;\n  const crsScale =\n    (pixelsInMeterWidth() * getMapWidthForLanInMeters(centerLat)) / scale;\n  const zoom = getZoomFromScale(crsScale);\n  return zoom;\n\n  // return Math.round(Math.log(591657550.5 / (scale / 2)) / Math.log(2));\n}\n"],"names":["WebmapLayerOpacityPropertyHandler","_BaseProperty","_inherits","_super","_classCallCheck","apply","arguments","key","value","layer","this","item","options","undefined","opacity","_this","isGroup","_value","_prepareValue","_step","_iterator","_createForOfIteratorHelper","getChildren","s","n","done","property","properties","name","propagation","set","update","get","err","e","f","val","getParents","reduce","x","prop","getValue","webMap","setLayerOpacity","Number","BaseProperty","createPopupContent","feature","element","document","createElement","feature_layer","fields","forEach","grid_visibility","keyname","propElem","appendChild","innerHTML","concat","display_name","p","FEATURE_REQUEST_PARAMS","srs","geom_format","createGeoJsonFeature","geometry","geom","id","type","updateItemRequestParam","params","extensions","join","Array","isArray","defined","createFeatureFieldFilterQueries","opt","queries","getQueries","CancelablePromise","then","itemsParts","ids","items","_step2","_iterator2","includes","push","offset","limit","length","splice","createParam","pf","_pf","_slicedToArray","field","operation","isFldStr","vStart","vEnd","field_","String","trim","replace","m","a","b","c","v","_queries","_parentAllParams","filters","logic","filters_","filter","_step3","_iterator3","isPropertyFilter","fetchNgwLayerItemsRequest","_objectSpread","paramList","_toConsumableArray","_step4","propertiesFilterList","_iterator4","_step5","_iterator5","polygon","cache","signal","orderBy","connector","geomFormat","intersects","resourceId","POSITIVE_INFINITY","order_by","coordinates","isLngLatBoundsArray","getBoundsCoordinates","map","_ref","_ref2","lng","lat","_degrees2meters$map2","degrees2meters","round","reqParams","getNgwWebmapExtent","webmap","bottom","left","top","right","extent","fetchNgwLayerExtent","_ref$cache","resp","_resp$extent","maxLat","maxLon","minLat","minLon","fetchNgwLayerItemExtent","featureId","_ref2$cache","fid","_resp$extent2","fetchNgwExtent","getResource","resource","fetchNgwResourceExtent","cls","indexOf","parent","res","fetchNgwLayerCount","total_count","fetchNgwLayerFeature","fetchNgwLayerItem","fetchNgwLayerFeatureCollection","fetchNgwLayerItems","features","y","fetchNgwLayerFeatures","queryParams","toGeojson","onlyGeomItem","data","_options$clientFilter","clientFilterValidate","isFilterWithAnyCase","prepareNgwFieldsToPropertiesFilter","propertiesFilter","i","_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","_typeof","__await","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","Error","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","doneResult","displayName","isGeneratorFunction","genFun","ctor","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","getCompanyLogo","_x","_x2","_getCompanyLogo","_callee","settings","_options$padding","anchor","img","src","urlCreator","imageUrl","_context","component","company_logo","enabled","style","position","padding","className","cssClass","Image","maxHeight","maxWidth","responseType","window","URL","webkitURL","createObjectURL","t0","console","warn","link","href","target","search","alt","args","filterOptionsKeys","getLayerFilterOptions","filterOptions","getIdentifyItems","identify","multiple","resources","paramsList","l","sortingArr","sort","fry","identifyItem","featureParams","createParamsFromFeatures","fetchIdentifyGeoJson","requestOptions","withGeom","find","fetchIdentifyItem","sendIdentifyRequest","ev","deprecatedMapClick","_ev$lngLat","lngLat","radius","geom_","getCirclePolygonCoordinates","polygonStr","_step2$value","_degrees2meters2","layers","post","featureLayerIdentify","createIdentifyItem","IdentifyItem","ngwApiToAdapterOptions","url","baseUrl","adapter","layerAdapters","getLayerAdapters","isImageAllowed","IMAGE","nd","tileNoData","headers","updateWmsParams","params_","updateImageParams","getImageAdapterOptions","adapterOptions","format","version","_options$simplificati","simplification","sourceLayer","featureIdName","log","_loop","isObject","date","year","month","day","dt","hour","minute","second","_construct","Date","toISOString","split","resourceIdFromLayerOptions","_resourceIdFromLayerOptions","resourceItem","bbox","width","height","size","timestamp","now","_pixelsInMeter","vectorLayerGeomToPaintTypeAlias","POINT","LINESTRING","POLYGON","MULTIPOINT","MULTILINESTRING","MULTIPOLYGON","POINTZ","LINESTRINGZ","POLYGONZ","MULTIPOINTZ","MULTILINESTRINGZ","MULTIPOLYGONZ","createNgwLayerAdapter","getAuthorizationHeaders","createAsyncAdapter","extendNgwWebmapLayerAdapter","_NgwWebmapLayerAdapte","A","NgwWebmapLayerAdapter","setScaleRatio","scale","centerLat","zoom","Math","LN2","getZoomFromScale","div","cssText","body","px","offsetWidth","removeChild","pixelsInMeterWidth","PI","cos"],"sourceRoot":""}