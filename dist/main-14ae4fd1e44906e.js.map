{"version":3,"file":"main-14ae4fd1e44906e.js","mappings":"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","sources":["webpack://clear_horizon/./@nextgis/packages/ngw-map/src/utils/appendNgwResources.ts","webpack://clear_horizon/./@nextgis/packages/ngw-map/src/utils/prepareWebMapOptions.ts","webpack://clear_horizon/./@nextgis/packages/ngw-map/src/utils/getIentifyRadius.ts","webpack://clear_horizon/./@nextgis/packages/ngw-map/src/NgwMap.ts"],"sourcesContent":["import type { NgwLayerOptions } from '@nextgis/ngw-kit';\nimport type { NgwResourceDefinition } from '../interfaces';\n\nexport function appendNgwResources(\n  options: NgwLayerOptions[],\n  resource?: NgwResourceDefinition,\n  defOptions?: Partial<NgwLayerOptions>,\n  overwriteOptions?: Partial<NgwLayerOptions>,\n): void {\n  if (typeof resource === 'number' || typeof resource === 'string') {\n    resource = Number(resource);\n    options.push({\n      ...defOptions,\n      resource,\n    });\n  } else if (Array.isArray(resource)) {\n    const [resourceId, id] = resource;\n    options.push({\n      ...defOptions,\n      resource: resourceId,\n      id,\n      ...overwriteOptions,\n    });\n  } else if (typeof resource === 'object') {\n    options.push({ ...defOptions, ...resource, ...overwriteOptions });\n  }\n}\n","import { deepmerge } from '@nextgis/utils';\nimport { StarterKit, MapOptions } from '@nextgis/webmap';\nimport NgwConnector from '@nextgis/ngw-connector';\nimport { QmsKit } from '@nextgis/qms-kit';\nimport { NgwKit } from '@nextgis/ngw-kit';\n\nimport { NgwMapOptions } from '../interfaces';\n\nexport const OPTIONS: NgwMapOptions = {\n  target: 'map',\n  baseUrl: '',\n  whitlabel: false,\n  controls: ['ZOOM', 'ATTRIBUTION'],\n  controlsOptions: {\n    ZOOM: { position: 'top-left' },\n    ATTRIBUTION: {\n      position: 'bottom-right',\n      customAttribution: [\n        '<a href=\"https://nextgis.com\" target=\"_blank\">©NextGIS</a>',\n      ],\n    },\n  },\n  pixelRadius: 10,\n};\n\nexport function prepareWebMapOptions(options: NgwMapOptions): MapOptions {\n  const kits: StarterKit[] = [new QmsKit()];\n  if (options.starterKits) {\n    options.starterKits.forEach((x) => {\n      kits.push(x);\n    });\n  }\n\n  if (!options.connector) {\n    options.connector = new NgwConnector({\n      baseUrl: options.baseUrl || '',\n      auth: options.auth,\n    });\n  } else if (options.connector) {\n    options.baseUrl = options.connector.options.baseUrl;\n  }\n  options = deepmerge(OPTIONS, options);\n\n  if (!options.center && !options.bounds) {\n    options.bounds = [-179, -90, 180, 90];\n    options.maxBounds = options.bounds;\n  }\n\n  if (options.connector) {\n    kits.push(\n      new NgwKit({\n        connector: options.connector,\n        auth: options.auth,\n      }),\n    );\n  }\n  options = {\n    ...options,\n    starterKits: kits,\n    create: false,\n  };\n  return options;\n}\n","import { LngLatArray } from '@nextgis/utils';\n\nexport function getIdentifyRadius(\n  center: LngLatArray,\n  zoom: number,\n  pixelRadius: number,\n): number {\n  pixelRadius = pixelRadius ?? 10;\n  const metresPerPixel =\n    (40075016.686 * Math.abs(Math.cos((center[1] * 180) / Math.PI))) /\n    Math.pow(2, zoom + 8);\n  const radius = pixelRadius * metresPerPixel * 0.0005;\n  return radius;\n}\n","import StrictEventEmitter from 'strict-event-emitter-types';\nimport { EventEmitter } from 'events';\nimport CancelablePromise from '@nextgis/cancelable-promise';\nimport { defined, isObject } from '@nextgis/utils';\nimport { AdapterOptions, WebMap } from '@nextgis/webmap';\nimport NgwConnector from '@nextgis/ngw-connector';\n\nimport {\n  fetchNgwLayerFeatureCollection,\n  fetchNgwResourceExtent,\n  createNgwLayerAdapter,\n  fetchNgwLayerFeature,\n  fetchIdentifyGeoJson,\n  sendIdentifyRequest,\n  createIdentifyItem,\n  fetchNgwLayerItems,\n  fetchIdentifyItem,\n  fetchNgwLayerItem,\n  getIdentifyItems,\n  getCompanyLogo,\n} from '@nextgis/ngw-kit';\nimport { deprecatedWarn } from '@nextgis/utils';\nimport { getIcon } from '@nextgis/icons';\n\nimport { appendNgwResources } from './utils/appendNgwResources';\nimport { prepareWebMapOptions } from './utils/prepareWebMapOptions';\n\nimport type { JsonMap, FeatureProperties } from '@nextgis/utils';\nimport type {\n  FeatureItem,\n  LayerFeature,\n  ResourceItem,\n  FeatureLayersIdentify,\n  FeatureLayersIdentifyItems,\n} from '@nextgis/ngw-connector';\nimport type {\n  OnLayerMouseOptions,\n  ControlPosition,\n  FilterOptions,\n  MapClickEvent,\n  LayerAdapter,\n  WebMapEvents,\n  MapControls,\n  FitOptions,\n  LayerDef,\n} from '@nextgis/webmap';\nimport type {\n  NgwIdentify,\n  NgwWebmapItem,\n  ResourceAdapter,\n  FetchNgwItemsOptions,\n  NgwFeatureItemResponse,\n  NgwFeatureRequestOptions,\n} from '@nextgis/ngw-kit';\nimport type { Geometry, Feature, FeatureCollection } from 'geojson';\nimport type { PropertiesFilter } from '@nextgis/properties-filter';\nimport type { QmsAdapterOptions } from '@nextgis/qms-kit';\nimport type { NgwLayerOptions } from '@nextgis/ngw-kit';\nimport type {\n  NgwIdentifyEvent,\n  NgwMapOptions,\n  NgwMapEvents,\n  NgwLayers,\n} from './interfaces';\nimport type { FetchNgwItemOptions } from '@nextgis/ngw-kit';\nimport { getIdentifyRadius } from './utils/getIentifyRadius';\n\ntype PromiseGroup = 'select' | 'identify';\n\n/**\n * Base class containing the logic of interaction WebMap with NextGIS services.\n *\n * @example\n * ```javascript\n * import { NgwMap } from '@nextgis/ngw-map';\n * import MapAdapter from '@nextgis/leaflet-map-adapter';\n * // styles are not included in the leaflet-map-adapter\n * import 'leaflet/dist/leaflet.css';\n *\n * const ngwMap = new NgwMap({\n *   mapAdapter: new MapAdapter(),\n *   target: 'map',\n *   qmsId: 448,\n *   baseUrl: 'https://demo.nextgis.com',\n *   webmapId: 3985\n * });\n * ```\n */\nexport class NgwMap<\n  M = unknown,\n  L = unknown,\n  C = unknown,\n  O extends NgwMapOptions<C> = NgwMapOptions<C>,\n> extends WebMap<M, L, C, NgwMapEvents, O> {\n  static getIcon = getIcon;\n\n  readonly emitter: StrictEventEmitter<EventEmitter, NgwMapEvents> =\n    new EventEmitter();\n  connector!: NgwConnector;\n\n  protected _ngwLayers: NgwLayers = {};\n  private $$selectFromNgwRaster?: (ev: MapClickEvent) => void;\n  private $$selectFromNgwVector?: (ev: OnLayerMouseOptions) => void;\n  private _promises: Record<PromiseGroup, CancelablePromise[]> = {\n    select: [],\n    identify: [],\n  };\n\n  constructor(options: O) {\n    super(prepareWebMapOptions(options) as O);\n    if (options.connector) {\n      this.connector = options.connector;\n    }\n    this._createWebMap().then(() => {\n      const container = this.getContainer();\n      if (container) {\n        container.classList.add('ngw-map-container');\n      }\n      if (this.options.whitlabel) {\n        this._whiteLabel();\n      }\n    });\n  }\n\n  /**\n   * Organized addition to the map design and controls elements,\n   * calling `control.onAdd(this.webMap.mapAdapter)`\n   * @param control - object with onAdd and onRemove methods\n   *                or a string value indicating the name of the control installed in the map adapter\n   * @param position - position relative to the map angles\n   * @param options - initialization parameters if the control is set as a string value\n   *\n   * @example\n   * ```javascript\n   * ngwMap.addControl(new CustomControl(), 'bottom-left');\n   * ngwMap.addControl('ZOOM', 'top-right')\n   * ```\n   */\n  async addControl<K extends keyof MapControls>(\n    controlDef: K | C,\n    position: ControlPosition,\n    options?: MapControls[K],\n  ): Promise<any> {\n    await this.onLoad('controls:create');\n    return super.addControl(controlDef, position, options);\n  }\n\n  /**\n   * Add any (style, vector, webmap) NGW layer by resource definition.\n   * @param options - set layer identification parameters and render method.\n   *\n   * @example\n   * ```javascript\n   * // add raster layer resourceId is the style of 4004 layer\n   * ngwMap.addNgwLayer({ resource: 4005 });\n   * // add vector data from layer GEOJSON source\n   * ngwMap.addNgwLayer({\n   *   resource: 4038,\n   *   adapter: 'GEOJSON',\n   *   adapterOptions: { paint: { color: 'red' } }\n   * });\n   * ```\n   */\n  async addNgwLayer(\n    options: NgwLayerOptions,\n  ): Promise<ResourceAdapter | undefined> {\n    await this.onMapLoad();\n    // @ts-ignore for backward compatibility\n    const { keyname, resourceId } = options;\n\n    if (keyname || resourceId !== undefined) {\n      deprecatedWarn(\n        'set `resource` options instead of `keyname` or `resourceId`',\n      );\n    }\n\n    const resource = options.resource;\n    if (!keyname && !resourceId && !resource) {\n      throw new Error(\n        'resource, resourceId or keyname is required parameter to add NGW layer',\n      );\n    }\n    if (defined(this.options.baseUrl)) {\n      try {\n        if (defined(this.options.setViewDelay)) {\n          options.adapterOptions = options.adapterOptions || {};\n          if (!defined(options.adapterOptions.setViewDelay)) {\n            options.adapterOptions.setViewDelay = this.options.setViewDelay;\n          }\n        }\n        const adapter = createNgwLayerAdapter(options, this, this.connector);\n        const adapterOpts = {\n          visibility: true,\n          // TODO: do not merge options, use only `adapterOptions`\n          ...options,\n          ...options.adapterOptions,\n        } as AdapterOptions;\n        const layer = (await this.addLayer(\n          adapter,\n          adapterOpts,\n        )) as ResourceAdapter<M, L, AdapterOptions>;\n        const id = layer && this.getLayerId(layer);\n        if (layer && id) {\n          this._ngwLayers[id] = { layer, resourceId: layer.resourceId };\n          layer.options.name =\n            layer.options.name ||\n            (layer.item && layer.item.resource.display_name);\n          if (layer.options.baselayer) {\n            const visibleLayerBaseLayer = this.getActiveBaseLayer();\n            if (visibleLayerBaseLayer) {\n              return layer;\n            }\n          }\n        }\n        return layer;\n      } catch (er) {\n        const resId =\n          isObject(resource) && 'id' in resource\n            ? resource.id\n            : keyname || resourceId || resource;\n        console.error(`Can't add NGW layer ${resId}.`, er);\n      }\n    }\n  }\n\n  /**\n   * Pans and zooms the map to the initial position specified in the options\n   */\n  fit(): void {\n    const { center, zoom, bounds } = this.options;\n    if (center) {\n      this.setCenter(center);\n      if (zoom) {\n        this.setZoom(zoom);\n      }\n    } else if (bounds) {\n      this.fitBounds(bounds);\n    }\n  }\n\n  fetchNgwLayerItem<\n    G extends Geometry = Geometry,\n    P extends FeatureProperties = FeatureProperties,\n  >(\n    options: Omit<FetchNgwItemOptions<P>, 'connector'>,\n  ): CancelablePromise<FeatureItem> {\n    return fetchNgwLayerItem<G, P>({\n      connector: this.connector,\n      ...options,\n    });\n  }\n\n  fetchNgwLayerItems<\n    F extends FeatureProperties = FeatureProperties,\n    G extends Geometry = Geometry,\n  >(\n    options: Omit<FetchNgwItemsOptions<F>, 'connector'>,\n  ): CancelablePromise<FeatureItem<F, G>[]> {\n    return fetchNgwLayerItems<G, F>({\n      connector: this.connector,\n      ...options,\n    });\n  }\n\n  fetchNgwLayerFeature<\n    G extends Geometry = Geometry,\n    P extends FeatureProperties = FeatureProperties,\n  >(\n    options: Omit<FetchNgwItemOptions<P>, 'connector'>,\n  ): CancelablePromise<Feature<G, P>> {\n    return fetchNgwLayerFeature<G, P>({\n      connector: this.connector,\n      ...options,\n    });\n  }\n\n  fetchNgwLayerFeatures<\n    G extends Geometry | null = Geometry,\n    P extends FeatureProperties = FeatureProperties,\n  >(\n    options: Omit<FetchNgwItemsOptions<P>, 'connector'>,\n  ): CancelablePromise<FeatureCollection<G, P>> {\n    return fetchNgwLayerFeatureCollection({\n      connector: this.connector,\n      ...options,\n    });\n  }\n\n  fetchIdentifyItem<\n    G extends Geometry = Geometry,\n    P extends FeatureProperties = FeatureProperties,\n  >(\n    identify: NgwIdentify,\n    requestOptions?: NgwFeatureRequestOptions,\n    // multiple = false\n  ): CancelablePromise<NgwFeatureItemResponse<P, G> | undefined> {\n    const promise = fetchIdentifyItem<G, P>({\n      identify,\n      connector: this.connector,\n      requestOptions,\n      // multiple,\n    });\n\n    this._addPromise('identify', promise);\n    return promise;\n  }\n\n  fetchIdentifyGeoJson(\n    identify: NgwIdentify,\n    multiple = false,\n  ): CancelablePromise<Feature | undefined> {\n    const promise = fetchIdentifyGeoJson({\n      identify,\n      connector: this.connector,\n      multiple,\n    });\n    if (promise && 'then' in promise) {\n      this._addPromise('identify', promise);\n      return promise;\n    } else {\n      return CancelablePromise.resolve(promise);\n    }\n  }\n\n  /**\n   * @deprecated use {@link fetchIdentifyGeoJson} instead\n   */\n  getIdentifyGeoJson(\n    identify: NgwIdentify,\n    multiple = false,\n  ): CancelablePromise<Feature | undefined> {\n    return this.fetchIdentifyGeoJson(identify, multiple);\n  }\n\n  async getNgwLayers(): Promise<NgwLayers> {\n    await this.onLoad();\n    return this._ngwLayers;\n  }\n\n  async getNgwLayerByResourceId(id: number): Promise<LayerAdapter | undefined> {\n    for (const n in this._ngwLayers) {\n      const mem = this._ngwLayers[n];\n      if (mem.resourceId === id) {\n        return mem && mem.layer;\n      } else if (mem.layer.getIdentificationIds) {\n        const ids = await mem.layer.getIdentificationIds();\n        if (ids && ids.some((x) => x === id)) {\n          return mem.layer;\n        }\n      }\n      if (mem.layer.getDependLayers) {\n        const dependLayers = mem.layer.getDependLayers() as NgwWebmapItem[];\n        const dependFit = dependLayers.find((x) => {\n          return x.item && x.item.parentId === id;\n        });\n        if (dependFit) {\n          return dependFit.layer;\n        }\n      }\n    }\n  }\n\n  /**\n   * Move map to layer. If the layer is NGW resource, extent will be received from the server\n   *\n   * @example\n   * ```javascript\n   * const ngwLayer = ngwMap.addNgwLayer({ id: 'ngw_layer_name', resourceId: 4005 });\n   * ngwMap.fitLayer(ngwLayer);\n   * ngwMap.fitLayer('ngw_layer_name');\n   * ```\n   */\n  async fitLayer(layerDef: LayerDef, options?: FitOptions): Promise<void> {\n    let id: string | undefined;\n    if (typeof layerDef === 'string' || typeof layerDef === 'number') {\n      id = String(id);\n    } else {\n      id = layerDef.id;\n    }\n    const ngwLayer = id && this._ngwLayers[id];\n    if (ngwLayer) {\n      if (ngwLayer.layer.getBounds) {\n        const bounds = await ngwLayer.layer.getBounds();\n        if (bounds) {\n          this.fitBounds(bounds, options);\n        }\n      } else {\n        let item: ResourceItem | undefined;\n        if (ngwLayer.layer.item) {\n          item = ngwLayer.layer.item;\n        } else {\n          const resourceId = ngwLayer.resourceId;\n          item = await this.connector.getResource(resourceId);\n        }\n        if (item) {\n          fetchNgwResourceExtent(item, this.connector).then((extent) => {\n            if (extent) {\n              this.fitBounds(extent, options);\n            }\n          });\n        }\n      }\n    } else {\n      super.fitLayer(layerDef, options);\n    }\n  }\n\n  /** @deprecated use {@link NgwMap.fitLayer} instead */\n  async zoomToLayer(layerDef: string | ResourceAdapter): Promise<void> {\n    return this.fitLayer(layerDef);\n  }\n\n  onLoad(event: keyof NgwMapEvents = 'ngw-map:create'): Promise<this> {\n    return super.onLoad(event as keyof WebMapEvents);\n  }\n\n  removeLayer(layerDef: LayerDef): void {\n    const layer = this.getLayer(layerDef);\n    if (layer) {\n      const layerId = this.getLayerId(layer);\n      if (layerId) {\n        delete this._ngwLayers[layerId];\n      }\n      super.removeLayer(layer);\n    }\n  }\n\n  enableSelection(): void {\n    if (!this.$$selectFromNgwRaster) {\n      this.$$selectFromNgwRaster = (ev: MapClickEvent) => {\n        const count = this.emitter.listenerCount('ngw:select');\n        if (count) {\n          this._selectFromNgwRaster(ev);\n        }\n      };\n      this.$$selectFromNgwVector = (ev: OnLayerMouseOptions) => {\n        if (this.emitter.listenerCount('ngw:select')) {\n          this._selectFromNgwVector(ev);\n        }\n      };\n      this.emitter.on('click', this.$$selectFromNgwRaster);\n      this.emitter.on('layer:click', this.$$selectFromNgwVector);\n    }\n  }\n\n  disableSelection(): void {\n    if (this.$$selectFromNgwRaster) {\n      this.emitter.removeListener('click', this.$$selectFromNgwRaster);\n      this.emitter.removeListener('click', this._selectFromNgwVector);\n      this.$$selectFromNgwRaster = undefined;\n      this.$$selectFromNgwVector = undefined;\n    }\n  }\n\n  /**\n   * @deprecated use {@link NgwMap.fetchNgwLayerItem} instead\n   */\n  getNgwLayerItem(options: {\n    resourceId: number;\n    featureId: number;\n  }): CancelablePromise<FeatureItem> {\n    return this.fetchNgwLayerItem(options);\n  }\n\n  /**\n   * @deprecated use {@link NgwMap.fetchNgwLayerItems} instead\n   */\n  getNgwLayerItems(\n    options: {\n      resourceId: number;\n      connector?: NgwConnector;\n      filters?: PropertiesFilter;\n    } & FilterOptions,\n  ): CancelablePromise<FeatureItem[]> {\n    return this.fetchNgwLayerItems(options);\n  }\n\n  /**\n   * @deprecated use {@link NgwMap.fetchNgwLayerFeature} instead\n   */\n  getNgwLayerFeature<\n    G extends Geometry = Geometry,\n    P extends JsonMap = JsonMap,\n  >(options: {\n    resourceId: number;\n    featureId: number;\n  }): CancelablePromise<Feature<G, P>> {\n    return this.fetchNgwLayerFeature(options);\n  }\n\n  /**\n   * @deprecated use {@link NgwMap.fetchNgwLayerFeatures} instead\n   */\n  getNgwLayerFeatures<\n    G extends Geometry | null = Geometry,\n    P extends JsonMap = JsonMap,\n  >(\n    options: FetchNgwItemsOptions<P>,\n  ): CancelablePromise<FeatureCollection<G, P>> {\n    return this.fetchNgwLayerFeatures(options);\n  }\n\n  /** @deprecated use {@link NgwMap.cancelPromises} instead */\n  cancelPromise(...args: PromiseGroup[]): void {\n    this.cancelPromises(...args);\n  }\n\n  cancelPromises(...args: PromiseGroup[]): void {\n    if (!args.length) {\n      args = Object.keys(this._promises) as PromiseGroup[];\n    }\n    args.forEach((name) => {\n      const group = this._promises[name];\n      if (group) {\n        group.forEach((x) => x.cancel());\n        this._promises[name] = [];\n      }\n    });\n  }\n\n  private _addPromise(groupName: PromiseGroup, promise: CancelablePromise) {\n    const group = this._promises[groupName];\n    if (group && group.indexOf(promise) === -1) {\n      const removeFromGroup = () => {\n        const index = group.indexOf(promise);\n        if (index !== -1) {\n          group.splice(index, 1);\n        }\n      };\n      promise.then(removeFromGroup);\n      promise.catch(removeFromGroup);\n      group.push(promise);\n    }\n  }\n\n  private _isFitFromResource() {\n    const params = this._initMapState;\n    if (params.zoom && params.center) {\n      return false;\n    }\n    return true;\n  }\n\n  private async _createWebMap() {\n    await this.create();\n    if (this.options.qmsId) {\n      this._addQmsBaseLayer();\n    }\n    if (this.options.osm) {\n      this._addOsmBaseLayer();\n    }\n\n    const resources: NgwLayerOptions[] = [];\n    const layerFitAllowed = this._isFitFromResource();\n    if (this.options.webmapId) {\n      appendNgwResources(resources, this.options.webmapId, {\n        fit: layerFitAllowed,\n      });\n    }\n    if (this.options.resources && Array.isArray(this.options.resources)) {\n      this.options.resources.forEach((x) => {\n        const overwriteOptions: Partial<NgwLayerOptions> = {};\n        if (!layerFitAllowed) {\n          overwriteOptions.fit = false;\n        }\n        appendNgwResources(resources, x, {}, overwriteOptions);\n      });\n    }\n    for (const r of resources) {\n      try {\n        await this.addNgwLayer(r);\n      } catch (er) {\n        console.log(er);\n      }\n    }\n    this._emitStatusEvent('ngw-map:create', this);\n    this.enableSelection();\n  }\n\n  private _addOsmBaseLayer() {\n    this.addBaseLayer('OSM');\n  }\n\n  private _addQmsBaseLayer() {\n    let qmsId: number;\n    let qmsLayerName: string | undefined;\n    if (Array.isArray(this.options.qmsId)) {\n      qmsId = this.options.qmsId[0];\n      qmsLayerName = this.options.qmsId[1];\n    } else {\n      qmsId = Number(this.options.qmsId);\n    }\n    const qmsLayerOptions: Partial<QmsAdapterOptions> = {\n      qmsId,\n    };\n    if (qmsLayerName) {\n      qmsLayerOptions.id = qmsLayerName;\n    }\n\n    this.addBaseLayer('QMS', qmsLayerOptions);\n  }\n\n  private _selectFromNgwVector(\n    ev: OnLayerMouseOptions,\n  ): FeatureLayersIdentify | undefined {\n    const layer: ResourceAdapter = ev.layer as ResourceAdapter;\n    // item property means layer is NgwResource\n    const id = layer.item && layer.item.resource.id;\n    const feature = ev.feature;\n\n    if (id !== undefined && feature) {\n      const featureId = feature.id;\n      if (featureId) {\n        const identifyFeature: LayerFeature = {\n          id: Number(featureId),\n          fields: feature.properties || {},\n          label: `#${id}`,\n          layerId: Number(id),\n          parent: '',\n          geom: feature.geometry,\n        };\n        const items: FeatureLayersIdentifyItems = {\n          featureCount: 1,\n          features: [identifyFeature],\n        };\n        const identify: FeatureLayersIdentify = {\n          featureCount: 1,\n          [id]: items,\n        };\n        this._emitStatusEvent(\n          'ngw:select',\n          this._prepareToIdentify({\n            ...identify,\n            resources: [id],\n            sourceType: 'vector',\n          } as NgwIdentify),\n        );\n        return identify;\n      }\n    }\n  }\n\n  private async _selectFromNgwRaster(ev: MapClickEvent) {\n    this._emitStatusEvent('ngw:preselect');\n\n    const promises: Promise<number[] | undefined>[] = [];\n    const layers = Object.values(this._ngwLayers);\n    layers.sort((a, b) => {\n      if (a.layer.order && b.layer.order) {\n        return b.layer.order - a.layer.order;\n      }\n      return 1;\n    });\n    layers.forEach((l) => {\n      const layer = l.layer;\n      const identFunc =\n        typeof layer.getIdentificationIds === 'function'\n          ? layer.getIdentificationIds\n          : false;\n      if (identFunc && layer.options.selectable && this.isLayerVisible(layer)) {\n        promises.push(identFunc.call(layer));\n      }\n    });\n    const getIdsPromise = Promise.all(promises);\n    const getIds = await getIdsPromise;\n    const ids: number[] = [];\n    getIds.forEach((x) => {\n      if (x) {\n        x.forEach((y) => ids.push(y));\n      }\n    });\n\n    if (!ids.length) {\n      this._emitStatusEvent('ngw:select', null);\n      return;\n    }\n\n    const pixelRadius = this.options.pixelRadius || 10;\n    const center = this.getCenter();\n    let zoom = this.getZoom();\n    zoom = zoom !== undefined ? zoom : 20;\n    if (!center || !zoom) {\n      this._emitStatusEvent('ngw:select', null);\n      return;\n    }\n    const radius = getIdentifyRadius(center, zoom, pixelRadius);\n\n    const selectPromise = sendIdentifyRequest(ev, {\n      layers: ids,\n      connector: this.connector,\n      radius,\n    }).then((resp) => {\n      this._emitStatusEvent(\n        'ngw:select',\n        this._prepareToIdentify({\n          ...resp,\n          resources: ids,\n          sourceType: 'raster',\n          event: ev,\n        }),\n      );\n      return resp;\n    });\n    this._addPromise('select', selectPromise);\n    return selectPromise;\n  }\n\n  private _prepareToIdentify<\n    F = FeatureProperties,\n    G extends Geometry = Geometry,\n  >(identify: NgwIdentify): NgwIdentifyEvent {\n    const getIdentifyItems_ = () => {\n      return getIdentifyItems(identify, true).map((x) => {\n        return createIdentifyItem<F, G>({\n          feature: x.feature,\n          connector: this.connector,\n        });\n      });\n    };\n    return {\n      ...identify,\n      getIdentifyItems: getIdentifyItems_,\n    };\n  }\n\n  private async _whiteLabel() {\n    const container = this.getContainer();\n    if (container) {\n      const logo = await getCompanyLogo(\n        this.connector,\n        this.options.companyLogoOptions,\n      );\n      if (logo) {\n        container.appendChild(logo);\n      }\n    }\n  }\n}\n"],"names":["appendNgwResources","options","resource","defOptions","overwriteOptions","Number","push","Array","isArray","resourceId","id","OPTIONS","target","baseUrl","whitlabel","controls","controlsOptions","ZOOM","position","ATTRIBUTION","customAttribution","pixelRadius","getIdentifyRadius","center","zoom","Math","abs","cos","PI","pow","NgwMap","kits","QmsKit","starterKits","forEach","x","connector","NgwConnector","auth","deepmerge","bounds","maxBounds","NgwKit","create","prepareWebMapOptions","EventEmitter","select","identify","_createWebMap","then","container","getContainer","classList","add","_whiteLabel","controlDef","this","onLoad","onMapLoad","keyname","undefined","deprecatedWarn","Error","defined","setViewDelay","adapterOptions","adapter","createNgwLayerAdapter","adapterOpts","visibility","addLayer","layer","getLayerId","_ngwLayers","name","item","display_name","baselayer","getActiveBaseLayer","resId","isObject","console","error","setCenter","setZoom","fitBounds","fetchNgwLayerItem","fetchNgwLayerItems","fetchNgwLayerFeature","fetchNgwLayerFeatureCollection","requestOptions","promise","fetchIdentifyItem","_addPromise","multiple","fetchIdentifyGeoJson","CancelablePromise","n","mem","getIdentificationIds","ids","some","getDependLayers","dependLayers","dependFit","find","parentId","layerDef","String","ngwLayer","getBounds","getResource","fetchNgwResourceExtent","extent","fitLayer","event","getLayer","layerId","$$selectFromNgwRaster","ev","emitter","listenerCount","_selectFromNgwRaster","$$selectFromNgwVector","_selectFromNgwVector","on","removeListener","fetchNgwLayerFeatures","cancelPromises","args","length","Object","keys","_promises","group","cancel","groupName","indexOf","removeFromGroup","index","splice","catch","params","_initMapState","qmsId","_addQmsBaseLayer","osm","_addOsmBaseLayer","resources","layerFitAllowed","_isFitFromResource","webmapId","fit","r","addNgwLayer","log","_emitStatusEvent","enableSelection","addBaseLayer","qmsLayerName","qmsLayerOptions","feature","featureId","featureCount","features","fields","properties","label","parent","geom","geometry","_prepareToIdentify","sourceType","promises","layers","values","sort","a","b","order","l","identFunc","selectable","isLayerVisible","call","getIdsPromise","Promise","all","getIds","y","getCenter","getZoom","radius","selectPromise","sendIdentifyRequest","resp","getIdentifyItems","map","createIdentifyItem","getCompanyLogo","companyLogoOptions","logo","appendChild","WebMap","getIcon"],"sourceRoot":""}